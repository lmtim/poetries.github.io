<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Poetry&#39;s Blog</title>
  <subtitle>聆听、感受、成长</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.poetries.top/"/>
  <updated>2016-09-27T15:41:22.579Z</updated>
  <id>http://www.poetries.top/</id>
  
  <author>
    <name>Poetry</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>javascript笔记基础总结篇</title>
    <link href="http://www.poetries.top/2016/09/24/javascript%E7%AC%94%E8%AE%B0%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%E7%AF%87/"/>
    <id>http://www.poetries.top/2016/09/24/javascript笔记基础总结篇/</id>
    <published>2016-09-24T02:33:00.000Z</published>
    <updated>2016-09-27T15:41:22.579Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>转载请声明出处 <a href="http://blog.poetries.top/2016/09/24/javascript%E7%AC%94%E8%AE%B0%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%E7%AF%87/#more" target="_blank" rel="external">博客原文</a></p>
</blockquote>
<p>随手翻阅以前的学习笔记，顺便整理一下放在这里，方便自己复习，也希望你有也有帮助吧</p>
<h3 id="第一课时-入门基础"><a href="#第一课时-入门基础" class="headerlink" title="第一课时 入门基础"></a>第一课时 入门基础</h3><hr>
<h4 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a><strong>知识点</strong>：</h4><hr>
<ul>
<li>操作系统就是个应用程序</li>
<li>只要是应用程序都要占用物理内存</li>
<li>浏览器本身也是一个应用程序</li>
<li>浏览器本身只懂得解析<code>HTML</code></li>
<li>调用浏览器这个应用程序的一个功能绘制<a id="more"></a>
<h4 id="1、javascript介绍"><a href="#1、javascript介绍" class="headerlink" title="1、javascript介绍"></a>1、javascript介绍</h4></li>
</ul>
<hr>
<ul>
<li><p><code>JavaScript</code>操作<code>DOM</code>的本质是=获取+触发+改变</p>
</li>
<li><p>目的：就是用来操作内存中的<code>DOM</code>节点</p>
<ul>
<li>修改<code>DOM</code>节点的属性</li>
<li>过<code>javascript</code>语法组织逻辑代码操作DOM</li>
<li><code>BOM(window)</code>它包含了<code>DOM</code></li>
<li><code>DOM(document)</code></li>
<li><code>script</code>脚本推荐放在最下边好处：防止因网络问题，页面加载时间长，出现空白；即便网络问题，浏览器也把<code>DOM</code>加载渲染完成，等待从服务端下载完<code>js</code>脚本，出现效果</li>
<li><code>css</code>不放在最下面原因通俗地讲：好比先穿好衣服在出去，浏览器先把<code>css</code>样式准备好，在加载结构层，使得页面有样子；如果放在下面，因为页面是从上往下加载，没有<code>css</code>，就剩下裸露的标签，很难看，使得用户体验不好</li>
</ul>
</li>
</ul>
<h4 id="2、基于对象的内存管理"><a href="#2、基于对象的内存管理" class="headerlink" title="2、基于对象的内存管理"></a>2、基于对象的内存管理</h4><hr>
<ul>
<li><code>javascript</code>就是来操作这些对象<ul>
<li>通过逻辑组织对象之间的关系和行为</li>
<li>如何操作这些对象？通过变量引用</li>
</ul>
</li>
</ul>
<h4 id="3、变量"><a href="#3、变量" class="headerlink" title="3、变量"></a>3、变量</h4><hr>
<ul>
<li>变量本质是一个空盒子，里面记录了一个内存地址，使能找到内存中的对象，保存了指向具体的实在的东西的地址</li>
<li>变量存在栈中，对象存在堆中</li>
<li>变量的意义：方便我们去操作对象</li>
<li>变量的几种引用方式<ul>
<li>指针（<code>C</code>语言中叫法）</li>
<li>引用（<code>Java</code>）</li>
<li>变量</li>
</ul>
</li>
<li>例如：<ul>
<li><code>var b = document.body</code> 含义：把<code>body</code>这个对象在内存中的地址放到b变量里面，变量<code>b</code>（<code>b</code>是内存地址的别名）本身也存在内存中，以后的操作是针对<code>body</code>这个地址</li>
</ul>
</li>
</ul>
<ul>
<li>变量命名规范<ul>
<li>由字母(<code>a-zA-Z</code>)数字(<code>0-9</code>)下划线(<code>_</code>)以及美元符号(<code>$</code>)</li>
<li>不能由数字开头</li>
<li>命名尽量用英文并且具有一定的含义</li>
<li>如果有多个英文单词,后面单词的首字母大写</li>
<li>不能使用关键字</li>
<li>首字母不要大写，大写是有特殊含义的</li>
</ul>
</li>
</ul>
<h4 id="DOM在内存中的一些图示"><a href="#DOM在内存中的一些图示" class="headerlink" title="DOM在内存中的一些图示"></a>DOM在内存中的一些图示</h4><hr>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-1ca35c7d64faec6c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="DOM解析树"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-3a4d0eba77f1a163.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="DOM内存图"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-80fe8bcddfbca269.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="DOM内存图"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-ce659f11e978cd3b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="DOM内存图"></p>
<h3 id="第二课时"><a href="#第二课时" class="headerlink" title="第二课时"></a>第二课时</h3><hr>
<h4 id="回顾上节："><a href="#回顾上节：" class="headerlink" title="回顾上节："></a>回顾上节：</h4><ul>
<li><p>1、<code>javascript</code>介绍</p>
</li>
<li><p>2、基于对象的内存管理</p>
</li>
<li><p><code>javascript</code>就是来操作这些对象</p>
<ul>
<li>通过逻辑组织对象之间的关系和行为</li>
<li>如何操作这些对象？通过变量引用</li>
</ul>
</li>
<li>3、变量</li>
</ul>
<h4 id="知识点：-1"><a href="#知识点：-1" class="headerlink" title="知识点："></a><strong>知识点</strong>：</h4><hr>
<h4 id="1、window作用域"><a href="#1、window作用域" class="headerlink" title="1、window作用域"></a>1、<code>window</code>作用域</h4><hr>
<ul>
<li>只要在<code>script</code>标签中定义的变量，默认就在<code>window</code>的作用域之下</li>
<li>默认就是<code>window</code>这个对象里面写代码</li>
</ul>
<h4 id="2、数据类型"><a href="#2、数据类型" class="headerlink" title="2、数据类型"></a>2、数据类型</h4><hr>
<h5 id="如何判断js中的数据类型："><a href="#如何判断js中的数据类型：" class="headerlink" title="如何判断js中的数据类型："></a>如何判断js中的数据类型：</h5><hr>
<ul>
<li><p><code>typeof</code>、<code>instanceof</code>、 <code>constructor</code>、 <code>prototype</code>方法比较</p>
</li>
<li><p>如何判断<code>js</code>中的类型呢，先举几个例子：</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="string">"iamstring."</span>;</div><div class="line"><span class="keyword">var</span> b = <span class="number">222</span>;</div><div class="line"><span class="keyword">var</span> c= [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line"><span class="keyword">var</span> e = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="number">111</span>);&#125;;</div><div class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">this</span>.name=<span class="string">"22"</span>;&#125;;</div></pre></td></tr></table></figure>
<h6 id="最常见的判断方法：typeof"><a href="#最常见的判断方法：typeof" class="headerlink" title="最常见的判断方法：typeof"></a><strong>最常见的判断方法</strong>：<code>typeof</code></h6><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">alert(<span class="keyword">typeof</span> a)   ------------&gt; string</div><div class="line">alert(<span class="keyword">typeof</span> b)   ------------&gt; number</div><div class="line">alert(<span class="keyword">typeof</span> c)   ------------&gt; object</div><div class="line">alert(<span class="keyword">typeof</span> d)   ------------&gt; object</div><div class="line">alert(<span class="keyword">typeof</span> e)   ------------&gt; <span class="function"><span class="keyword">function</span></span></div><div class="line"><span class="title">alert</span>(<span class="params">typeof f</span>)   ------------&gt; <span class="title">function</span></div></pre></td></tr></table></figure>
<ul>
<li>其中<code>typeof</code>返回的类型都是字符串形式，需注意，例如：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">alert(<span class="keyword">typeof</span> a == <span class="string">"string"</span>) -------------&gt; <span class="literal">true</span></div><div class="line">alert(<span class="keyword">typeof</span> a == <span class="built_in">String</span>) ---------------&gt; <span class="literal">false</span></div></pre></td></tr></table></figure>
<ul>
<li>另外<code>typeof</code>可以判断<code>function</code>的类型；在判断除<code>Object</code>类型的对象时比较方便。</li>
</ul>
<h6 id="判断已知对象类型的方法：instanceof"><a href="#判断已知对象类型的方法：instanceof" class="headerlink" title="判断已知对象类型的方法：instanceof"></a><strong>判断已知对象类型的方法</strong>：<code>instanceof</code></h6><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">alert(c <span class="keyword">instanceof</span> <span class="built_in">Array</span>) ---------------&gt; <span class="literal">true</span></div><div class="line">alert(d <span class="keyword">instanceof</span> <span class="built_in">Date</span>) </div><div class="line">alert(f <span class="keyword">instanceof</span> <span class="built_in">Function</span>) ------------&gt; <span class="literal">true</span></div><div class="line">alert(f <span class="keyword">instanceof</span> <span class="function"><span class="keyword">function</span>) ------------&gt; <span class="title">false</span></span></div></pre></td></tr></table></figure>
<ul>
<li><strong>注意</strong>：<code>instanceof</code>后面一定要是对象类型，并且大小写不能错，该方法适合一些条件选择或分支。</li>
</ul>
<h6 id="根据对象的constructor判断：constructor"><a href="#根据对象的constructor判断：constructor" class="headerlink" title="根据对象的constructor判断：constructor"></a><strong>根据对象的<code>constructor</code>判断</strong>：<code>constructor</code></h6><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">alert(c.constructor === <span class="built_in">Array</span>) ----------&gt; <span class="literal">true</span></div><div class="line">alert(d.constructor === <span class="built_in">Date</span>) -----------&gt; <span class="literal">true</span></div><div class="line">alert(e.constructor === <span class="built_in">Function</span>) -------&gt; <span class="literal">true</span></div></pre></td></tr></table></figure>
<ul>
<li><p><strong>注意</strong>： <code>constructor</code> 在类继承时会出错</p>
</li>
<li><p>例子：</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">A.prototype = <span class="keyword">new</span> B(); <span class="comment">//A继承自B</span></div><div class="line"><span class="keyword">var</span> aObj = <span class="keyword">new</span> A();</div><div class="line">alert(aobj.constructor === B) -----------&gt; <span class="literal">true</span>;</div><div class="line">alert(aobj.constructor === A) -----------&gt; <span class="literal">false</span>;</div></pre></td></tr></table></figure>
<ul>
<li>而<code>instanceof</code>方法不会出现该问题，对象直接继承和间接继承的都会报<code>true</code>：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">alert(aobj <span class="keyword">instanceof</span> B) ----------------&gt; <span class="literal">true</span>;</div><div class="line">alert(aobj <span class="keyword">instanceof</span> B) ----------------&gt; <span class="literal">true</span>;</div></pre></td></tr></table></figure>
<ul>
<li>言归正传，解决<code>construtor</code>的问题通常是让对象的<code>constructor</code>手动指向自己：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">aobj.constructor = A; <span class="comment">//将自己的类赋值给对象的constructor属性</span></div><div class="line">alert(aobj.constructor === A) -----------&gt; <span class="literal">true</span>;</div><div class="line">alert(aobj.constructor === B) -----------&gt; <span class="literal">false</span>; <span class="comment">//基类不会报true了;</span></div></pre></td></tr></table></figure>
<h6 id="通用但很繁琐的方法：-prototype"><a href="#通用但很繁琐的方法：-prototype" class="headerlink" title="通用但很繁琐的方法： prototype"></a><strong>通用但很繁琐的方法</strong>： <code>prototype</code></h6><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">alert(<span class="built_in">Object</span>.prototype.toString.call(a) === ‘[object <span class="built_in">String</span>]’) -------&gt; <span class="literal">true</span>;</div><div class="line">alert(<span class="built_in">Object</span>.prototype.toString.call(b) === ‘[object <span class="built_in">Number</span>]’) -------&gt; <span class="literal">true</span>;</div><div class="line">alert(<span class="built_in">Object</span>.prototype.toString.call(c) === ‘[object <span class="built_in">Array</span>]’) -------&gt; <span class="literal">true</span>;</div><div class="line">alert(<span class="built_in">Object</span>.prototype.toString.call(d) === ‘[object <span class="built_in">Date</span>]’) -------&gt; <span class="literal">true</span>;</div><div class="line">alert(<span class="built_in">Object</span>.prototype.toString.call(e) === ‘[object <span class="built_in">Function</span>]’) -------&gt; <span class="literal">true</span>;</div><div class="line">alert(<span class="built_in">Object</span>.prototype.toString.call(f) === ‘[object <span class="built_in">Function</span>]’) -------&gt; <span class="literal">true</span>;</div></pre></td></tr></table></figure>
<ul>
<li>大小写不能写错，比较麻烦，但胜在通用。</li>
<li>通常情况下用<code>typeof</code>判断就可以了，遇到预知<code>Object</code>类型的情况可以选用<code>instanceof</code>或<code>constructor</code>方法</li>
</ul>
<h4 id="Javascript的数据类型有六种（ES6新增了第七种Symbol）"><a href="#Javascript的数据类型有六种（ES6新增了第七种Symbol）" class="headerlink" title="Javascript的数据类型有六种（ES6新增了第七种Symbol）"></a>Javascript的数据类型有六种（ES6新增了第七种<code>Symbol</code>）</h4><hr>
<ul>
<li>数值（<code>number</code>）：整数和小数（比如1和3.14）</li>
<li>字符串（<code>string</code>）：字符组成的文本（比如”Hello World”）</li>
<li>布尔值（<code>boolean</code>）：true（真）和false（假）两个特定值</li>
<li><code>undefined</code>：表示 未定义 或不存在，即此处目前没有任何值</li>
<li><code>null</code>：表示空缺，即此处应该有一个值，但目前为空</li>
<li>对象（<code>object</code>）：各种值组成的集合</li>
<li>通常，我们将数值、字符串、布尔值称为原始类型（<code>primitive type</code>）的值，即它们是最基本的数据类型，不能再细分了。而将对象称为合成类型（<code>complex type</code>）的值，因为一个对象往往是多个原始类型的值的合成，可以看作是一个存放各种值的容器。至于<code>undefined</code>和<code>null</code>，一般将它们看成两个特殊值</li>
</ul>
<h4 id="内存中一共分为几种对象："><a href="#内存中一共分为几种对象：" class="headerlink" title="内存中一共分为几种对象："></a>内存中一共分为几种对象：</h4><hr>
<ul>
<li>变量</li>
<li><code>DOM</code>对象</li>
<li>常量</li>
<li>自定义对象</li>
</ul>
<h4 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h4><hr>
<h5 id="转换函数"><a href="#转换函数" class="headerlink" title="转换函数"></a><strong>转换函数</strong></h5><hr>
<ul>
<li><code>toString()</code> 转换为字符串，在JavaScript中所有数据类型都可以转换为<code>string</code>类型</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> n1 = <span class="number">12</span>;</div><div class="line"><span class="keyword">var</span> n2 = <span class="literal">true</span>;</div><div class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line"><span class="keyword">var</span> o = &#123;&#125;;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">n1.toString(); <span class="comment">//"12"</span></div><div class="line">n2.toString(); <span class="comment">//"true"</span></div><div class="line">a.toString(); <span class="comment">//"1,2,3"</span></div><div class="line">o.toString(); <span class="comment">//"[object Object]"</span></div><div class="line">f.toString(); <span class="comment">//"function f()&#123;&#125;"</span></div></pre></td></tr></table></figure>
<ul>
<li><p><code>parseInt()</code>解析出一个<code>string</code>或者<code>number</code>类型的整数部分，如果没有可以转换的部分，则返回<code>NaN</code>（<code>not a number</code>）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> n1 = <span class="string">"12"</span>;</div><div class="line"><span class="keyword">var</span> n2 = <span class="string">"23hello"</span>;</div><div class="line"><span class="keyword">var</span> n3 = <span class="string">"hello"</span>;</div><div class="line"><span class="built_in">parseInt</span>(n1); <span class="comment">//12</span></div><div class="line"><span class="built_in">parseInt</span>(n2); <span class="comment">//23</span></div><div class="line"><span class="built_in">parseInt</span>(n3); <span class="comment">//NaN</span></div></pre></td></tr></table></figure>
<ul>
<li><code>parseFloat()</code>解析出一个<code>string</code>的浮点数部分，如果没有可以转换的部分，则返回<code>NaN</code>（<code>not a number</code>）</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> n1 = <span class="string">"1.2.3"</span>;</div><div class="line"><span class="keyword">var</span> n2 = <span class="string">"1.2hello"</span></div><div class="line"><span class="keyword">var</span> n3 = <span class="string">"hello"</span></div><div class="line"><span class="built_in">parseFloat</span>(n1); <span class="comment">//1.2</span></div><div class="line"><span class="built_in">parseFloat</span>(n2); <span class="comment">//1.2</span></div><div class="line"><span class="built_in">parseFloat</span>(n3); <span class="comment">//NaN</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a><strong>强制类型转换</strong></h5><hr>
<ul>
<li><code>Boolean(value)</code>- 把给定的值转换成<code>Boolean</code>型</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Boolean</span>(<span class="number">123</span>); <span class="comment">//true</span></div><div class="line"><span class="built_in">Boolean</span>(<span class="string">""</span>); <span class="comment">//false</span></div><div class="line"><span class="built_in">Boolean</span>([]); <span class="comment">//true</span></div><div class="line"><span class="built_in">Boolean</span>(&#123;&#125;); <span class="comment">//true</span></div><div class="line"><span class="built_in">Boolean</span>(<span class="literal">null</span>); <span class="comment">//false</span></div><div class="line"><span class="built_in">Boolean</span>(<span class="literal">undefined</span>); <span class="comment">//false</span></div></pre></td></tr></table></figure>
<ul>
<li><code>Number(value)</code>-把给定的值转换成数字（可以是整数或浮点数）</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Number</span>(<span class="string">"123"</span>); <span class="comment">//123</span></div><div class="line"><span class="built_in">Number</span>(<span class="string">"123h"</span>); <span class="comment">//NaN</span></div><div class="line"><span class="built_in">Number</span>(<span class="literal">true</span>); <span class="comment">//1</span></div><div class="line"><span class="built_in">Number</span>(<span class="literal">false</span>); <span class="comment">//0</span></div><div class="line"><span class="built_in">Number</span>(<span class="literal">undefined</span>); <span class="comment">//NaN</span></div><div class="line"><span class="built_in">Number</span>(<span class="literal">null</span>); <span class="comment">//0</span></div><div class="line"><span class="built_in">Number</span>([]); <span class="comment">//0</span></div><div class="line"><span class="built_in">Number</span>(&#123;&#125;); <span class="comment">//NaN</span></div></pre></td></tr></table></figure>
<ul>
<li><p><code>String(value)</code>- 把给定的值转换成字符串</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">String</span>(<span class="number">123</span>); <span class="comment">//"123"</span></div><div class="line"><span class="built_in">String</span>([<span class="number">1</span>,<span class="number">2</span>]); <span class="comment">//"1,2"</span></div><div class="line"><span class="built_in">String</span>(<span class="literal">undefined</span>) <span class="comment">//"undefined"</span></div><div class="line"><span class="built_in">String</span>(<span class="literal">null</span>) <span class="comment">//"null"</span></div><div class="line"><span class="built_in">String</span>(&#123;&#125;) <span class="comment">//"[object Object]"</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a><strong>隐式转换</strong></h5><hr>
<ul>
<li>数字＋字符串：数字转换为字符串 <code>console.log(12+&quot;12&quot;)</code>; //1212</li>
<li>数字＋布尔值：<code>true</code>转换为<code>1</code>，<code>false</code>转换为<code>0</code>  <code>console.log(12+true)</code>; //13</li>
<li>字符串＋布尔值：布尔值转换为true或false <code>console.log(&quot;hello&quot;+true)</code>; //<code>hellotrue</code></li>
<li>布尔值＋布尔值 <code>console.log(true+true)</code>; //2</li>
</ul>
<h5 id="null和undefined"><a href="#null和undefined" class="headerlink" title="null和undefined"></a><strong>null和undefined</strong></h5><hr>
<ul>
<li><code>undefined</code> 表示一种未知状态，声明了但没有初始化的变量，变量的值时一个未知状态。访问不存在的属性或对象<code>window.xxx</code>）方法没有明确返回值时，返回值是一个<code>undefined.</code>当对未声明的变量应用<code>typeof</code>运算符时，显示为<code>undefined</code>。</li>
<li><code>null</code>表示尚未存在的对象,<code>null</code>是一个有特殊意义的值。可以为变量赋值为<code>null</code>，此时变量的值为“已知状态”(不是<code>undefined</code>)，即<code>null</code>。（用来初始化变量，清除变量内容，释放内存）</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="literal">undefined</span>==<span class="literal">null</span>   <span class="comment">//结果为true,但含义不同。</span></div><div class="line"><span class="literal">undefined</span>===<span class="literal">null</span> <span class="comment">//false,两者类型不一致，前者为“undefined”，后者为“object”</span></div></pre></td></tr></table></figure>
<h4 id="3、javascript脚本执行顺序"><a href="#3、javascript脚本执行顺序" class="headerlink" title="3、javascript脚本执行顺序"></a>3、javascript脚本执行顺序</h4><hr>
<ul>
<li>第一步定义： 分为<code>var</code>定义 和函数定义<code>function</code></li>
<li>第二步执行： 其他所有</li>
<li>先从上往下定义完所有的后，再从上往下执行 除了<code>var</code>  <code>function</code>定义外的 其他都是执行 如：赋值 函数调用</li>
<li>在栈里面找到的，就不去堆里面找，因为栈空间小，就近原则【总之：先在栈里面找，找不到再去堆里面找】在栈里面开辟，就能找到堆里面的地址 如：<code>var b = function(){}</code></li>
</ul>
<h4 id="总结一下-运算的规则：-隐式转换"><a href="#总结一下-运算的规则：-隐式转换" class="headerlink" title="总结一下==运算的规则：(隐式转换)"></a>总结一下<code>==</code>运算的规则：(隐式转换)</h4><hr>
<ul>
<li><p><code>JS</code>中的值有两种类型：原始类型(<code>Primitive</code>)、对象类型(<code>Object</code>)。</p>
</li>
<li><p>原始类型包括：<code>Undefined</code>、<code>Null</code>、<code>Boolean</code>、<code>Number</code>和<code>String</code>等五种。</p>
</li>
<li><p><code>Undefined</code>类型和<code>Null</code>类型的都只有一个值，即<code>undefined</code>和<code>null</code>；<code>Boolean</code>类型有两个值：<code>true</code>和<code>false</code>；<code>Number</code>类型的值有很多很多；<code>String</code>类型的值理论上有无数个。</p>
</li>
<li><p>所有对象都有<code>valueOf()</code>和<code>toString()</code>方法，它们继承自<code>Object</code>，当然也可能被子类重写</p>
</li>
<li><p><code>undefined == null</code>，结果是<code>true</code>。且它俩与所有其他值比较的结果都是<code>false</code>。</p>
</li>
<li><p><code>String == Boolean</code>，需要两个操作数同时转为<code>Number</code>。</p>
</li>
<li><p><code>String/Boolean == Number</code>，需要<code>String/Boolean</code>转为<code>Number</code>。</p>
</li>
<li><p><code>Object == Primitive</code>，需要<code>Object</code>转为<code>Primitive</code>(具体通过<code>valueOf</code>和<code>toString</code>方法)</p>
</li>
</ul>
<h3 id="第三课时"><a href="#第三课时" class="headerlink" title="第三课时"></a>第三课时</h3><hr>
<h4 id="上节回顾："><a href="#上节回顾：" class="headerlink" title="上节回顾："></a>上节回顾：</h4><ul>
<li><p>1、<code>window</code>作用域</p>
<ul>
<li>只要在<code>script</code>标签中定义的变量，默认就在<code>window</code>的作用域之下</li>
<li>默认就是<code>window</code>这个对象里面写代码</li>
</ul>
</li>
<li><p>2、数据类型</p>
<ul>
<li><code>number</code>:数字</li>
<li><code>string</code>:字符类型，必须用引号引起来</li>
<li><code>boolean</code>:布尔类型  <code>true</code> <code>false</code></li>
<li><code>null</code>:变量引用了一块堆中一个空的空间</li>
<li><code>object</code>:引用对象类型（存在于堆里面）</li>
<li><code>array</code>:数组类型</li>
<li><code>function</code>:函数数据类型</li>
</ul>
</li>
<li><p><strong>对象数据类型：</strong> <code>object</code>,<code>array</code>,<code>function</code></p>
</li>
<li><p>3、<code>javascript</code>脚本执行顺序</p>
<ul>
<li>定义 <code>var</code> <code>function</code></li>
<li>执行 其他所有</li>
</ul>
</li>
</ul>
<h4 id="知识点：-2"><a href="#知识点：-2" class="headerlink" title="知识点："></a><strong>知识点：</strong></h4><hr>
<h4 id="1、运算符"><a href="#1、运算符" class="headerlink" title="1、运算符"></a><strong>1、运算符</strong></h4><hr>
<ul>
<li><p>算术运算符(<code>+</code>,<code>-</code>,<code>*</code>,<code>/</code>,<code>%</code>,<code>++</code>,<code>--</code>)</p>
<ul>
<li>如果引用所指的地方是<code>null</code>的话，那么在运算中就会自动变成<code>0</code></li>
<li><code>%</code>运算符 如：<code>4%5</code>取模 模是<code>4</code>  <code>7%5</code>取模 模是<code>7-5=2</code></li>
</ul>
</li>
<li><p>字符串和数字相加的情况：</p>
<ul>
<li>左右都是数字：数字相加</li>
<li>左右有一个字符串：字符串拼接</li>
<li>左右边有一个<code>null</code>:<code>null</code>看做<code>0</code></li>
<li>左右边有一个<code>undefined</code>：结果是<code>NAN</code>（<code>not is number</code>）</li>
</ul>
</li>
<li><p>赋值运算符(<code>=</code>,<code>-=</code>,<code>+=</code>,<code>*=</code>,<code>/=</code>,<code>%=</code>)</p>
</li>
<li><p>比较运算符(<code>==</code>,<code>===</code>,<code>!=</code>,<code>&gt;</code>,<code>&lt;</code>,<code>&gt;=</code>,<code>&lt;=</code>)</p>
<ul>
<li>先执行表达式计算再赋值</li>
<li><code>==</code>和<code>!=</code>在比较之前首先让双方的值做隐士类型转换，<code>===</code>不转换</li>
</ul>
</li>
<li><p>逻辑运算符(<code>||</code>,<code>&amp;&amp;</code>,<code>!</code>)</p>
<ul>
<li><code>||</code> 在js中和PHP中是不一样的 js中返回逻辑或的左边或右边的一个结果 PHP返回<code>||</code>或出来以后的结果即：<code>true</code> <code>false</code></li>
<li>特殊性（注意）—一定要记住（这个特性和其他编程语言不一样）：在<code>js</code>里返回不是布尔值</li>
<li><code>||</code> 短路运算 第一个条件为真 后面不执行</li>
<li><code>&amp;&amp;</code>把表达式最后一个值返回（注意这里）</li>
</ul>
</li>
</ul>
<h5 id="条件运符-表达式1-表达式2-表达式3-三元运算符"><a href="#条件运符-表达式1-表达式2-表达式3-三元运算符" class="headerlink" title="条件运符(表达式1?表达式2:表达式3)三元运算符"></a><strong>条件运符(<code>表达式1?表达式2:表达式3</code>)三元运算符</strong></h5><hr>
<ul>
<li><code>表达式1?表达式2:表达式3</code> 表达式1为真 返回表达式2 否则返回表达式3</li>
<li>三元运算符 可以多层次嵌套使用</li>
</ul>
<h4 id="2、在js中-有四种被认为是非："><a href="#2、在js中-有四种被认为是非：" class="headerlink" title="2、在js中 有四种被认为是非："></a><strong>2、在js中 有四种被认为是<code>非</code></strong>：</h4><hr>
<ul>
<li><code>undefined</code></li>
<li><code>null</code></li>
<li><code>false</code></li>
<li><code>0</code></li>
</ul>
<ul>
<li>例子：<code>var age = prompt(&quot;温馨提示：&quot;,&quot;请输入您的年龄&quot;)||0</code></li>
<li>当点击取消的时候，如果出现<code>undefined</code> <code>null</code>  <code>fasle</code>  <code>0</code> 表示非的逻辑 那么<code>||</code>就会过滤，取右边的值<code>0</code></li>
</ul>
<h3 id="第四课时"><a href="#第四课时" class="headerlink" title="第四课时"></a>第四课时</h3><hr>
<h4 id="上节回顾：-1"><a href="#上节回顾：-1" class="headerlink" title="上节回顾："></a><strong>上节回顾：</strong></h4><hr>
<ul>
<li><p>1、运算符</p>
<ul>
<li>算术运算符(<code>+</code>,<code>-</code>,<code>*</code>,<code>/</code>,<code>%</code>,<code>++</code>,<code>--</code>)</li>
<li>如果<code>+</code>号左边和右边有一边是字符串类型的数据的话，这个时候就变成字符串拼接</li>
<li><code>var str = &quot;你好&quot;+123;</code>//你好123</li>
<li><code>var count = 2;</code></li>
<li><code>var str1 = &quot;你叫了我第&quot;-count+&quot;次&quot;;</code>//你叫了我第2次</li>
<li>如果引用所指的地方是<code>null</code>的话，那么在运算中就会自动变成0</li>
</ul>
</li>
<li><p>2、赋值运算符<em>*(<code>=</code>,<code>-=</code>,<code>+=</code>,`</em>=<code>,</code>/=<code>,</code>%=`)</p>
</li>
<li><p>3、 比较运算符(<code>==,===,!=,&gt;,&lt;,&gt;=,&lt;=</code>)</p>
<ul>
<li>先执行表达式计算再赋值</li>
<li><code>==</code>和<code>!=</code>在比较之前首先让双方的值做隐士类型转换，<code>===</code>不转换</li>
</ul>
</li>
<li>4、逻辑运算符(<code>||,&amp;&amp;,!</code>)</li>
<li>5、条件运算符(<code>1&gt;2?3:4</code>)</li>
</ul>
<h4 id="知识点：-3"><a href="#知识点：-3" class="headerlink" title="知识点："></a><strong>知识点：</strong></h4><hr>
<h5 id="1、console-log调试程序"><a href="#1、console-log调试程序" class="headerlink" title="1、console.log调试程序"></a><strong>1、<code>console.log</code>调试程序</strong></h5><hr>
<ul>
<li>开发中大量使用这个 而不用<code>alert</code></li>
</ul>
<h5 id="2、条件结构"><a href="#2、条件结构" class="headerlink" title="2、条件结构"></a><strong>2、条件结构</strong></h5><hr>
<ul>
<li><code>if</code></li>
</ul>
<h6 id="javascript中if语句优化写法"><a href="#javascript中if语句优化写法" class="headerlink" title="javascript中if语句优化写法"></a><code>javascript</code>中<code>if</code>语句优化写法</h6><ul>
<li>使用常见的三元操作符</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (foo) bar(); <span class="keyword">else</span> baz(); ==&gt; foo?bar():baz();</div><div class="line"><span class="keyword">if</span> (!foo) bar(); <span class="keyword">else</span> baz(); ==&gt; foo?baz():bar();</div><div class="line"><span class="keyword">if</span> (foo) <span class="keyword">return</span> bar(); <span class="keyword">else</span> <span class="keyword">return</span> baz(); ==&gt; <span class="keyword">return</span> foo?bar():baz();</div></pre></td></tr></table></figure>
<ul>
<li>使用<code>and(&amp;&amp;)</code>和<code>or(||)</code>运算符</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (foo) bar(); ==&gt; foo&amp;&amp;bar();</div><div class="line"><span class="keyword">if</span> (!foo) bar(); ==&gt; foo||bar();</div></pre></td></tr></table></figure>
<ul>
<li><code>if...else</code></li>
<li><code>if...else if...else</code></li>
<li>当通过判断返回某个值的时候，优先使用三元表达式</li>
<li>当通过判断执行<code>N</code>段逻辑代码的时候，只能用条件结构</li>
</ul>
<h3 id="第五课时"><a href="#第五课时" class="headerlink" title="第五课时"></a>第五课时</h3><hr>
<h4 id="上节回顾：-2"><a href="#上节回顾：-2" class="headerlink" title="上节回顾："></a><strong>上节回顾：</strong></h4><hr>
<ul>
<li>1、<code>console.log</code>调试程序</li>
<li>2、条件结构<br>  <code>if</code><br>  <code>if...else</code><br>  <code>if...else if...else</code><ul>
<li>当通过判断返回某个值的时候，优先使用三元表达式</li>
<li>当通过判断执行<code>N</code>段逻辑代码的时候，只能用条件结构</li>
</ul>
</li>
</ul>
<h4 id="知识点：-4"><a href="#知识点：-4" class="headerlink" title="知识点："></a><strong>知识点：</strong></h4><hr>
<h5 id="1、switch"><a href="#1、switch" class="headerlink" title="1、switch"></a><strong>1、<code>switch</code></strong></h5><hr>
<ul>
<li><p><code>switch case break default</code> 条件   判断 退出  默认</p>
<ul>
<li>a.只要匹配上一个<code>case</code>，那么它下面的所有的<code>case</code>都会执行包括<code>default</code></li>
<li>b.<code>break</code>的意思跳出当前结构</li>
</ul>
</li>
</ul>
<h5 id="2、for"><a href="#2、for" class="headerlink" title="2、for"></a><strong>2、<code>for</code></strong></h5><hr>
<ul>
<li>循环有三个要素<ul>
<li>a.循环变量</li>
<li>b.判断（循环体）</li>
<li>c.改变循环变量</li>
<li>d.<code>continue</code>的意思结束本次循环进入下次循环</li>
</ul>
</li>
<li><code>continue</code> 结束本次循环，继续下一次循环  当前这次循环不做 直接做下面的</li>
<li><code>break</code> 结束后面的循环不做了</li>
</ul>
<h3 id="第六课时"><a href="#第六课时" class="headerlink" title="第六课时"></a>第六课时</h3><hr>
<h4 id="上节回顾：-3"><a href="#上节回顾：-3" class="headerlink" title="上节回顾："></a><strong>上节回顾：</strong></h4><hr>
<p>1、<code>switch</code></p>
<ul>
<li><code>switch case break default</code> 条件   判断 退出  默认<ul>
<li>a.只要匹配上一个<code>case</code>，那么它下面的所有的<code>case</code>都会执行包括<code>default</code></li>
<li>b.<code>break</code>的意思跳出当前结构</li>
</ul>
</li>
</ul>
<p>2、<code>for</code></p>
<ul>
<li>循环有三个要素<ul>
<li>a.循环变量</li>
<li>b.判断条件（循环体）</li>
<li>c.改变循环变量</li>
<li>d.<code>continue</code>的意思结束本次循环进入下次循环</li>
</ul>
</li>
</ul>
<hr>
<h4 id="知识点：-5"><a href="#知识点：-5" class="headerlink" title="知识点："></a><strong>知识点：</strong></h4><hr>
<h4 id="1、while-do-while-没有谁好谁坏-只有适应场景不同"><a href="#1、while-do-while-没有谁好谁坏-只有适应场景不同" class="headerlink" title="1、while/do...while 没有谁好谁坏 只有适应场景不同"></a>1、<code>while/do...while</code> 没有谁好谁坏 只有适应场景不同</h4><hr>
<ul>
<li>比如：先吃饭 在买单 <code>do..while</code> 用户体验高 有风险  扫雷游戏也是先体验 在问是否退出 提高体验</li>
<li>比如：先买单 在吃饭 <code>while</code> 用户体验不高</li>
<li>一般情况下面，如果条件判断是<code>数字的</code>比较<code>==&lt;&gt;</code>，<code>for</code>循环优先.</li>
<li>如果是<code>非数值相关的</code>比较循环，<code>while</code>优先</li>
</ul>
<h4 id="2、代码内存解析"><a href="#2、代码内存解析" class="headerlink" title="2、代码内存解析"></a>2、代码内存解析</h4><hr>
<h5 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a><strong>闭包</strong></h5><hr>
<ul>
<li>a.程序永远是先定义后执行</li>
<li>b.执行永远从上到下</li>
<li>c.函数定义的话在堆（只是一个地址而已）</li>
<li>d.函数调用的时候，就会有自己的堆和栈（<code>闭包</code>）</li>
</ul>
<h5 id="闭包-作用域"><a href="#闭包-作用域" class="headerlink" title="闭包 作用域"></a><strong>闭包 作用域</strong></h5><hr>
<ul>
<li>记住：先定义<code>var</code>  <code>function</code>  在从上往下执行</li>
<li>定义定义在自己的栈里面 执行在自己的堆里面</li>
<li>运行在运行的环境中</li>
<li>函数每调用前  只是一个地址</li>
<li>只要调用一次函数就会动态开辟一块内存 创建一个封闭的空间 在自己的封闭的空间的栈中定义<code>var</code>在执行</li>
<li>函数执行完 里面的东西全部销毁</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//alert(x);//9:执行弹出x,结果x没定义,错误.</span></div><div class="line">alert(i);<span class="comment">//9:执行弹出i,然而i之前已经定义,只不过没地址,因此是undefiend</span></div><div class="line"><span class="keyword">var</span> i = <span class="number">10</span>;<span class="comment">//1:var i;    10:把常量池中10的地址赋给栈中的i</span></div><div class="line"><span class="keyword">var</span> j = <span class="string">"你好"</span>;<span class="comment">//2:var j;   11:把常量池中 你好 的地址复给栈中的j</span></div><div class="line"><span class="keyword">var</span> k = z = <span class="literal">null</span>;<span class="comment">//3:var k,z;  12:把堆中null的地址赋值给z和k</span></div><div class="line"><span class="keyword">var</span> m = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//4:var m;   5:function匿名函数  13:把匿名函数在堆中的地址赋给栈中的m</span></div><div class="line">    alert(<span class="number">2</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> b = <span class="built_in">document</span>.body;<span class="comment">//6:var b;    14:把堆中document.body对象的地址赋给栈中的b</span></div><div class="line"><span class="keyword">var</span> f = <span class="literal">true</span>;<span class="comment">//7:var f; 15:把常量池中true的地址赋给栈中的变量f</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">m</span>(<span class="params"></span>)</span>&#123;<span class="comment">//8:function m;</span></div><div class="line">    alert(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">m</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    c = <span class="number">50</span>;<span class="comment">//在局部变量中找不到定义的c 沿着作用域链找到了全局变量的c</span></div><div class="line">    alert(<span class="string">'哈哈哈'</span>);</div><div class="line">    <span class="comment">//var c;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> c = <span class="number">150</span>; <span class="comment">// 函数m()还未执行到 还没被销毁 此时全局c的值c=50</span></div><div class="line">m();</div><div class="line"><span class="keyword">var</span> c = <span class="number">20</span>;<span class="comment">//到这里一步 m()已经执行完了 函数已经销毁了  这里的c还是20</span></div><div class="line">alert(c);<span class="comment">//20</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">m</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    c = <span class="number">50</span>;<span class="comment">//在局部变量中找不到定义的c 沿着作用域链找到了全局变量的c</span></div><div class="line">    alert(<span class="string">'哈哈哈'</span>);</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        c = <span class="number">30</span>;</div><div class="line">        alert(<span class="string">'嘻嘻'</span>);</div><div class="line">    &#125;</div><div class="line">    inner();<span class="comment">//c在函数内部找不到定义 所以沿着作用域链找到了全局的c</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> c = <span class="number">20</span>;<span class="comment">//到这里一步 m()还没执行 函数没被销毁  这里的c是30</span></div><div class="line">m();</div><div class="line"></div><div class="line">alert(c);<span class="comment">//30</span></div></pre></td></tr></table></figure>
<h4 id="4、object对象"><a href="#4、object对象" class="headerlink" title="4、object对象"></a>4、object对象</h4><hr>
<h4 id="5、面向对象的程序设计"><a href="#5、面向对象的程序设计" class="headerlink" title="5、面向对象的程序设计"></a>5、面向对象的程序设计</h4><hr>
<ul>
<li>a.<code>function</code>构造器</li>
<li>b.<code>prototype</code>原型</li>
<li>c.<code>foreach</code></li>
<li>c.作用域</li>
<li>d.继承</li>
</ul>
<h4 id="一些内存图示"><a href="#一些内存图示" class="headerlink" title="一些内存图示"></a>一些内存图示</h4><hr>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-d7b1dc1194558ac0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="闭包示例1"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-32121bca4ab77dba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="闭包示例2"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-f8c6735fdc8d7ee0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="闭包1"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-54d5b8e92e0266af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="闭包2"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-0d7c71a08e5c3dd5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="闭包3"></p>
<hr>
<h4 id="原型链的几张图解"><a href="#原型链的几张图解" class="headerlink" title="原型链的几张图解"></a>原型链的几张图解</h4><hr>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-f6fab5bf39d4927a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="原型链图解"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-960b48ae2a258f3a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="js原型链演示00-new Object"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-46a363299f4cb52d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="js原型链演示01-函数Foo声明"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-5c2c02e45b6a34bd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="js原型链演示-对象继承模式-01-浅拷贝"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-21688edeab3bb10d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="js原型链演示02-new Foo()"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-fc562b41d866cae5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="js原型链演示02-1-new 原理"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-f53b3e2d9833f545.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="js原型链演示03-Foo.prototype"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-ccbf4ddf8ea86e17.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="js原型链演示-对象继承模式-03-基于对象的原型继承"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-724c8ddd463e8497.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="js原型链演示05-继承函数示例"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-b006171464fb7c9a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="js原型链演示06-继承prototype模式"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-57f3858765368446.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="js原型链演示07-继承prototype模式改进"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-fc1f9e36ede219f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="js原型链演示08-继承prototype直接继承"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-55110b7283224dde.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="js原型链演示08-继承prototype空对象中介"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-a45122592360a214.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="js原型链演示09-继承prototype空对象中介封装expend"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-b832f7372de9dc35.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="js原型链演示10-构造器拷贝继承"></p>
<ul>
<li>扩展阅读<ul>
<li><a href="https://zhuanlan.zhihu.com/p/22189387" target="_blank" rel="external">Javascript的原型链图详解</a></li>
</ul>
</li>
</ul>
<h3 id="第七课时"><a href="#第七课时" class="headerlink" title="第七课时"></a>第七课时</h3><hr>
<h4 id="上节回顾：-4"><a href="#上节回顾：-4" class="headerlink" title="上节回顾："></a><strong>上节回顾：</strong></h4><hr>
<ul>
<li>1.<code>switch</code></li>
<li><p>2.<code>while/do...while</code></p>
<ul>
<li>一般情况下面，如果条件判断是数字的比较<code>==&lt;&gt;</code>，<code>for</code>循环优先.</li>
<li>如果是非数值相关的比较循环，<code>while</code>优先</li>
</ul>
</li>
<li><p>3.<code>function</code>函数</p>
</li>
<li>4.代码内存解析<ul>
<li><strong>闭包</strong><ul>
<li>a.程序永远是先定义后执行</li>
<li>b.执行永远从上之下</li>
<li>c.函数定义的话在堆（只是一个地址而已）</li>
<li>d.函数调用的时候，就会有自己的堆和栈（闭包）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="知识点：-6"><a href="#知识点：-6" class="headerlink" title="知识点："></a><strong>知识点：</strong></h4><hr>
<h4 id="1、object对象"><a href="#1、object对象" class="headerlink" title="1、object对象"></a><strong>1、object对象</strong></h4><hr>
<ul>
<li><code>new</code>关键字代表的是新开辟一块内存空间</li>
<li><p>没有被引用的内存空间，会在适当的时候被销毁</p>
<ul>
<li><p>两句代码含义等同</p>
<ul>
<li><code>var person = new Object()</code>;</li>
<li><code>var person = {};</code></li>
</ul>
</li>
</ul>
</li>
<li><p>访问对象的属性除了用 对象引用<code>.属性</code> <code>key</code>以外，还可以使用对象引用<code>[属性key]</code></p>
</li>
</ul>
<h5 id="new-原理详细解析"><a href="#new-原理详细解析" class="headerlink" title="new 原理详细解析"></a>new 原理详细解析</h5><hr>
<ul>
<li>无论什么时候，只要创建一个新函数，就会根据一组特定的规则为该函数创建一个<code>prototype</code>属性，这个属性指向函数的原型对象。</li>
<li>在默认情况下，所有原型对象都会自动获得一个<code>constructor</code>（构造函数）属性，这个属性包含一个指向<code>prototype</code>属性所在函数的指针（就是指向新创建的函数）。</li>
<li>通过这个构造函数（原型对象的构造函数），可以继续为原型对象添加其他属性和方法。</li>
<li>当调用构造函数创建一个新实例后，该实例的内部将包含一个指针（内部属性），指向构造函数的原型对象。<code>ECMA-262</code>第5版管这个指针叫 <code>[[Prototype]]</code>。脚本中没有标准的方式访问<code>[[Prototype]]</code>，但<code>Firefox</code>、<code>Safari</code>和<code>Chrome</code>在每个对象上都支持一个属性<code>__proto__</code>；而在其他实现中，这个属性对脚本是完全不可见的。不过，要明确的真正重要的一点就是，这个连接存在于实例和构造函数的原型对象之间，而不是存在于实例和构造函数之间</li>
</ul>
<h5 id="new创建对象的步骤"><a href="#new创建对象的步骤" class="headerlink" title="new创建对象的步骤"></a>new创建对象的步骤</h5><hr>
<ul>
<li>创建一个新的对象</li>
<li>将构造函数的作用域赋给新对象</li>
<li>执行构造函数的代码，为这个新对象添加属性</li>
<li>返回新对象</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">    <span class="keyword">this</span>.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">P</span>) </span>&#123;</div><div class="line">    <span class="comment">// 创建一个新对象</span></div><div class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">    <span class="comment">// 获取传递给Person函数的参数</span></div><div class="line">    <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</div><div class="line">    <span class="comment">// 新对象的__proto__属性指向Person的原型对象</span></div><div class="line">    o.__proto__ = P.prototype;</div><div class="line">    <span class="comment">// Person的原型对象的constructor指向Person</span></div><div class="line">    P.prototype.constructor = P;</div><div class="line">    <span class="comment">// 把Person构造函数的作用域赋给新对象</span></div><div class="line">    <span class="comment">// 给这个新对象添加属性（name,age,say）</span></div><div class="line">    P.apply(o, args);</div><div class="line">    <span class="comment">// 返回这个新对象</span></div><div class="line">    <span class="keyword">return</span> o;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> p = createPerson(Person, <span class="string">'wang'</span>, <span class="number">35</span>);</div></pre></td></tr></table></figure>
<h4 id="2、面向对象的程序设计"><a href="#2、面向对象的程序设计" class="headerlink" title="2、面向对象的程序设计"></a><strong>2、面向对象的程序设计</strong></h4><hr>
<ul>
<li><p><strong><code>function</code>构造器</strong></p>
<ul>
<li><strong>共同点:</strong><ul>
<li>动态创建一块内存空间，闭包</li>
</ul>
</li>
<li><strong>不同点:</strong><ul>
<li>函数调用是没有办法拿到空间的地址的，而且这块地址是一块临时地址，执行完函数之后，就会销毁</li>
<li><code>new</code>开辟内存空间，把这块空间的地址返回，这块空间就有可能长期的被引用</li>
</ul>
</li>
</ul>
</li>
<li><strong><code>prototype</code>原型</strong><ul>
<li>通过原型使通过同样一个构造器所<code>new（创建）</code>出来的对象具有相同的属性和行为</li>
<li><code>prototype</code>本质就是一个对象</li>
</ul>
</li>
<li><code>foreach</code></li>
<li><code>this</code> 指代当前创建的这块内存 <code>this.name=name</code> 指代当前内存中的这个<code>name</code>属性 接收外界传过来的值</li>
<li><code>继承</code></li>
</ul>
<h5 id="多种构造函数"><a href="#多种构造函数" class="headerlink" title="多种构造函数"></a>多种构造函数</h5><hr>
<h6 id="传统的创建对象"><a href="#传统的创建对象" class="headerlink" title="传统的创建对象"></a><strong>传统的创建对象</strong></h6><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line"></div><div class="line">person.name = “lancer”;</div><div class="line"></div><div class="line">person.age = <span class="number">24</span>;</div><div class="line"></div><div class="line">person.job = “UI”;</div><div class="line"></div><div class="line">person.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">alert(<span class="keyword">this</span>.name);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">person.sayName();</div></pre></td></tr></table></figure>
<h6 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a><strong>工厂模式</strong></h6><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name,age,job</span>)</span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line"></div><div class="line">o.name = name;</div><div class="line"></div><div class="line">o.age = age;</div><div class="line"></div><div class="line">o.job = job;</div><div class="line"></div><div class="line">o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">alert(o.name);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> o;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = createPerson(“lancer”,<span class="number">24</span>,”UI”);</div><div class="line"></div><div class="line">person1.sayName();</div></pre></td></tr></table></figure>
<h6 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a><strong>构造函数</strong></h6><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,job</span>)</span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">this</span>.name = name;</div><div class="line"></div><div class="line"><span class="keyword">this</span>.age = age;</div><div class="line"></div><div class="line"><span class="keyword">this</span>.job =job;</div><div class="line"></div><div class="line"><span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">alert(<span class="keyword">this</span>.name)</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = createPerson(“lancer”,<span class="number">24</span>,”UI”);</div><div class="line"></div><div class="line">person1.sayName();</div></pre></td></tr></table></figure>
<h6 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a><strong>原型模式</strong></h6><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype.name =”lancer”;</div><div class="line"></div><div class="line">Person.prototype.age =<span class="number">24</span>;</div><div class="line"></div><div class="line">Person.prototype.job = “UI”;</div><div class="line"></div><div class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">alert(<span class="keyword">this</span>.name)</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</div><div class="line"></div><div class="line">person1.sayName();</div><div class="line"></div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</div><div class="line"></div><div class="line">person2.name =”lara”</div><div class="line"></div><div class="line">person2.sayName();</div></pre></td></tr></table></figure>
<h6 id="简单原型模式"><a href="#简单原型模式" class="headerlink" title="简单原型模式"></a><strong>简单原型模式</strong></h6><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype = &#123;</div><div class="line"></div><div class="line"><span class="attr">name</span> : “lancer”,</div><div class="line"></div><div class="line"><span class="attr">age</span> : <span class="number">24</span>,</div><div class="line"></div><div class="line"><span class="attr">job</span> : “UI”,</div><div class="line"></div><div class="line"><span class="attr">sayName</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">alert(<span class="keyword">this</span>.name)</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</div><div class="line"></div><div class="line">person1.sayName();</div></pre></td></tr></table></figure>
<h6 id="构造函数和原型模式"><a href="#构造函数和原型模式" class="headerlink" title="构造函数和原型模式"></a><strong>构造函数和原型模式</strong></h6><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,job</span>)</span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">this</span>.name = name;</div><div class="line"></div><div class="line"><span class="keyword">this</span>.age = age;</div><div class="line"></div><div class="line"><span class="keyword">this</span>.job =job;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype = &#123;</div><div class="line"></div><div class="line"><span class="attr">constructor</span> :Person,</div><div class="line"></div><div class="line"><span class="attr">sayName</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">alert(<span class="keyword">this</span>.name)</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(“lancer”,”<span class="number">24</span>″,”UI”);</div><div class="line"></div><div class="line">person1.sayName();</div></pre></td></tr></table></figure>
<h6 id="动态原型模式"><a href="#动态原型模式" class="headerlink" title="动态原型模式"></a><strong>动态原型模式</strong></h6><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,job</span>)</span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">this</span>.name = name;</div><div class="line"></div><div class="line"><span class="keyword">this</span>.age = age;</div><div class="line"></div><div class="line"><span class="keyword">this</span>.job =job;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="keyword">this</span>.sayName !=”<span class="function"><span class="keyword">function</span>”)</span>&#123;</div><div class="line"></div><div class="line">Person.prototype = &#123;</div><div class="line"></div><div class="line"><span class="attr">constructor</span> :Person,</div><div class="line"></div><div class="line"><span class="attr">sayName</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">alert(<span class="keyword">this</span>.name)</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(“lancer”,”<span class="number">24</span>″,”UI”);</div><div class="line"></div><div class="line">person1.sayName();</div></pre></td></tr></table></figure>
<h6 id="稳妥构造函数"><a href="#稳妥构造函数" class="headerlink" title="稳妥构造函数"></a><strong>稳妥构造函数</strong></h6><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">name,age,job</span>)</span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">var</span> O = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line"></div><div class="line">O.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">alert(name);</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">return</span> O</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = Person(“lancer”,<span class="number">24</span>,”UI”);</div><div class="line"></div><div class="line">person1.sayName();</div></pre></td></tr></table></figure>
<h4 id="其他："><a href="#其他：" class="headerlink" title="其他："></a><strong>其他：</strong></h4><hr>
<ul>
<li>函数调用后一定有返回值，没有返回值就是<code>undefined</code></li>
</ul>
<h4 id="一些内存图示-1"><a href="#一些内存图示-1" class="headerlink" title="一些内存图示"></a>一些内存图示</h4><hr>
<p><img src="https://github.com/poetries/TZ-Front-End-Note/raw/master/JS-Basic-star/images/DOM7.png" alt=""></p>
<h3 id="第八课时"><a href="#第八课时" class="headerlink" title="第八课时"></a>第八课时</h3><hr>
<h4 id="上节回顾：-5"><a href="#上节回顾：-5" class="headerlink" title="上节回顾："></a><strong>上节回顾：</strong></h4><hr>
<h4 id="1-object对象"><a href="#1-object对象" class="headerlink" title="1.object对象"></a><strong>1.object对象</strong></h4><hr>
<ul>
<li><code>new</code>关键字代表的是新开辟一块内存空间</li>
<li>没有被引用的内存空间，会在适当的时候被销毁<ul>
<li>两句代码含义等同</li>
<li><code>var person = new Object();</code></li>
<li><code>var person = {};</code></li>
<li>访问对象的属性除了用 对象引用属性<code>key</code>以外，还可以使用对象引用<code>[属性key]</code></li>
</ul>
</li>
</ul>
<h4 id="2-面向对象的程序设计"><a href="#2-面向对象的程序设计" class="headerlink" title="2.面向对象的程序设计"></a><strong>2.面向对象的程序设计</strong></h4><hr>
<ul>
<li>a.<code>function</code>构造器<ul>
<li>共同点:<ul>
<li>动态创建一块内存空间，闭包</li>
</ul>
</li>
<li>不同点：<ul>
<li>函数调用是没有办法拿到空间的地址的，而且这块地址是一块临时地址，执行完函数之后，就会销毁</li>
<li><code>new</code>开辟内存空间，把这块空间的地址返回，这块空间就有可能长期的被引用</li>
</ul>
</li>
</ul>
</li>
<li>b.<code>prototype</code>原型<ul>
<li>通过原型使通过同样一个构造器所<code>new</code>（创建）出来的对象具有相同的属性和行为</li>
<li><code>prototype</code>本质就是一个对象</li>
</ul>
</li>
<li>c.<code>foreach</code></li>
<li>c.<code>this</code></li>
<li>d.继承</li>
</ul>
<h4 id="知识点：-7"><a href="#知识点：-7" class="headerlink" title="知识点："></a><strong>知识点：</strong></h4><hr>
<h4 id="1-prototype内存解析"><a href="#1-prototype内存解析" class="headerlink" title="1.prototype内存解析"></a><strong>1.prototype内存解析</strong></h4><hr>
<ul>
<li><code>prototype</code>是原型，是一块所有对应构造器创建的对象都共享的内存空间</li>
<li>在面向对象设计程序的时候，属性应该是对应的空间的，而功能应该是<code>prototype</code>公共空间的</li>
</ul>
<h4 id="2-通过prototype扩展功能"><a href="#2-通过prototype扩展功能" class="headerlink" title="2.通过prototype扩展功能"></a><strong>2.通过prototype扩展功能</strong></h4><hr>
<ul>
<li>所有的构造器都是继承于<code>Object</code>构造器的，因此只要<code>Object</code>的原型里有的功能，所有的对象都有</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//多个对象的构造 以及 多个对象之间如何建立联系</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name,age,sex</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">    <span class="keyword">this</span>.sex = sex;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Bingqilin</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Game</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hour</span>(<span class="params">time</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.time = time;</div><div class="line">&#125;</div><div class="line">Student.prototype = &#123;</div><div class="line"></div><div class="line">    <span class="attr">eat</span>:<span class="function"><span class="keyword">function</span>(<span class="params">b</span>)</span>&#123;</div><div class="line">        alert(<span class="keyword">this</span>.name+<span class="string">"喜欢吃"</span>+b.name);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">mess</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="keyword">this</span>.name+<span class="string">"的信息："</span>+<span class="keyword">this</span>.age+<span class="string">','</span>+<span class="keyword">this</span>.sex);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">sleep</span>:<span class="function"><span class="keyword">function</span>(<span class="params">h</span>)</span>&#123;</div><div class="line">        alert(<span class="keyword">this</span>.name+<span class="string">"每天睡,"</span>+h.time+<span class="string">'小时'</span>);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">work</span>:<span class="function"><span class="keyword">function</span>(<span class="params">h</span>)</span>&#123;</div><div class="line">        alert(<span class="keyword">this</span>.name+<span class="string">"每天工作,"</span>+h.time+<span class="string">'小时'</span>);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">like</span>:<span class="function"><span class="keyword">function</span>(<span class="params">g</span>)</span>&#123;</div><div class="line">        alert(<span class="keyword">this</span>.name+<span class="string">"喜欢打,"</span>+g.name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> Student(<span class="string">"小明"</span>,<span class="number">22</span>,<span class="string">"男"</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> Bingqilin(<span class="string">"黑色的冰淇淋"</span>);</div><div class="line">s.eat(b);<span class="comment">//小明喜欢吃黑色的冰淇淋</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> g = <span class="keyword">new</span> Game(<span class="string">"英雄联盟"</span>);</div><div class="line">s.like(g);<span class="comment">//把对象的地址发送给like的参数即可访问构造函数Game的name属性</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> h = <span class="keyword">new</span> Hour(<span class="number">10</span>);</div><div class="line">s.sleep(h);</div><div class="line">s.work(h);</div></pre></td></tr></table></figure>
<h4 id="一些内存图示-2"><a href="#一些内存图示-2" class="headerlink" title="一些内存图示"></a><strong>一些内存图示</strong></h4><hr>
<p><img src="https://github.com/poetries/TZ-Front-End-Note/raw/master/JS-Basic-star/images/DOM8.png" alt=""></p>
<p><img src="https://github.com/poetries/TZ-Front-End-Note/raw/master/JS-Basic-star/images/DOM9.png" alt=""></p>
<h3 id="第九课时"><a href="#第九课时" class="headerlink" title="第九课时"></a>第九课时</h3><hr>
<h4 id="回顾："><a href="#回顾：" class="headerlink" title="回顾："></a><strong>回顾：</strong></h4><hr>
<h5 id="1、prototype内存解析"><a href="#1、prototype内存解析" class="headerlink" title="1、prototype内存解析"></a><strong>1、prototype内存解析</strong></h5><hr>
<ul>
<li><code>prototype</code>是原型，是一块所有对应构造器创建的对象都共享的内存空间</li>
<li>在面向对象设计程序的时候，属性应该是对应的空间的，而功能应该是<code>prototype</code>公共空间的</li>
</ul>
<h5 id="2、通过prototype扩展功能"><a href="#2、通过prototype扩展功能" class="headerlink" title="2、通过prototype扩展功能"></a><strong>2、通过prototype扩展功能</strong></h5><hr>
<ul>
<li>所有的构造器都是继承于<code>Object</code>构造器的，因此只要<code>Object</code>的原型里有的功能，所有的对象都有</li>
<li>构造器在定义的时候 就默认创建了一个空的原型</li>
</ul>
<h5 id="3、封装"><a href="#3、封装" class="headerlink" title="3、封装"></a><strong>3、封装</strong></h5><hr>
<ul>
<li>1：找对象  小头爸爸  大头儿子  饭</li>
<li>2：抽象（类，构造器）</li>
<li><p>3：创建对象并且建立关系（操作对象）</p>
</li>
<li><p>面向对象例子</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//小头爸爸牵着大头儿子的手去吃饭，吃完饭之后，</span></div><div class="line"></div><div class="line"><span class="comment">//小头爸爸背着大头儿子回家，回家后儿子学习，老爸工作，工作学习完后</span></div><div class="line"></div><div class="line"><span class="comment">//儿子看动画片</span></div><div class="line"></div><div class="line"><span class="comment">//围裙妈妈带儿子睡觉</span></div><div class="line"></div><div class="line"><span class="comment">//张三和张四</span></div><div class="line"></div><div class="line"><span class="comment">//分析对象 小头爸爸 大头儿子 饭 以及功能</span></div><div class="line"></div><div class="line"><span class="comment">//设计构造器（类）</span></div><div class="line"></div><div class="line"><span class="comment">//创建对象以及他们之间的关联</span></div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line"></div><div class="line"> <span class="keyword">this</span>.name = name;</div><div class="line"></div><div class="line"> <span class="keyword">this</span>.age = age;</div><div class="line"></div><div class="line"> &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Rice</span>(<span class="params">name</span>)</span>&#123;</div><div class="line"></div><div class="line"> <span class="keyword">this</span>.name = name;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Person.prototype.getHand = function()&#123;//这样子写也可以 但还是用默认生成的那块空的内存对象 往里面添加属性 方法</span></div><div class="line"></div><div class="line"> <span class="comment">//不浪费内存</span></div><div class="line"></div><div class="line"><span class="comment">//&#125;</span></div><div class="line"></div><div class="line"><span class="comment">//在prototype中定义的每个对象都有这些功能</span></div><div class="line"></div><div class="line">Person.prototype = &#123;<span class="comment">//这样子写 抛弃了默认生成的那块空的内存对象 重新创建了一块新的内存对象 记住：原型的本质是对象</span></div><div class="line"></div><div class="line"> <span class="comment">//多个功能写在一起</span></div><div class="line"></div><div class="line"> getHand:<span class="function"><span class="keyword">function</span>(<span class="params">person</span>)</span>&#123;<span class="comment">//牵手</span></div><div class="line"></div><div class="line"> alert(<span class="keyword">this</span>.name+<span class="string">"在牵着"</span>+person.name+<span class="string">"的手...."</span>);</div><div class="line"></div><div class="line"> &#125;,</div><div class="line"></div><div class="line"> <span class="attr">eat</span>:<span class="function"><span class="keyword">function</span>(<span class="params">rice</span>)</span>&#123;</div><div class="line"></div><div class="line"> alert(<span class="keyword">this</span>.name+<span class="string">"在吃"</span>+rice.name);</div><div class="line"></div><div class="line"> &#125;,</div><div class="line"></div><div class="line"> <span class="comment">//需求 18岁以上才能背人</span></div><div class="line"></div><div class="line"> <span class="comment">/* //写法一 不推荐 这个满足18岁的功能是自己强加的 不是客户需求的</span></div><div class="line"></div><div class="line"> carry:function(person)&#123;//这里设计不合理 让老爸有这个功能 儿子没有这个功能</div><div class="line"></div><div class="line"> if(this.age&gt;=18)&#123;</div><div class="line"></div><div class="line"> alert(this.name+'背着'+person.name);</div><div class="line"></div><div class="line"> &#125;else&#123;</div><div class="line"></div><div class="line"> alert(this.name+",还未满18岁，背不起");</div><div class="line"></div><div class="line"> &#125;</div><div class="line"></div><div class="line"> &#125;,*/</div><div class="line"></div><div class="line"> backhome:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line"> alert(<span class="keyword">this</span>.name+<span class="string">"回家"</span>);</div><div class="line"></div><div class="line"> &#125;,</div><div class="line"></div><div class="line"> <span class="attr">study</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line"> alert(<span class="keyword">this</span>.name+<span class="string">"正在学习"</span>);</div><div class="line"></div><div class="line"> &#125;,</div><div class="line"></div><div class="line"> <span class="attr">watchTV</span>:<span class="function"><span class="keyword">function</span>(<span class="params">jm</span>)</span>&#123;</div><div class="line"></div><div class="line"> alert(<span class="keyword">this</span>.name+<span class="string">"正在看"</span>+jm+<span class="string">'...'</span>);</div><div class="line"></div><div class="line"> &#125;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">"老爸"</span>,<span class="number">20</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">"儿子"</span>,<span class="number">15</span>);</div><div class="line"></div><div class="line"><span class="comment">//p1.getHand(p2);</span></div><div class="line"></div><div class="line"><span class="comment">//p1.eat(new Rice("蛋炒饭"));</span></div><div class="line"></div><div class="line"><span class="comment">//p2.eat(new Rice("猪脚饭"));</span></div><div class="line"></div><div class="line"><span class="comment">//p1.carry(p2);//老爸背儿子</span></div><div class="line"></div><div class="line"><span class="comment">//p2.carry(p1);//让儿子背老爸 输出结果：儿子,还未满18岁，背不起</span></div><div class="line"></div><div class="line"><span class="comment">//p1.backhome();</span></div><div class="line"></div><div class="line"><span class="comment">//写法二 不推荐 100对关系 代码写很多遍</span></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"></div><div class="line">//让老爸单独有背的这个功能 儿子没有这个功能</div><div class="line"></div><div class="line">p1.carry = function(person)&#123;</div><div class="line"></div><div class="line"> alert(this.name+'背着'+person.name);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">p1.carry(p2);</div><div class="line"></div><div class="line">*/</div><div class="line"></div><div class="line"><span class="comment">//-------通过继承解决这个 让老爸单独有背的这个功能 儿子没有这个功能 可以应对多功能 多需求</span></div><div class="line"></div><div class="line"><span class="comment">//功能函数</span></div><div class="line"></div><div class="line"><span class="built_in">Object</span>.prototype.extends = <span class="function"><span class="keyword">function</span>(<span class="params">func,actions</span>)</span>&#123;<span class="comment">//让所有的子孙 构造器都有这个功能</span></div><div class="line"></div><div class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> func.prototype)&#123;<span class="comment">//传进一个func构造器 迭代构造器中的功能 把构造器中的功能全都映射过来 复制一份</span></div><div class="line"></div><div class="line"> <span class="keyword">this</span>.prototype[prop] = func.prototype[prop];<span class="comment">//迭代原型中的所有的功能到 当前里面去</span></div><div class="line"></div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> actions)&#123;</div><div class="line"></div><div class="line"> <span class="keyword">this</span>.prototype[prop] = actions[prop];</div><div class="line"></div><div class="line"> &#125;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params">name</span>)</span>&#123;</div><div class="line"></div><div class="line"> <span class="keyword">this</span>.name = name;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">Father.extends(Person,&#123;</div><div class="line"></div><div class="line"> <span class="attr">carry</span>:<span class="function"><span class="keyword">function</span>(<span class="params">person</span>)</span>&#123;</div><div class="line"></div><div class="line"> alert(<span class="keyword">this</span>.name+<span class="string">'背着'</span>+person.name);</div><div class="line"></div><div class="line"> &#125;,</div><div class="line"></div><div class="line"> <span class="attr">work</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line"> alert(<span class="keyword">this</span>.name+<span class="string">"正在工作"</span>);</div><div class="line"></div><div class="line"> &#125;</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//扩展</span></div><div class="line"></div><div class="line"><span class="comment">//设计程序有个原则：不修改只增加</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Children</span>(<span class="params">name</span>)</span>&#123;</div><div class="line"></div><div class="line"> <span class="keyword">this</span>.name = name;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">Children.extends(Person);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Mother</span>(<span class="params">name</span>)</span>&#123;</div><div class="line"></div><div class="line"> <span class="keyword">this</span>.name = name;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">Mother.extends(Person,&#123;</div><div class="line"></div><div class="line"> <span class="attr">scoop</span>:<span class="function"><span class="keyword">function</span>(<span class="params">person</span>)</span>&#123;</div><div class="line"></div><div class="line"> <span class="comment">//判断必须是children的对象才能执行这个功能</span></div><div class="line"></div><div class="line"> <span class="comment">//if()&#123;</span></div><div class="line"></div><div class="line"> alert(<span class="keyword">this</span>.name+<span class="string">"唱着摇篮曲哄"</span>+person.name+<span class="string">"睡觉"</span>);</div><div class="line"></div><div class="line"> <span class="comment">//&#125;</span></div><div class="line"></div><div class="line"> &#125;</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"></div><div class="line">Father.prototype.carry= function(person)&#123;//创建这个原型的想法是：原来Person有的功能 我都需要有 并在这些基础上加一个功能 carry</div><div class="line"></div><div class="line"> //如何建立Father基础Person的功能？写一个继承的小工具来操作</div><div class="line"></div><div class="line"> alert(this.name+'背着'+person.name);</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line">Father.prototype.work = function()&#123;</div><div class="line"></div><div class="line"> alert(this.name+"正在工作");</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">*/</div><div class="line"></div><div class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Father(<span class="string">"老爸"</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Children(<span class="string">"儿子"</span>);</div><div class="line"></div><div class="line">p1.carry(p2);<span class="comment">//只有老爸有carry这个功能</span></div><div class="line"></div><div class="line"><span class="comment">//p2.carry(p1);//error 儿子没有carry这个功能</span></div><div class="line"></div><div class="line">p2.study();<span class="comment">//儿子在学习</span></div><div class="line"></div><div class="line">p1.work();<span class="comment">//老爸在工作</span></div><div class="line"></div><div class="line">p1.watchTV(<span class="string">'看足球'</span>);</div><div class="line"></div><div class="line">p2.watchTV(<span class="string">'蜡笔小新'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> p3 = <span class="keyword">new</span> Mother(<span class="string">'围裙妈妈'</span>);</div><div class="line"></div><div class="line">p3.scoop(p2);</div></pre></td></tr></table></figure>
<h4 id="知识点：-8"><a href="#知识点：-8" class="headerlink" title="知识点："></a><strong>知识点：</strong></h4><hr>
<ul>
<li>1.继承</li>
<li>2.面向对象程序设计案例（猜拳）</li>
</ul>
<h4 id="一些内存图示-3"><a href="#一些内存图示-3" class="headerlink" title="一些内存图示"></a><strong>一些内存图示</strong></h4><hr>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-9d8603509767ea7a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-44bd5c0bf459b4d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-17266c52ca52c896.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-1bf8c506d61084c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h3 id="第十课时"><a href="#第十课时" class="headerlink" title="第十课时"></a>第十课时</h3><hr>
<h4 id="上节回顾：-6"><a href="#上节回顾：-6" class="headerlink" title="上节回顾："></a><strong>上节回顾：</strong></h4><hr>
<h4 id="1-继承"><a href="#1-继承" class="headerlink" title="1.继承"></a><strong>1.继承</strong></h4><hr>
<ul>
<li>本质就是从一个<code>prototype</code>对象中把它的功能都<code>copy</code>到另一个<code>prototype</code>对象</li>
<li>继承为什么要循环</li>
</ul>
<h4 id="2-call-apply方法的使用"><a href="#2-call-apply方法的使用" class="headerlink" title="2.call apply方法的使用"></a><strong>2.call apply方法的使用</strong></h4><hr>
<ul>
<li><code>func.call（obj）</code>：调用<code>func</code>的时候，以<code>obj</code>这个对象的作用域去调用</li>
<li>改变函数在调用的时候里面闭包的作用域</li>
<li><code>call(obj,arg1,arg2,arg3)</code>;<code>call</code>第一个参数传对象，可以是<code>null</code>。参数以逗号分开进行传值，参数可以是任何类型。<br><code>apply(obj,[arg1,arg2,arg3])</code>;<code>apply</code>第一个参数传对象，参数可以是数组或者<code>arguments</code>对象</li>
</ul>
<h4 id="知识点：-9"><a href="#知识点：-9" class="headerlink" title="知识点："></a><strong>知识点：</strong></h4><hr>
<h4 id="API-application-program-interface"><a href="#API-application-program-interface" class="headerlink" title="API application program interface"></a>API application program interface</h4><hr>
<ul>
<li>第一：遇到问题</li>
<li>第二：查资料或者学习  -&gt; 解决问题</li>
<li>第三：记住有这个功能</li>
<li>第四：查资料（百度）</li>
</ul>
<h4 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h4><hr>
<ul>
<li>1.<code>String</code></li>
<li>2.<code>Array</code></li>
<li>3.<code>Math Math.random();</code></li>
<li>4.<code>Date</code></li>
</ul>
<h5 id="日期型函数Date"><a href="#日期型函数Date" class="headerlink" title="日期型函数Date"></a>日期型函数<code>Date</code></h5><hr>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-4c5426128f64acff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Date 对象方法"></p>
<ul>
<li><strong>声明</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">//系统当前时间</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>(yyyy, mm, dd, hh, mm, ss);</div><div class="line"></div><div class="line"><span class="keyword">var</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>(yyyy, mm, dd);</div><div class="line"></div><div class="line"><span class="keyword">var</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>(“monthName dd, yyyy hh:mm:ss”);</div><div class="line"></div><div class="line"><span class="keyword">var</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>(“monthName dd, yyyy”);</div><div class="line"></div><div class="line"><span class="keyword">var</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>(epochMilliseconds);</div></pre></td></tr></table></figure>
<ul>
<li><strong>获取时间的某部份</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line"></div><div class="line">myDate.getYear(); <span class="comment">//获取当前年份(2位)</span></div><div class="line"></div><div class="line">myDate.getFullYear(); <span class="comment">//获取完整的年份(4位,1970-????)</span></div><div class="line"></div><div class="line">myDate.getMonth(); <span class="comment">//获取当前月份(0-11,0代表1月)</span></div><div class="line"></div><div class="line">myDate.getDate(); <span class="comment">//获取当前日(1-31)</span></div><div class="line"></div><div class="line">myDate.getDay(); <span class="comment">//获取当前星期X(0-6,0代表星期天)</span></div><div class="line"></div><div class="line">myDate.getTime(); <span class="comment">//获取当前时间(从1970.1.1开始的毫秒数) 时间戳！！</span></div><div class="line"></div><div class="line">myDate.getHours(); <span class="comment">//获取当前小时数(0-23)</span></div><div class="line"></div><div class="line">myDate.getMinutes(); <span class="comment">//获取当前分钟数(0-59)</span></div><div class="line"></div><div class="line">myDate.getSeconds(); <span class="comment">//获取当前秒数(0-59)</span></div><div class="line"></div><div class="line">myDate.getMilliseconds(); <span class="comment">//获取当前毫秒数(0-999)</span></div><div class="line"></div><div class="line">myDate.toLocaleDateString(); <span class="comment">//获取当前日期</span></div><div class="line"></div><div class="line">myDate.toLocaleTimeString(); <span class="comment">//获取当前时间</span></div><div class="line"></div><div class="line">myDate.toLocaleString( ); <span class="comment">//获取日期与时间</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>计算之前或未来的时间</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line"></div><div class="line">myDate.setDate(myDate.getDate() + <span class="number">10</span>); <span class="comment">//当前时间加10天//类似的方法都基本相同,以set开头,具体参考第2点</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>计算两个日期的偏移量</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> i = daysBetween(beginDate,endDate); <span class="comment">//返回天数</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> i = beginDate.getTimezoneOffset(endDate); <span class="comment">//返回分钟数</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>检查有效日期</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//checkDate() 只允许”mm-dd-yyyy”或”mm/dd/yyyy”两种格式的日期</span></div><div class="line"><span class="keyword">if</span>( checkDate(“<span class="number">2006</span><span class="number">-01</span><span class="number">-01</span>”) )&#123; &#125;</div><div class="line"></div><div class="line"><span class="comment">//正则表达式(自己写的检查 yyyy-mm-dd, yy-mm-dd, yyyy/mm/dd, yy/mm/dd 四种)</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> r = <span class="regexp">/^(\d&#123;2&#125;|\d&#123;4&#125;)[\/-]\d&#123;1,2&#125;[\/-]\d&#123;1,2&#125;$/</span>;<span class="keyword">if</span>( r.test( myString ) )&#123; &#125;</div></pre></td></tr></table></figure>
<h5 id="字符串String型函数API"><a href="#字符串String型函数API" class="headerlink" title="字符串String型函数API"></a>字符串String型函数API</h5><hr>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-588f28213506abe1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="js下常用的字符串方法"></p>
<ul>
<li><strong>声明</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myString = <span class="keyword">new</span> <span class="built_in">String</span>(“Every good boy does fine.”);</div><div class="line"></div><div class="line"><span class="keyword">var</span> myString = “Every good boy does fine.”;</div></pre></td></tr></table></figure>
<ul>
<li><strong>字符串连接</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myString = “Every ” + “good boy ” + “does fine.”;</div><div class="line"></div><div class="line"><span class="keyword">var</span> myString = “Every “; myString += “good boy does fine.”;</div></pre></td></tr></table></figure>
<ul>
<li><strong>截取字符串</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//截取第 6 位开始的字符</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> myString = “Every good boy does fine.”;</div><div class="line"></div><div class="line"><span class="keyword">var</span> section = myString.substring(<span class="number">6</span>); <span class="comment">//结果: “good boy does fine.”</span></div><div class="line"></div><div class="line"><span class="comment">//截取第 0 位开始至第 10 位为止的字符</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> myString = “Every good boy does fine.”;</div><div class="line"></div><div class="line"><span class="keyword">var</span> section = myString.substring(<span class="number">0</span>,<span class="number">10</span>); <span class="comment">//结果: “Every good”</span></div><div class="line"></div><div class="line"><span class="comment">//截取从第 11 位到倒数第 6 位为止的字符</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> myString = “Every good boy does fine.”;</div><div class="line"></div><div class="line"><span class="keyword">var</span> section = myString.slice(<span class="number">11</span>,<span class="number">-6</span>); <span class="comment">//结果: “boy does”</span></div><div class="line"></div><div class="line"><span class="comment">//从第 6 位开始截取长度为 4 的字符</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> myString = “Every good boy does fine.”;</div><div class="line"></div><div class="line"><span class="keyword">var</span> section = myString.substr(<span class="number">6</span>,<span class="number">4</span>); <span class="comment">//结果: “good”</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>转换大小写</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myString = “Hello”;</div><div class="line"></div><div class="line"><span class="keyword">var</span> lcString = myString.toLowerCase(); <span class="comment">//结果: “hello”</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> ucString = myString.toUpperCase(); <span class="comment">//结果: “HELLO”</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>字符串比较</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> aString = “Hello!”;</div><div class="line"></div><div class="line"><span class="keyword">var</span> bString = <span class="keyword">new</span> <span class="built_in">String</span>(“Hello!”);</div><div class="line"></div><div class="line"><span class="keyword">if</span>( aString == “Hello!” )&#123; &#125; <span class="comment">//结果: true</span></div><div class="line"></div><div class="line"><span class="keyword">if</span>( aString == bString )&#123; &#125; <span class="comment">//结果: true</span></div><div class="line"></div><div class="line"><span class="keyword">if</span>( aString === bString )&#123; &#125; <span class="comment">//结果: false (两个对象不同,尽管它们的值相同)</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>检索字符串</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myString = “hello everybody.”;</div><div class="line"></div><div class="line"><span class="comment">// 如果检索不到会返回-1,检索到的话返回在该串中的起始位置</span></div><div class="line"></div><div class="line"><span class="keyword">if</span>( myString.indexOf(“every”) &gt; <span class="number">-1</span> )&#123; &#125; <span class="comment">//结果: true</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>查找替换字符串</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myString = “I is your father.”;</div><div class="line"></div><div class="line"><span class="keyword">var</span> result = myString.replace(“is”,”am”); <span class="comment">//结果: “I am your father.”</span></div></pre></td></tr></table></figure>
<ul>
<li><p><strong>特殊字符</strong></p>
<ul>
<li><code>\b</code> : 后退符 </li>
<li><code>\t</code> : 水平制表符</li>
<li><code>\n</code> : 换行符 </li>
<li><code>\v</code> : 垂直制表符</li>
<li><code>\f</code> : 分页符 </li>
<li><code>\r</code> : 回车符</li>
<li><code>\”</code> : 双引号 </li>
<li><code>\’</code> : 单引号</li>
<li><code>\\ 反斜杆</code></li>
</ul>
</li>
</ul>
<ul>
<li><strong>将字符转换成<code>Unicode</code>编码</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myString = “hello”;</div><div class="line"></div><div class="line"><span class="keyword">var</span> code = myString.charCodeAt(<span class="number">3</span>); <span class="comment">//返回”l”的Unicode编码(整型)</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> char = <span class="built_in">String</span>.fromCharCode(<span class="number">66</span>); <span class="comment">//返回Unicode为66的字符</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>将字符串转换成URL编码</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myString = “hello all”;</div><div class="line"></div><div class="line"><span class="keyword">var</span> code = <span class="built_in">encodeURI</span>(myString); <span class="comment">//结果: “hello%20all”</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> str = <span class="built_in">decodeURI</span>(code); <span class="comment">//结果: “hello all”</span></div><div class="line"></div><div class="line"><span class="comment">//相应的还有: encodeURIComponent() decodeURIComponent()</span></div></pre></td></tr></table></figure>
<ul>
<li>扩展阅读<ul>
<li><a href="http://blog.poetries.top/2016/08/02/javascript%20%E4%B8%8B%E5%B8%B8%E7%94%A8%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/" target="_blank" rel="external">JavaScript下常用的字符串</a></li>
</ul>
</li>
</ul>
<h5 id="Math对象型"><a href="#Math对象型" class="headerlink" title="Math对象型"></a>Math对象型</h5><hr>
<ul>
<li><p><code>Math.abs(num)</code> : 返回<code>num</code>的绝对值</p>
</li>
<li><p><code>Math.acos(num)</code> : 返回<code>num</code>的反余弦值</p>
</li>
<li><p><code>Math.asin(num)</code> : 返回<code>num</code>的反正弦值</p>
</li>
<li><p><code>Math.atan(num)</code> : 返回<code>num</code>的反正切值</p>
</li>
<li><p><code>Math.atan2(y,x)</code> : 返回<code>y</code>除以<code>x</code>的商的反正切值</p>
</li>
<li><p><code>Math.ceil(num)</code> : 返回大于<code>num</code>的最小整数</p>
</li>
<li><p><code>Math.cos(num)</code> : 返回<code>num</code>的余弦值</p>
</li>
<li><p><code>Math.exp(x)</code> : 返回以自然数为底,x次幂的数</p>
</li>
<li><p><code>Math.floor(num)</code> : 返回小于<code>num</code>的最大整数</p>
</li>
<li><p><code>Math.log(num)</code> : 返回<code>num</code>的自然对数</p>
</li>
<li><p><code>Math.max(num1,num2)</code> : 返回<code>num1</code>和<code>num2</code>中较大的一个</p>
</li>
<li><p><code>Math.min(num1,num2)</code> : 返回<code>num1</code>和<code>num2</code>中较小的一个</p>
</li>
<li><p><code>Math.pow(x,y)</code> : 返回<code>x</code>的<code>y</code>次方的值</p>
</li>
<li><p><code>Math.random()</code> : 返回<code>0</code>到<code>1</code>之间的一个随机数</p>
</li>
<li><p><code>Math.round(num)</code> : 返回<code>num</code>四舍五入后的值</p>
</li>
<li><p><code>Math.sin(num)</code> : 返回<code>num</code>的正弦值</p>
</li>
<li><p><code>Math.sqrt(num)</code> : 返回<code>num</code>的平方根</p>
</li>
<li><p><code>Math.tan(num)</code> : 返回<code>num</code>的正切值</p>
</li>
<li><p><code>Math.E</code> : 自然数(<code>2.718281828459045</code>)</p>
</li>
<li><p><code>Math.LN2</code> : <code>2</code>的自然对数(<code>0.6931471805599453</code>)</p>
</li>
<li><p><code>Math.LN10</code> : <code>10</code>的自然对数(<code>2.302585092994046</code>)</p>
</li>
<li><p><code>Math.LOG2E</code> : <code>log 2</code> 为底的自然数(<code>1.4426950408889634</code>)</p>
</li>
<li><p><code>Math.LOG10E</code> : <code>log 10</code> 为底的自然数(<code>0.4342944819032518</code>)</p>
</li>
<li><p><code>Math.PI</code> : <code>π(3.141592653589793)</code></p>
</li>
<li><p><code>Math.SQRT1_2</code> : <code>1/2</code>的平方根(<code>0.7071067811865476</code>)</p>
</li>
<li><p><code>Math.SQRT2</code> : <code>2</code>的平方根(<code>1.4142135623730951</code>)</p>
</li>
</ul>
<h5 id="Number型-常用的数字函数"><a href="#Number型-常用的数字函数" class="headerlink" title="Number型 常用的数字函数"></a>Number型 常用的数字函数</h5><hr>
<ul>
<li><strong>声明</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> i = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">1</span>);</div></pre></td></tr></table></figure>
<ul>
<li><strong>字符串与数字间的转换</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> str = i.toString(); <span class="comment">//结果: “1”</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(i); <span class="comment">//结果: “1”</span></div><div class="line"></div><div class="line">i = <span class="built_in">parseInt</span>(str); <span class="comment">//结果: 1</span></div><div class="line"></div><div class="line">i = <span class="built_in">parseFloat</span>(str); <span class="comment">//结果: 1.0</span></div><div class="line"></div><div class="line"><span class="comment">//注意: parseInt,parseFloat会把一个类似于”32G”的字符串,强制转换成32</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>判断是否为有效的数字</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> i = <span class="number">123</span>; <span class="keyword">var</span> str = “string”;</div><div class="line"></div><div class="line"><span class="keyword">if</span>( <span class="keyword">typeof</span> i == “number” )&#123; &#125; <span class="comment">//true</span></div><div class="line"></div><div class="line"><span class="comment">//某些方法(如:parseInt,parseFloat)会返回一个特殊的值NaN(Not a Number)</span></div><div class="line"></div><div class="line"><span class="comment">//请注意第2点中的[注意],此方法不完全适合判断一个字符串是否是数字型!!</span></div><div class="line"></div><div class="line">i = <span class="built_in">parseInt</span>(str);</div><div class="line"></div><div class="line"><span class="keyword">if</span>( <span class="built_in">isNaN</span>(i) )&#123; &#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>数字型比较</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//此知识与[字符串比较]相同</span></div><div class="line"></div><div class="line">- **小数转整数**</div><div class="line"></div><div class="line"><span class="keyword">var</span> f = <span class="number">1.5</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> i = <span class="built_in">Math</span>.round(f); <span class="comment">//结果:2 (四舍五入)</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> i = <span class="built_in">Math</span>.ceil(f); <span class="comment">//结果:2 (返回大于f的最小整数)</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> i = <span class="built_in">Math</span>.floor(f); <span class="comment">//结果:1 (返回小于f的最大整数)</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>格式化显示数字</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> i = <span class="number">3.14159</span>;</div><div class="line"></div><div class="line"><span class="comment">//格式化为两位小数的浮点数</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> str = i.toFixed(<span class="number">2</span>); <span class="comment">//结果: “3.14”</span></div><div class="line"></div><div class="line"><span class="comment">//格式化为五位数字的浮点数(从左到右五位数字,不够补零)</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> str = i.toPrecision(<span class="number">5</span>); <span class="comment">//结果: “3.1415”</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>X进制数字的转换</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> i = <span class="built_in">parseInt</span>(“<span class="number">0x1f</span>”,<span class="number">16</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> i = <span class="built_in">parseInt</span>(i,<span class="number">10</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> i = <span class="built_in">parseInt</span>(“<span class="number">11010011</span>”,<span class="number">2</span>);</div></pre></td></tr></table></figure>
<ul>
<li><strong>随机数</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//返回0-1之间的任意小数</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> rnd = <span class="built_in">Math</span>.random();</div><div class="line"></div><div class="line"><span class="comment">//返回0-n之间的任意整数(不包括n)</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> rnd = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * n)</div></pre></td></tr></table></figure>
<h5 id="5-Regex"><a href="#5-Regex" class="headerlink" title="5.Regex"></a>5.<code>Regex</code></h5><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在这个最大的对象的原型上加一个extends方法 使得下面所有的原型 都有这个方法</span></div><div class="line"> <span class="comment">//这个原型的作用是通过迭代 复制传进来的构造器的所有的原型的方法</span></div><div class="line"></div><div class="line"> <span class="built_in">Object</span>.prototype.extends = <span class="function"><span class="keyword">function</span>(<span class="params">parent</span>)</span>&#123;</div><div class="line">     <span class="comment">//console.log(parent.prototype);</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> parent.prototype)&#123;</div><div class="line">        <span class="comment">//console.log(prop);//eat extends</span></div><div class="line">        <span class="keyword">this</span>.prototype[prop] = parent.prototype[prop];<span class="comment">//复制传进来的构造器的所有的原型的方法给当前正在调用这个方法的对象</span></div><div class="line">    &#125;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line"> &#125;</div><div class="line"> Person.prototype = &#123;</div><div class="line">    <span class="attr">eat</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="keyword">this</span>.name+<span class="string">"在吃饭"</span>);</div><div class="line">    &#125;</div><div class="line"> &#125;;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> Father.extends(Person);<span class="comment">//extends方法是最大的对象Object加的方法 所有的子孙 构造器都有这个方法</span></div><div class="line"></div><div class="line"> <span class="keyword">var</span> f = <span class="keyword">new</span> Father(<span class="string">"小头爸爸"</span>);</div><div class="line"> f.eat();</div></pre></td></tr></table></figure>
<h4 id="一些图示"><a href="#一些图示" class="headerlink" title="一些图示"></a><strong>一些图示</strong></h4><hr>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-6828aabba7d2948e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-f4f9ade4c089cabd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<ul>
<li>正则表达式扩展阅读<ul>
<li><a href="http://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="external">正则表达式30分钟入门教程</a></li>
<li><a href="http://blog.poetries.top/2016/07/09/%E6%A2%B3%E7%90%86%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/" target="_blank" rel="external">梳理常用的正则表达式</a></li>
</ul>
</li>
</ul>
<h3 id="第十一课时"><a href="#第十一课时" class="headerlink" title="第十一课时"></a>第十一课时</h3><hr>
<h4 id="上节回顾：-7"><a href="#上节回顾：-7" class="headerlink" title="上节回顾："></a><strong>上节回顾：</strong></h4><hr>
<ul>
<li>1.<code>String</code></li>
<li>2.<code>Math</code>  <code>Math.random()</code></li>
</ul>
<h4 id="知识点：-10"><a href="#知识点：-10" class="headerlink" title="知识点："></a><strong>知识点：</strong></h4><hr>
<ul>
<li>1.<code>Date</code> 日期类</li>
<li>2.<code>Array</code></li>
<li>3.<code>Regex</code><ul>
<li>a.<code>[]</code>一个字符的范围</li>
<li>b.有顺序要求的</li>
<li>c.<code>\w==[a-zA-Z0-9_]</code>  <code>\d==[0-9]</code></li>
<li>d.<code>{count}</code>设置匹配数量比如<code>\w{5}</code></li>
<li>e.<code>//</code>的正则表达式匹配局部，<code>/^$/</code>的正则表达式是匹配全部</li>
<li>f.<code>()</code>的作用就是为了分组匹配</li>
</ul>
</li>
</ul>
<ul>
<li>简单封装一个对象案例</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">String</span>.prototype.isEmail = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">  email = <span class="keyword">this</span>;</div><div class="line">  <span class="keyword">if</span> (email.indexOf(<span class="string">"@"</span>)!=<span class="number">-1</span>&amp;&amp;email.indexOf(<span class="string">"."</span>)!=<span class="number">-1</span>)</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">if</span>(email.indexOf(<span class="string">"@"</span>)&lt;email.lastIndexOf(<span class="string">"@"</span>))&#123;</div><div class="line">      alert(<span class="string">"邮箱不合法"</span>);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">      alert(<span class="string">"邮箱合法"</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> email = <span class="string">"jingguanliuye@gmail.com"</span>;</div><div class="line">email.isEmail();</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//===============================日历练习(方法简洁 高效)======================================</span></div><div class="line"></div><div class="line"><span class="comment">//var year = parseInt(prompt("请输入日历年份："));</span></div><div class="line"><span class="comment">//var month = parseInt(prompt("请输入日历月份："))-1;</span></div><div class="line"></div><div class="line"><span class="built_in">Date</span>.prototype.printCalendar = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">var</span> year = <span class="keyword">this</span>.getFullYear(),month = <span class="keyword">this</span>.getMonth();</div><div class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(year,month,<span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="comment">//alert(date.toLocaleString());</span></div><div class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;div class='date'&gt;"</span>+year+<span class="string">"年"</span>+(month+<span class="number">1</span>)+<span class="string">"月&lt;/div&gt;"</span>);</div><div class="line"><span class="built_in">document</span>.write(<span class="string">"日 一 二 三 四 五 六&lt;br /&gt;"</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> day = date.getDay();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;day;i++)&#123;</div><div class="line">  <span class="built_in">document</span>.write(<span class="string">'  '</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> count = <span class="keyword">new</span> <span class="built_in">Date</span>(year,month+<span class="number">1</span>,<span class="number">0</span>).getDate();<span class="comment">//这里的0返回一个月的最后一天</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;=count;i++)&#123;</div><div class="line">  <span class="built_in">document</span>.write(i+<span class="string">'  '</span>);</div><div class="line">  <span class="keyword">if</span>((i+day)%<span class="number">7</span>==<span class="number">0</span>)&#123;</div><div class="line">    <span class="built_in">document</span>.write(<span class="string">'&lt;br/&gt;'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2012</span>,<span class="number">2</span>).printCalendar();</div></pre></td></tr></table></figure>
<h3 id="第十二课时"><a href="#第十二课时" class="headerlink" title="第十二课时"></a>第十二课时</h3><hr>
<h4 id="上节回顾：-8"><a href="#上节回顾：-8" class="headerlink" title="上节回顾："></a><strong>上节回顾：</strong></h4><hr>
<ul>
<li>1.<code>Date</code> 期类</li>
<li>2.<code>Array</code></li>
<li>3.<code>Regex</code><ul>
<li>a.<code>[]</code>一个字符的范围</li>
<li>b.有顺序要求的</li>
<li>c.<code>\w==[a-zA-Z0-9_]</code>  <code>\d==[0-9]</code></li>
<li>d.<code>{count}</code>设置匹配数量比如<code>\w{5}</code>，<code>{c1,c2}</code></li>
<li>e.<code>//</code>的正则表达式匹配局部，<code>/^$/</code>的正则表达式是匹配全部</li>
<li>f.<code>()</code>的作用就是为了分组匹配</li>
</ul>
</li>
</ul>
<h4 id="新知识点："><a href="#新知识点：" class="headerlink" title="新知识点："></a><strong>新知识点：</strong></h4><hr>
<ul>
<li>1.<code>Regex</code><ul>
<li>g.<code>+</code>代表的是<code>1-N</code>个，<code>*</code>代表的是<code>0-N</code>个</li>
<li>h.<code>?</code>代表该字符要不没有要不就有一个</li>
<li>i.<code>.</code>代表的是任意字符</li>
<li>j. <code>\转义符</code></li>
</ul>
</li>
<li>2.<code>BOM</code></li>
</ul>
<h3 id="第十三课时"><a href="#第十三课时" class="headerlink" title="第十三课时"></a>第十三课时</h3><hr>
<h4 id="上节回顾：-9"><a href="#上节回顾：-9" class="headerlink" title="上节回顾："></a><strong>上节回顾：</strong></h4><hr>
<ul>
<li>1.Regex<ul>
<li>a.<code>[]</code>一个字符的范围</li>
<li>b.有顺序要求的</li>
<li>c.<code>\w==[a-zA-Z0-9_]</code>  <code>\d==[0-9]</code></li>
<li>d.<code>{count}</code>设置匹配数量比如<code>\w{5}</code>，<code>{c1,c2}</code></li>
<li>e.<code>//</code>的正则表达式匹配局部，<code>/^$/</code>的正则表达式是匹配全部</li>
<li>f.<code>()</code>的作用就是为了分组匹配</li>
<li>g.+代表的是<code>1-N</code>个，<code>*</code>代表的是<code>0-N</code>个</li>
<li>h.<code>?</code>代表该字符要不没有要不就有一个</li>
<li>i.<code>.</code>代表的是任意字符</li>
<li>j.<code>\转义符</code></li>
</ul>
</li>
</ul>
<h4 id="新知识："><a href="#新知识：" class="headerlink" title="新知识："></a><strong>新知识：</strong></h4><hr>
<ul>
<li><code>window</code> 是<code>Window</code>构造器造出来的一个对象 <code>alert(window instanceof Window)</code></li>
<li><code>document</code> 是<code>Document</code>构造器造出来的一个对象</li>
<li>任何对象在我们的内存中他都是由某个构造器创建出来的 也就是说 有构造器一定有对应的原型prototype</li>
<li>例如：<code>div</code>是由<code>HTMLDivElement</code> 这个构造器创建的一个实例 <code>div = new HTMLDivElement()</code>  <code>span = new HTMLSpanElement()</code></li>
<li>查看某个对象对应的构造器：<code>console.log();</code></li>
<li>整个浏览器的实现就是一个面向对象的编程思想 一切皆是对象</li>
</ul>
<h4 id="1-BOM-浏览器对象模型"><a href="#1-BOM-浏览器对象模型" class="headerlink" title="1.BOM 浏览器对象模型"></a>1.BOM 浏览器对象模型</h4><hr>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-8b133694198ad13f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="BOM"></p>
<ul>
<li>a.<code>screen</code> 指的不是浏览器的宽度，指的是整个电脑屏幕的分辨率<ul>
<li>可以拿到屏幕可用分辨率</li>
</ul>
</li>
<li>b.<code>navigator</code><ul>
<li>可以通过<code>userAgent</code>判断当前浏览器信息</li>
</ul>
</li>
<li>c.<code>location</code><ul>
<li><code>URL</code>：统一资源定位符 <code>Union Resource Location</code></li>
<li>可以通过<code>href</code>属性重定向（改变）页面的URL，进行页面跳转</li>
</ul>
</li>
<li>d.<code>history</code><ul>
<li><code>go</code>方法能够让我们进行历史回退或者前进</li>
</ul>
</li>
<li><p>e.<code>frames</code></p>
<ul>
<li>获得当前窗体的子页面（<code>iframe</code>）</li>
</ul>
</li>
<li><p>f.<code>document</code></p>
<ul>
<li><code>DOM</code>模型的核心对象</li>
</ul>
</li>
</ul>
<h4 id="2-DOM-文档对象模型"><a href="#2-DOM-文档对象模型" class="headerlink" title="2.DOM 文档对象模型"></a>2.<code>DOM</code> 文档对象模型</h4><hr>
<ul>
<li><p><strong><code>document</code></strong></p>
<ul>
<li><strong>功能</strong><ul>
<li><code>getElementById</code>   <code>$(&#39;#aaa&#39;)</code></li>
<li><code>getElementByTagName</code>  <code>$(&#39;div&#39;)</code></li>
<li><code>getElementsByClassName</code>  <code>$(&#39;.aaa&#39;)</code></li>
<li><code>getElementsByName</code>  只用在表单元素中</li>
</ul>
</li>
</ul>
</li>
<li><p><strong><code>document</code> <code>object</code></strong></p>
<ul>
<li><strong>属性：</strong><ul>
<li><code>className</code>，<code>style</code></li>
<li><code>id</code></li>
<li><code>name</code>,<code>value</code>(表单元素)</li>
<li><code>href</code>,<code>src</code>…(对应的元素)</li>
<li><code>innerHTML</code></li>
<li><code>children</code></li>
<li><code>parentNode</code></li>
</ul>
</li>
</ul>
<ul>
<li><strong>功能方法：</strong><ul>
<li><code>setAttribute/getAttribute</code></li>
<li><code>appendChild</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="第十四课时"><a href="#第十四课时" class="headerlink" title="第十四课时"></a>第十四课时</h3><hr>
<h4 id="上节回顾：-10"><a href="#上节回顾：-10" class="headerlink" title="上节回顾："></a><strong>上节回顾：</strong></h4><hr>
<ul>
<li>1.BOM 浏览器对象模型<ul>
<li>a.<code>screen</code> 指的不是浏览器的宽度，指的是整个电脑屏幕的分辨率<ul>
<li>可以拿到屏幕可用分辨率</li>
</ul>
</li>
<li>b.<code>navigator</code><ul>
<li>可以通过<code>userAgent</code>判断当前浏览器信息</li>
</ul>
</li>
<li>c.<code>location</code><ul>
<li><code>URL</code>：统一资源定位符 <code>Union Resource Location</code></li>
<li>可以通过<code>href</code>属性重定向（改变）页面的URL，进行页面跳转</li>
</ul>
</li>
<li>d.<code>history</code><ul>
<li><code>go</code>方法能够让我们进行历史回退或者前进</li>
</ul>
</li>
<li>e.<code>frames</code><pre><code>获得当前窗体的子页面（`iframe`）
</code></pre></li>
<li>f.<code>document</code><ul>
<li><code>DOM</code>模型的核心对象</li>
</ul>
</li>
</ul>
</li>
<li>所有的<code>DOM</code>对象都是在堆内存创建的 都是有一个构造器生成的</li>
<li>查看对象的构造器器方法：<ul>
<li>step1：查看标签的对象以及构造器<code>var body = document.body;console.log(body.toString())</code></li>
<li>step2：查看对象是否是这个构造器创建出来的 <code>console.log(body instanceof HTMLBodyElement)</code></li>
</ul>
</li>
</ul>
<h4 id="新知识点：-1"><a href="#新知识点：-1" class="headerlink" title="新知识点："></a><strong>新知识点：</strong></h4><hr>
<h4 id="1-DOM-文档对象模型"><a href="#1-DOM-文档对象模型" class="headerlink" title="1.DOM 文档对象模型"></a>1.DOM 文档对象模型</h4><hr>
<h5 id="document"><a href="#document" class="headerlink" title="document"></a><strong>document</strong></h5><hr>
<ul>
<li>功能<ul>
<li><code>getElementById</code>：通过传入的ID，返回标识了这个ID的唯一对象的内存地址</li>
<li><code>getElementsByTagName</code>:通过传入的标签名字，返回所有该标签对象（<code>HTMLCollection</code>）</li>
<li><code>getElementsByClassName</code>:通过类的名字，返回所有该类的元素对象（<code>HTMLCollection</code>）</li>
<li><code>createElement</code>:想要创建出来的元素能够绘制在页面中，那么它必须在DOM树中<ul>
<li><strong>总结</strong> <code>document</code>对象是DOM原型的核心对象，它是内存DOM树的根，所以它提供了很多功能让我们快速的找到DOM树中的某些DOM节点（对象）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="element"><a href="#element" class="headerlink" title="element"></a><strong><code>element</code></strong></h5><hr>
<ul>
<li><p>功能方法：（自定义属性非常灵活好用）</p>
<ul>
<li><code>setAttribute/getAttribute</code> //getAttribute获取标签的属性 –用来操作标签的属性</li>
<li><code>setAttribute</code>设置标签的属性</li>
<li><code>appendChild</code>:添加子元素</li>
</ul>
</li>
<li><p>属性：</p>
<ul>
<li><code>id</code></li>
<li><code>className</code>，<code>style</code></li>
<li><code>name</code>,<code>value</code>(只有表单元素有 其他是没有的)</li>
<li><code>href</code>,<code>src</code>…(对应的元素)</li>
<li><code>innerHTML/innerText</code>  <code>innerText</code>返回文本信息</li>
<li><code>children</code>://子元素集合</li>
<li><code>parentNode</code>//父元素</li>
</ul>
</li>
</ul>
<ul>
<li>总结：元素的功能属性直接可以通过元素对象<code>点</code>出来，除此意外的<code>自定义属性</code>，请通过<code>get/setAtribute</code>去操作</li>
</ul>
<h4 id="DOM-操作："><a href="#DOM-操作：" class="headerlink" title="DOM 操作："></a><strong>DOM 操作：</strong></h4><hr>
<ul>
<li>图片切换的相册效果</li>
<li><code>tab</code>切换效果</li>
<li>表单验证</li>
<li>特效就是<code>DOM</code>操作的具体应用 <code>DOM</code>操作就是用<code>js</code>来写<code>HTML</code>代码</li>
<li>节点/元素/标签：<ul>
<li>三种常用的节点类型：<ul>
<li>元素节点</li>
<li>属性节点</li>
<li>文本节点</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="操作DOM对象："><a href="#操作DOM对象：" class="headerlink" title="操作DOM对象："></a><strong>操作DOM对象：</strong></h4><hr>
<ul>
<li>修改：–找到这个节点</li>
<li>删除：–找到这个节点</li>
<li>添加：–先造出一个节点 然后插入 插入到哪里？找节点来定位</li>
<li>这些都离不开节点的查找</li>
</ul>
<h4 id="节点的查找：（最重要）"><a href="#节点的查找：（最重要）" class="headerlink" title="节点的查找：（最重要）"></a><strong>节点的查找：（最重要）</strong></h4><hr>
<ul>
<li>1、<code>document.getElementById</code>—根据<code>id</code>查找节点 [返回的是节点本身]</li>
<li>2、<code>document.getElementsByTagName</code>–根据标签名字来查找[返回的是数组]<code>document.getElementsByTagName[i]</code></li>
<li>3、<code>document.getElemenstByName</code>–根据<code>name</code>属性来查找节点（一般用在表单中）[返回的是数组]<code>document.getElemenstByName[i]</code></li>
</ul>
<ul>
<li><p><strong>注意：</strong>早期浏览器都认为<code>name</code>只出现在表单中 </p>
</li>
<li><p>因此<code>document.getElemenstByName</code>只对表单中的元素发挥作用 后来部分浏览器把<code>Name</code>属性扩展到一般的元素 如：<code>div</code> 但是IE浏览器还是只能对表单使用<code>byName</code>因此处于兼容性 我们只能对表单使用<code>byName</code></p>
</li>
</ul>
<h4 id="DOM中查找节点的思路：（由大到小-个别情况-由子到父）"><a href="#DOM中查找节点的思路：（由大到小-个别情况-由子到父）" class="headerlink" title="DOM中查找节点的思路：（由大到小 个别情况 由子到父）"></a><code>DOM</code>中查找节点的思路：（由大到小 个别情况 由子到父）</h4><hr>
<ul>
<li><p>由大到小：（通过下面的来定位）</p>
<ul>
<li>1、<code>document.getElementById</code>—根据id查找节点 [返回的是节点本身]</li>
<li>2、<code>document.getElementsByTagName</code>–根据标签名字来查找[返回的是数组]<code>document.getElementsByTagName[i]</code></li>
<li>3、<code>document.getElemenstByName</code>–根据<code>name</code>属性来查找节点（一般用在表单中）[返回的是数组]<code>document.getElemenstByName[i]</code></li>
</ul>
</li>
<li>如果还没有查到自己想要的节点，还可以继续根据上面已经找到的节点再次定位来查找</li>
<li>怎么继续定位？<ul>
<li>答：<code>childNodes/child</code></li>
</ul>
</li>
</ul>
<h4 id="继续查找："><a href="#继续查找：" class="headerlink" title="继续查找："></a><strong>继续查找：</strong></h4><ul>
<li>1、查找子元素 <code>children[index]/childNodes</code></li>
<li>2、查找父元素 <code>node.parentNode</code> –&gt;获取父元素</li>
<li>3、查找兄弟元素 <code>nextSibling</code> <code>previousSibling</code></li>
<li>4、<code>nextSibling</code> <code>previousSibling</code> <code>firstChild</code> <code>lastChild</code>这四个属性容易受到<code>空白文本</code>的影响 <code>建议不用</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//============给Object原型加一个方法 消除文本节点对DOM操作的影响 例如：nextSibling` `previousSibling` `firstChild` `lastChild （受到换行 和文本节点影响）</span></div><div class="line"></div><div class="line"><span class="built_in">Object</span>.prototype.next = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="comment">//NodeType == 3 text的代号</span></div><div class="line">  <span class="comment">//NodeType == 1 tag的代号</span></div><div class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.nextSibling)&#123;<span class="comment">//判断下一个兄弟节点是否存在</span></div><div class="line">  <span class="keyword">switch</span>(<span class="keyword">this</span>.nextSibling.nodeType)&#123;</div><div class="line">    <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.nextSibling;</div><div class="line">    <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.nextSibling.nextSibling;</div><div class="line">  &#125;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(div1.next().next().innerText);</div></pre></td></tr></table></figure>
<ul>
<li><p>5、对于查到的某个元素里面的子元素非常多 这时候还可利用<code>getElementsByTagname</code>进一步筛选</p>
</li>
<li><p><strong>注意</strong> 对于元素对象和<code>document</code>对象相比 元素对象只能利用<code>getElementsByTagName</code>函数 其他两个不能用</p>
</li>
</ul>
<ul>
<li><p>节点查找也是通过由大到小来定位：找到大的元素进一步细化 完全可以找到页面上任意一个元素控制他</p>
</li>
<li><p>子元素 不好找 就找他的父元素</p>
</li>
<li><p>要过滤空白文本节点，用<code>children</code>取他的文本节点</p>
</li>
</ul>
<h4 id="DOM与节点的关系："><a href="#DOM与节点的关系：" class="headerlink" title="DOM与节点的关系："></a><strong>DOM与节点的关系：</strong></h4><hr>
<ul>
<li><strong>node:</strong><ul>
<li><code>childNodes[]</code></li>
<li><code>parentNode</code></li>
<li><code>firstChild</code></li>
<li><code>getElementsByTagName(&#39;元素标签&#39;)</code></li>
<li><code>lastchild</code></li>
<li><code>nextSibling</code></li>
<li><code>previousSibling</code></li>
<li><code>children[index]</code> <code>children</code> 不是<code>w3c</code>标准 但是各大浏览器兼容性很好</li>
</ul>
</li>
</ul>
<ul>
<li><p>通过给原型添加方法在元素后面创建标签</p>
</li>
<li><p><strong>启示</strong>：在项目中，很多很多地方都需要一个方法但是系统没提供，这时可以通过原型扩展</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//var p = document.createElement('p');</span></div><div class="line"><span class="comment">//p.innerHTML = "this is a p";</span></div><div class="line"><span class="comment">//var child = document.getElementsByTagName('div');</span></div><div class="line"></div><div class="line"><span class="comment">//给Div的HTMLDivElement构造器原型加一个创建元素的方法 要所有的元素都有这个方法 改成 Object</span></div><div class="line">HTMLDivElement.prototype.createElement = <span class="function"><span class="keyword">function</span>(<span class="params">tagName</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> child = <span class="built_in">document</span>.createElement(tagName);</div><div class="line">  <span class="keyword">this</span>.appendChild(child);</div><div class="line">  <span class="keyword">return</span> child;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> child = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)[<span class="number">2</span>].createElement(<span class="string">"p"</span>);</div><div class="line">child.innerHTML = <span class="string">'pppppp'</span>;</div></pre></td></tr></table></figure>
<h5 id="DOM属性小结"><a href="#DOM属性小结" class="headerlink" title="DOM属性小结"></a><strong>DOM属性小结</strong></h5><hr>
<ul>
<li><p><code>Attributes</code>    存储节点的属性列表(只读)</p>
</li>
<li><p><code>childNodes</code>    存储节点的子节点列表(只读)</p>
</li>
<li><p><code>dataType</code>    返回此节点的数据类型</p>
</li>
<li><p><code>Definition</code>    以<code>DTD</code>或<code>XML</code>模式给出的节点的定义(只读)</p>
</li>
<li><p><code>Doctype</code>    指定文档类型节点(只读)</p>
</li>
<li><p><code>documentElement</code>    返回文档的根元素(可读写)</p>
</li>
<li><p><code>firstChild</code>    返回当前节点的第一个子节点(只读)</p>
</li>
<li><p><code>Implementation</code>    返回<code>XMLDOMImplementation</code>对象</p>
</li>
<li><p><code>lastChild</code>    返回当前节点最后一个子节点(只读)</p>
</li>
<li><p><code>nextSibling</code>    返回当前节点的下一个兄弟节点(只读)</p>
</li>
<li><p><code>nodeName</code>    返回节点的名字(只读)</p>
</li>
<li><p><code>nodeType</code>    返回节点的类型(只读)</p>
</li>
<li><p><code>nodeTypedValue</code>存储节点值(可读写)</p>
</li>
<li><p><code>nodeValue</code>    返回节点的文本(可读写)</p>
</li>
<li><p><code>ownerDocument</code>    返回包含此节点的根文档(只读)</p>
</li>
<li><p><code>parentNode</code>返回父节点(只读)</p>
</li>
<li><p><code>Parsed</code>    返回此节点及其子节点是否已经被解析(只读)</p>
</li>
<li><p><code>Prefix</code>    返回名称空间前缀(只读)</p>
</li>
<li><p><code>preserveWhiteSpace</code>    指定是否保留空白(可读写)</p>
</li>
<li><p><code>previousSibling</code>    返回此节点的前一个兄弟节点(只读)</p>
</li>
<li><p><code>Text</code>    返回此节点及其后代的文本内容(可读写)</p>
</li>
<li><p><code>url</code>返回最近载入的XML文档的<code>URL</code>(只读)</p>
</li>
<li><p><code>Xml</code>    返回节点及其后代的<code>XML</code>表示(只读)</p>
</li>
</ul>
<h5 id="DOM方法小结"><a href="#DOM方法小结" class="headerlink" title="DOM方法小结"></a>DOM方法小结</h5><hr>
<ul>
<li><code>cloneNode</code>    返回当前节点的拷贝</li>
<li><code>createAttribute</code>    创建新的属性</li>
</ul>
<ul>
<li><p><strong>节点操作<code>DOMDocument</code>属性和方法</strong></p>
<ul>
<li><p><code>createCDATASection</code>    创建包括给定数据的<code>CDATA</code>段</p>
</li>
<li><p><code>createComment</code>    创建一个注释节点</p>
</li>
<li><p><code>createDocumentFragment</code>    创建<code>DocumentFragment</code>对象</p>
</li>
<li><p><code>createElement_x_x</code>    创建一个元素节点</p>
</li>
<li><p><code>createEntityReference</code>    创建<code>EntityReference</code>对象</p>
</li>
<li><p><code>createNode</code>    创建给定类型,名字和命名空间的节点</p>
</li>
<li><p><code>createPorcessingInstruction</code>    创建操作指令节点</p>
</li>
<li><p><code>createTextNode</code>    创建包括给定数据的文本节点</p>
</li>
<li><p><code>getElementsByTagName</code>返回指定名字的元素集合</p>
</li>
<li><p><code>hasChildNodes</code>    返回当前节点是否有子节点</p>
</li>
<li><p><code>insertBefore</code>在指定节点前插入子节点</p>
</li>
<li><p><code>Load</code>导入指定位置的XML文档</p>
</li>
<li><p><code>loadXML</code>    导入指定字符串的XML文档</p>
</li>
<li><p><code>removeChild</code>    从子结点列表中删除指定的子节点</p>
</li>
<li><p><code>replaceChild</code>从子节点列表中替换指定的子节点</p>
</li>
<li><p><code>Save    把</code>XML`文件存到指定节点</p>
</li>
<li><p><code>selectNodes</code>    对节点进行指定的匹配,并返回匹配节点列表</p>
</li>
<li><p><code>selectSingleNode</code>    对节点进行指定的匹配,并返回第一个匹配节点</p>
</li>
<li><p><code>transformNode</code>    使用指定的样式表对节点及其后代进行转换</p>
</li>
<li><p><code>transformNodeToObject</code>    使用指定的样式表将节点及其后代转换为对象</p>
</li>
<li><p><code>document.documentElement</code>返回文档的根节点</p>
</li>
<li><p><code>document.activeElement</code>    返回当前文档中被击活的标签节点</p>
</li>
<li><p><code>event.fromElement</code>    返回鼠标移出的源节点</p>
</li>
<li><p><code>event.toElement</code>返回鼠标移入的源节点</p>
</li>
<li><p><code>event.srcElement</code>    返回激活事件的源节点</p>
</li>
<li><p><code>node.parentNode,node.parentElement</code>    返回父节点</p>
</li>
<li><p><code>node.childNodes</code>    返回子节点集合（包含文本节点及标签节点）</p>
</li>
<li><p><code>node.children</code>    返回子标签节点集合</p>
</li>
<li><p><code>node.textNodes</code>    返回子文本节点集合</p>
</li>
<li><p><code>node.firstChild</code>返回第一个子节点</p>
</li>
<li><p><code>node.lastChild</code>    返回最后一个子节点</p>
</li>
<li><p><code>node.nextSibling</code>返回同属下一个节点</p>
</li>
<li><p><code>node.previousSibling</code>    返回同属上一个节点</p>
</li>
<li><p><code>node.a(oNode)</code>    追加子节点：</p>
</li>
<li><p><code>node.applyElment(oNode,sWhere)</code></p>
</li>
<li><p><code>sWhere</code>有两个值：<code>outside</code> / i<code>nside</code>    应用标签节点</p>
</li>
<li><p><code>node.insertBefore()</code></p>
</li>
<li><p><code>node.insertAdjacentElement()</code></p>
</li>
<li><p><code>node.replaceAdjacentText()</code></p>
</li>
</ul>
</li>
<li><p><strong>插入节点</strong></p>
<ul>
<li><code>node.remove()</code></li>
<li><code>node.removeChild()</code></li>
<li><code>node.removeNode()</code></li>
</ul>
</li>
<li><p><strong>删除节点</strong></p>
<ul>
<li><code>node.replaceChild()</code></li>
<li><code>node.replaceNode()</code></li>
<li><code>node.swapNode()</code></li>
</ul>
</li>
<li><p><strong>替换节点</strong></p>
<ul>
<li><code>node.cloneNode(bAll)</code>返回复制复制节点引用</li>
<li><code>node.contains()</code>    是否有子节点</li>
<li><code>node.hasChildNodes()</code>是否有子节点</li>
</ul>
</li>
</ul>
<ul>
<li>扩展阅读<ul>
<li><a href="http://www.jianshu.com/p/1e638b7da640" target="_blank" rel="external">DOM编程之API总结篇</a></li>
</ul>
</li>
</ul>
<h3 id="第十五课时"><a href="#第十五课时" class="headerlink" title="第十五课时"></a>第十五课时</h3><hr>
<h4 id="上节回顾：-11"><a href="#上节回顾：-11" class="headerlink" title="上节回顾："></a><strong>上节回顾：</strong></h4><hr>
<h4 id="1-DOM-文档对象模型-1"><a href="#1-DOM-文档对象模型-1" class="headerlink" title="1.DOM 文档对象模型"></a>1.DOM 文档对象模型</h4><hr>
<h5 id="document-1"><a href="#document-1" class="headerlink" title="document"></a>document</h5><ul>
<li>功能<ul>
<li><code>getElementById</code>：通过传入的ID，返回标识了这个ID的唯一对象的内存地址</li>
<li><code>getElementsByTagName</code>:通过传入的标签名字，返回所有该标签对象（<code>HTMLCollection</code>）</li>
<li><code>getElementsByClassName</code>:通过类的名字，返回所有该类的元素对象（<code>HTMLCollection</code>）</li>
<li><code>createElement</code>:想要创建出来的元素能够绘制在页面中，那么它必须在DOM树中<ul>
<li>总结： <code>document</code>对象是DOM原型的核心对象，它是内存DOM树的根，所以它提供了很多功能让我们快速的找到DOM树中的某些DOM节点（对象）</li>
</ul>
</li>
</ul>
</li>
<li><code>element</code><ul>
<li>功能方法：（自定义属性非常灵活好用）<ul>
<li><code>setAttribute/getAttribute</code> //getAttribute获取标签的属性 –用来操作标签的属性</li>
<li><code>setAttribute</code>设置标签的属性</li>
<li><code>appendChild</code>:添加子元素</li>
</ul>
</li>
<li>属性：<ul>
<li><code>id</code></li>
<li><code>className</code>，<code>style</code></li>
<li><code>name</code>,<code>value</code>(只有表单元素有 其他是没有的)</li>
<li><code>href</code>,<code>src</code>…(对应的元素)</li>
<li><code>innerHTML/innerText</code>  innerText返回文本信息</li>
<li><code>children</code>://子元素集合</li>
<li><code>parentNode</code>//父元素</li>
<li>总结：元素的功能属性直接可以通过元素对象<code>点</code>出来，除此意外的<code>自定义属性</code>，请通过<code>get/setAtribute</code>去操作</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="新知识点：-2"><a href="#新知识点：-2" class="headerlink" title="新知识点："></a><strong>新知识点：</strong></h4><hr>
<h4 id="1-事件（事故）基础"><a href="#1-事件（事故）基础" class="headerlink" title="1.事件（事故）基础"></a>1.<strong>事件（事故）基础</strong></h4><hr>
<ul>
<li>白话含义：就是当一个事物遇到某个事情的时候，要做的事情<ul>
<li>（事件源）</li>
<li>（事件监听名称）</li>
<li>（事件处理程序）</li>
</ul>
</li>
</ul>
<h4 id="2-常用事件"><a href="#2-常用事件" class="headerlink" title="2.常用事件"></a>2.常用事件</h4><hr>
<ul>
<li><code>onclick:</code>当事件源被点击的时候调用处理程序</li>
<li><code>onmouseover:</code>鼠标进入事件</li>
<li><code>onmouseout:</code>鼠标移出事件</li>
<li><code>onmousedown:</code>鼠标按下去的时候</li>
<li><code>onmouseup:</code>鼠标抬起来的时候</li>
<li><code>onscroll:</code>当事件源滚动条滚动的时候</li>
<li><code>onkeydown:</code>当键盘按下的时候</li>
<li><code>onkeypress:</code>当键盘按下去的时候</li>
<li><code>onkeyup:</code>当键盘弹上来的时候</li>
<li><code>onfocus:</code>当事件源获得光标</li>
<li><code>onblur:</code>当事件源失去光标</li>
<li><code>onchange:</code>当事件源<code>blur</code>的时候内容改变了的话</li>
</ul>
<h4 id="浏览器事件注意事项："><a href="#浏览器事件注意事项：" class="headerlink" title="浏览器事件注意事项："></a><strong>浏览器事件注意事项：</strong></h4><hr>
<ul>
<li>1.以后我们不要把事件写在标签上,而使用<code>js</code>方式操作</li>
<li>2.js方式操作的话：<ul>
<li>非<code>IE</code>浏览器第一个对象就会传入<code>event</code>事件源对象</li>
<li>IE浏览器第一个对象就不会传入<code>event</code>事件源对象（<code>event = event||window.event</code>;）</li>
<li>非<code>IE</code>浏览器的事件源属性是<code>target</code>属性（<code>event.target = event.target||event.srcElement</code>;）</li>
<li><code>IE</code>浏6览器的事件源属性是<code>srcElement</code>属性</li>
</ul>
</li>
<li>3.事件冒泡机制</li>
<li>4.案例</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><hr>
<ul>
<li>以上是一些很基础的理论，笔记经验终究是别人的，看完了还是会忘记的，要转化成自己的东西，还要靠你不断实践。</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-7848f738f43affba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="学编程最佳实践"></p>
<ul>
<li><code>JavaScript</code>读书路线</li>
</ul>
<p><img src="https://github.com/phodal/developer/raw/master/images/js.gif" alt="JavaScript读书路线--from phodal"></p>
<h3 id="js一些资料推荐"><a href="#js一些资料推荐" class="headerlink" title="js一些资料推荐"></a>js一些资料推荐</h3><hr>
<ul>
<li>视频<ul>
<li><a href="http://edu.51cto.com/course/course_id-166-page-1.html" target="_blank" rel="external">Javascript第一季初级视频教程【李炎恢老师】</a></li>
<li><a href="http://www.zhinengshe.com/video.html" target="_blank" rel="external">JavaScript视频教程 | 智能社</a></li>
</ul>
</li>
<li>了解<code>web</code>开发知识体系<ul>
<li><a href="https://github.com/phodal/growth" target="_blank" rel="external">Growth - 陪你成为顶尖开发者</a></li>
</ul>
</li>
</ul>
<h3 id="附录一份大神总结的关于js的导图"><a href="#附录一份大神总结的关于js的导图" class="headerlink" title="附录一份大神总结的关于js的导图"></a>附录一份大神总结的关于js的导图</h3><hr>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-3a584567c41f737d.gif?imageMogr2/auto-orient/strip" alt="DOM基本操作"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-7de04acbf81543fc.gif?imageMogr2/auto-orient/strip" alt="javascript函数基础"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-5737bc8360e9e8d3.gif?imageMogr2/auto-orient/strip" alt="JavaScript数据类型"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-44d4ba1c8f6d48a6.gif?imageMogr2/auto-orient/strip" alt="window对象"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-05b7f79120cc6150.gif?imageMogr2/auto-orient/strip" alt="javascript变量"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-1b25cf62140a30fb.gif?imageMogr2/auto-orient/strip" alt="JavaScript字符串函数"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-30e2e0981d225fd4.gif?imageMogr2/auto-orient/strip" alt="JavaScript正则表达式"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-8bdb24d940eceeea.gif?imageMogr2/auto-orient/strip" alt="JavaScript流程控制"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-caa897f33ef0e47d.gif?imageMogr2/auto-orient/strip" alt="JavaScript运算符"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-eb23ab7b14608e83.gif?imageMogr2/auto-orient/strip" alt="JavaScript数组"></p>
<ul>
<li><a href="https://github.com/poetries/poetries.github.io/blob/dev/source/_posts/javascript%E7%AC%94%E8%AE%B0%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%E7%AF%87.md" target="_blank" rel="external">本文mardown原文件–欢迎转载</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;转载请声明出处 &lt;a href=&quot;http://blog.poetries.top/2016/09/24/javascript%E7%AC%94%E8%AE%B0%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%E7%AF%87/#more&quot;&gt;博客原文&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;随手翻阅以前的学习笔记，顺便整理一下放在这里，方便自己复习，也希望你有也有帮助吧&lt;/p&gt;
&lt;h3 id=&quot;第一课时-入门基础&quot;&gt;&lt;a href=&quot;#第一课时-入门基础&quot; class=&quot;headerlink&quot; title=&quot;第一课时 入门基础&quot;&gt;&lt;/a&gt;第一课时 入门基础&lt;/h3&gt;&lt;hr&gt;
&lt;h4 id=&quot;知识点：&quot;&gt;&lt;a href=&quot;#知识点：&quot; class=&quot;headerlink&quot; title=&quot;知识点：&quot;&gt;&lt;/a&gt;&lt;strong&gt;知识点&lt;/strong&gt;：&lt;/h4&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;操作系统就是个应用程序&lt;/li&gt;
&lt;li&gt;只要是应用程序都要占用物理内存&lt;/li&gt;
&lt;li&gt;浏览器本身也是一个应用程序&lt;/li&gt;
&lt;li&gt;浏览器本身只懂得解析&lt;code&gt;HTML&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;调用浏览器这个应用程序的一个功能绘制
    
    </summary>
    
      <category term="Front-End" scheme="http://www.poetries.top/categories/Front-End/"/>
    
    
      <category term="Javascript" scheme="http://www.poetries.top/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>DOM编程之API学习总结篇</title>
    <link href="http://www.poetries.top/2016/09/22/DOM%E7%BC%96%E7%A8%8B%E4%B9%8BAPI%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AF%87/"/>
    <id>http://www.poetries.top/2016/09/22/DOM编程之API学习总结篇/</id>
    <published>2016-09-22T09:10:43.000Z</published>
    <updated>2016-09-27T15:41:22.575Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>原文 <a href="http://blog.poetries.top/2016/09/22/DOM%E7%BC%96%E7%A8%8B%E4%B9%8BAPI%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AF%87/" target="_blank" rel="external">链接</a></p>
</blockquote>
<h3 id="一、基本类型介绍"><a href="#一、基本类型介绍" class="headerlink" title="一、基本类型介绍"></a>一、基本类型介绍</h3><hr>
<h4 id="1-1-Node类型"><a href="#1-1-Node类型" class="headerlink" title="1.1 Node类型"></a>1.1 Node类型</h4><hr>
<ul>
<li><code>DOM1</code>级定义了一个<code>Node</code>接口，该接口由<code>DOM</code>中所有节点类型实现。这个<code>Node</code>接口在<code>JS</code>中是作为<code>Node</code>类型实现的。在<code>IE9</code>以下版本无法访问到这个类型，<code>JS</code>中所有节点都继承自<code>Node</code>类型，都共享着相同的基本属性和方法</li>
<li><code>Node</code>有一个属性<code>nodeType</code>表示<code>Node</code>的类型，它是一个整数，其数值分别表示相应的<code>Node</code>类型</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-8a0893521cfc83f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Node类型"><br><a id="more"></a></p>
<ul>
<li>假设我们要判断一个<code>Node</code>是不是元素，我们可以这样判断</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(someNode.nodeType == <span class="number">1</span>)&#123;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"Node is a element"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这些<code>Node</code>类型中，我们最常用的就是<code>element</code>，<code>text</code>，<code>attribute</code>，<code>comment</code>，<code>document</code>，<code>document_fragment</code>这几种类型</li>
</ul>
<h5 id="1-2-Element类型"><a href="#1-2-Element类型" class="headerlink" title="1.2 Element类型"></a>1.2 Element类型</h5><hr>
<ul>
<li><code>Element</code>提供了对元素标签名，子节点和特性的访问，我们常用<code>HTML</code>元素比如<code>div</code>，<code>span</code>，<code>a</code>等标签就是<code>element</code>中的一种。</li>
<li><p><strong><code>Element</code>有下面几条特性：</strong></p>
<ul>
<li><code>nodeType</code>为<code>1</code></li>
<li><code>nodeName</code>为元素标签名，<code>tagName</code>也是返回标签名</li>
<li><code>nodeValue</code>为<code>null</code></li>
<li><code>parentNode</code>可能是<code>Document</code>或<code>Element</code></li>
<li>子节点可能是 <code>Element</code>，<code>Text</code>，<code>Comment</code>，<code>Processing_Instruction</code>，<code>CDATASection</code> 或 <code>EntityReference</code></li>
</ul>
</li>
</ul>
<h5 id="1-3-Text类型"><a href="#1-3-Text类型" class="headerlink" title="1.3 Text类型"></a>1.3 Text类型</h5><hr>
<ul>
<li><code>Text</code>表示文本节点，它包含的是纯文本内容，不能包含<code>html</code>代码，但可以包含转义后的<code>html</code>代码。<code>Text</code>有下面的特性：<ul>
<li><code>nodeType</code>为<code>3</code></li>
<li><code>nodeName</code>为<code>#text</code></li>
<li><code>nodeValue</code>为文本内容</li>
<li><code>parentNode</code>是一个<code>Element</code></li>
<li>没有子节点</li>
</ul>
</li>
</ul>
<h5 id="1-4-Attr类型"><a href="#1-4-Attr类型" class="headerlink" title="1.4 Attr类型"></a>1.4 Attr类型</h5><hr>
<ul>
<li><code>Attr</code>类型表示元素的特性，相当于元素的<code>attributes</code>属性中的节点，它有下面的特性：<ul>
<li><code>nodeType</code>值为2</li>
<li><code>nodeName</code>是特性的名称</li>
<li><code>nodeValue</code>是特性的值</li>
<li><code>parentNode</code>为<code>null</code></li>
</ul>
</li>
</ul>
<h5 id="1-5-Comment类型"><a href="#1-5-Comment类型" class="headerlink" title="1.5 Comment类型"></a>1.5 Comment类型</h5><hr>
<ul>
<li><code>Comment</code>表示<code>HTML</code>文档中的注释，它有下面的几种特征：<ul>
<li><code>nodeType</code>为8</li>
<li><code>nodeName</code>为<code>#comment</code></li>
<li><code>nodeValue</code>为注释的内容</li>
<li><code>parentNode</code>可能是<code>Document</code>或<code>Element</code></li>
<li>没有子节点</li>
</ul>
</li>
</ul>
<h5 id="1-6-Document"><a href="#1-6-Document" class="headerlink" title="1.6 Document"></a>1.6 Document</h5><hr>
<ul>
<li><code>Document</code>表示文档，在浏览器中，<code>document</code>对象是<code>HTMLDocument</code>的一个实例，表示整个页面，它同时也是<code>window</code>对象的一个属性。<code>Document</code>有下面的特性：<ul>
<li><code>nodeType</code>为<code>9</code></li>
<li><code>nodeName</code>为<code>#document</code></li>
<li><code>nodeValue</code>为 <code>null</code></li>
<li><code>parentNode</code>为 <code>null</code></li>
<li>子节点可能是一个<code>DocumentType</code>或<code>Element</code></li>
</ul>
</li>
</ul>
<h5 id="1-7-DocumentFragment类型"><a href="#1-7-DocumentFragment类型" class="headerlink" title="1.7 DocumentFragment类型"></a>1.7 DocumentFragment类型</h5><hr>
<ul>
<li><p><code>DocumentFragment</code>是所有节点中唯一一个没有对应标记的类型，它表示一种轻量级的文档，可能当作一个临时的仓库用来保存可能会添加到文档中的节点。<code>DocumentFragment</code>有下面的特性：</p>
<ul>
<li><code>nodeType</code>为<code>11</code></li>
<li><code>nodeName</code>为<code>#document-fragment</code></li>
<li><code>nodeValue</code>为<code>null</code></li>
<li><code>parentNode</code>为<code>null</code></li>
</ul>
</li>
<li><p>我们简单地介绍了几种常见的<code>Node</code>类型，要记住，<code>HTML</code>中的节点并不只是包括元素节点，它还包括文本节点，注释节点等等。在这里我们只是简单地说明了几种常见的节点.</p>
</li>
</ul>
<h3 id="二、-DOM提供的几个属性"><a href="#二、-DOM提供的几个属性" class="headerlink" title="二、 DOM提供的几个属性"></a>二、 DOM提供的几个属性</h3><hr>
<h4 id="2-1-childNodes属性"><a href="#2-1-childNodes属性" class="headerlink" title="2.1 childNodes属性"></a>2.1 childNodes属性</h4><hr>
<ul>
<li>在一棵节点树上，<code>childNodes</code>属性可以用来获取任何一个元素的所有子节点，它是一个包含这个元素全部子元素的数组</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">element.childNodes</div></pre></td></tr></table></figure>
<h4 id="2-2-nodeType属性"><a href="#2-2-nodeType属性" class="headerlink" title="2.2 nodeType属性"></a>2.2 nodeType属性</h4><hr>
<ul>
<li>节点之间的关系构成了节点层次，<code>html</code> 页面的可以画出一个以<code>html</code>标签为根节点的树形结构<br><code>DOM</code> 会把文档看作是一棵树，同时定义了很多方法来操作这棵数中的每一个元素（节点）</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello world!!!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="https://segmentfault.com/img/remote/1460000006899100" alt=""></p>
<ul>
<li>每一个节点都有<code>nodeType</code>属性</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node.nodeType</div></pre></td></tr></table></figure>
<ul>
<li><code>nodeType</code>属性总共有12中可能取值，但其中仅有3种有实用价值<ul>
<li>元素节点的<code>nodeType</code>属性值是1</li>
<li>属性节点的<code>nodeType</code>属性值是2</li>
<li>文本节点的<code>nodeType</code>属性值是3</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">description.firstChild.nodeValue = text;</div></pre></td></tr></table></figure>
<h4 id="2-3-nodeValue属性"><a href="#2-3-nodeValue属性" class="headerlink" title="2.3 nodeValue属性"></a>2.3 nodeValue属性</h4><hr>
<ul>
<li><code>nodeValue</code>属性<ul>
<li>如果想改变一个文本节点的值，那就使用<code>DOM</code>提供的<code>nodeValue</code>,它用来得到一个节点的值 <code>node.nodeValue</code> </li>
<li>需要注意：<code>nodeValue</code>属性获取对象的值时，得到的并不是包含在这个段落里的文本</li>
<li>nodeValue属性不仅可以用来检测节点的值，还可以设置节点的值</li>
</ul>
</li>
</ul>
<h4 id="2-4-firstChild和lastChild属性"><a href="#2-4-firstChild和lastChild属性" class="headerlink" title="2.4 firstChild和lastChild属性"></a>2.4 firstChild和lastChild属性</h4><hr>
<ul>
<li>数组元素<code>childNodes[0]</code>有个更直观的同义词。无论如何，只要访问<code>childNodes</code>数组的第一个元素，都可以把它写成<code>firstChild</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node.firstChild</div></pre></td></tr></table></figure>
<p>与下面等价</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node.childNodes[<span class="number">0</span>]</div></pre></td></tr></table></figure>
<ul>
<li><code>DOM</code>还提供了一个与之对应的<code>lastChild</code>属性</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node.lastChild</div></pre></td></tr></table></figure>
<h3 id="三、节点创建型API"><a href="#三、节点创建型API" class="headerlink" title="三、节点创建型API"></a>三、节点创建型API</h3><hr>
<ul>
<li>在这里，我将常用的<code>DOM</code>操作<code>api</code>进行分类，首先要介绍的是创建型的<code>api</code>。这一类型的<code>api</code>，简而言之就是用来创建节点的</li>
</ul>
<h4 id="3-1-createElement"><a href="#3-1-createElement" class="headerlink" title="3.1 createElement"></a>3.1 createElement</h4><hr>
<ul>
<li><code>createElement</code>通过传入指定的一个标签名来创建一个元素，如果传入的标签名是一个未知的，则会创建一个自定义的标签，注意：<code>IE8</code>以下浏览器不支持自定义标签</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</div></pre></td></tr></table></figure>
<ul>
<li>使用<code>createElement</code>要注意：通过<code>createElement</code>创建的元素并不属于<code>html</code>文档，它只是创建出来，并未添加到<code>html</code>文档中，要调用<code>appendChild</code>或<code>insertBefore</code>等方法将其添加到<code>HTML</code>文档树中</li>
</ul>
<h4 id="3-2-createTextNode"><a href="#3-2-createTextNode" class="headerlink" title="3.2 createTextNode"></a>3.2 createTextNode</h4><hr>
<ul>
<li><code>createTextNode</code>用来创建一个文本节点，用法如下</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> textNode = <span class="built_in">document</span>.createTextNode(<span class="string">"一个TextNode"</span>);</div></pre></td></tr></table></figure>
<ul>
<li><code>createTextNode</code>接收一个参数，这个参数就是文本节点中的文本，和<code>createElement</code>一样，创建后的文本节点也只是独立的一个节点，同样需要<code>appendChild</code>将其添加到<code>HTML</code>文档树中</li>
</ul>
<h4 id="3-3-cloneNode"><a href="#3-3-cloneNode" class="headerlink" title="3.3 cloneNode"></a>3.3 cloneNode</h4><ul>
<li><code>cloneNode</code>是用来返回调用方法的节点的一个副本，它接收一个<code>bool</code>参数，用来表示是否复制子元素，使用如下：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> parent = <span class="built_in">document</span>.getElementById(<span class="string">"parentElement"</span>); </div><div class="line"><span class="keyword">var</span> parent2 = parent.cloneNode(<span class="literal">true</span>);<span class="comment">// 传入true</span></div><div class="line">parent2.id = <span class="string">"parent2"</span>;</div></pre></td></tr></table></figure>
<ul>
<li>这段代码通过<code>cloneNode</code>复制了一份<code>parent</code>元素，其中<code>cloneNode</code>的参数为<code>true</code>，表示<code>parent</code>的子节点也被复制，如果传入<code>false</code>，则表示只复制了<code>parent</code>节点</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">    我是父元素的文本</div><div class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></div><div class="line">        我是子元素</div><div class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btnCopy"</span>&gt;</span>复制<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line">var parent = document.getElementById("parent");</div><div class="line">document.getElementById("btnCopy").onclick = function()&#123;</div><div class="line">	var parent2 = parent.cloneNode(true);</div><div class="line">	parent2.id = "parent2";</div><div class="line">	document.body.appendChild(parent2);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>这段代码很简单，主要是绑定<code>button</code>事件，事件内容是复制了一个<code>parent</code>，修改其<code>id</code>，然后添加到文档中</p>
</li>
<li><p><strong>这里有几点要注意：</strong></p>
<ul>
<li>和<code>createElement</code>一样，<code>cloneNode</code>创建的节点只是游离有<code>html</code>文档外的节点，要调用<code>appendChild</code>方法才能添加到文档树中</li>
<li>如果复制的元素有<code>id</code>，则其副本同样会包含该<code>id</code>，由于<code>id</code>具有唯一性，所以在复制节点后必须要修改其id</li>
<li>调用接收的<code>bool</code>参数最好传入，如果不传入该参数，不同浏览器对其默认值的处理可能不同</li>
</ul>
</li>
<li><p>除此之外，我们还有一个需要注意的点：</p>
<ul>
<li>如果被复制的节点绑定了事件，则副本也会跟着绑定该事件吗？这里要分情况讨论：<ul>
<li>如果是通过<code>addEventListener</code>或者比如<code>onclick</code>进行绑定事件，则副本节点不会绑定该事件</li>
<li>如果是内联方式绑定比如</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"showParent()"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>这样的话，副本节点同样会触发事件</li>
</ul>
<h4 id="3-4-createDocumentFragment"><a href="#3-4-createDocumentFragment" class="headerlink" title="3.4 createDocumentFragment"></a>3.4 createDocumentFragment</h4><hr>
<ul>
<li><p><code>createDocumentFragment</code>方法用来创建一个<code>DocumentFragment</code>。在前面我们说到<code>DocumentFragment</code>表示一种轻量级的文档，它的作用主要是存储临时的节点用来准备添加到文档中</p>
</li>
<li><p><code>createDocumentFragment</code>方法主要是用于添加大量节点到文档中时会使用到。假设要循环一组数据，然后创建多个节点添加到文档中</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;ul id=<span class="string">"list"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></div><div class="line">&lt;input type=<span class="string">"button"</span> value=<span class="string">"添加多项"</span> id=<span class="string">"btnAdd"</span> /&gt;</div><div class="line"></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"btnAdd"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">"list"</span>);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="number">100</span>; i++)&#123;</div><div class="line">		<span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</div><div class="line">		li.textContent = i;</div><div class="line">		list.appendChild(li);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>这段代码将按钮绑定了一个事件，这个事件创建了100个<code>li</code>节点，然后依次将其添加<code>HTML</code>文档中。这样做有一个缺点：每次一创建一个新的元素，然后添加到文档树中，这个过程会造成浏览器的回流。所谓回流简单说就是指元素大小和位置会被重新计算，如果添加的元素太多，会造成性能问题。这个时候，就是使用<code>createDocumentFragment了</code></p>
</li>
<li><p><code>DocumentFragment</code>不是文档树的一部分，它是保存在内存中的，所以不会造成回流问题。我们修改上面的代码如下</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"btnAdd"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">"list"</span>);	</div><div class="line">	<span class="keyword">var</span> fragment = <span class="built_in">document</span>.createDocumentFragment();</div><div class="line"></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="number">100</span>; i++)&#123;</div><div class="line">	  <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</div><div class="line">		li.textContent = i;</div><div class="line">		fragment.appendChild(li);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	list.appendChild(fragment);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>优化后的代码主要是创建了一个<code>fragment</code>，每次生成的<code>li</code>节点先添加到<code>fragment</code>，最后一次性添加到<code>list</code></li>
</ul>
<h4 id="3-5-创建型API总结"><a href="#3-5-创建型API总结" class="headerlink" title="3.5 创建型API总结"></a>3.5 创建型API总结</h4><hr>
<ul>
<li><p>创建型<code>api</code>主要包括<code>createElement</code>，<code>createTextNode</code>，<code>cloneNode</code>和<code>createDocumentFragment</code>四个方法，需要注意下面几点：</p>
<ul>
<li>它们创建的节点只是一个孤立的节点，要通过<code>appendChild</code>添加到文档中</li>
<li><code>cloneNode</code>要注意如果被复制的节点是否包含子节点以及事件绑定等问题</li>
<li>使用<code>createDocumentFragment</code>来解决添加大量节点时的性能问题</li>
</ul>
</li>
</ul>
<h3 id="四、页面修改型API"><a href="#四、页面修改型API" class="headerlink" title="四、页面修改型API"></a>四、页面修改型API</h3><hr>
<ul>
<li>前面我们提到创建型<code>api</code>，它们只是创建节点，并没有真正修改到页面内容，而是要调用<code>appendChild</code>来将其添加到文档树中。我在这里将这类会修改到页面内容归为一类。<br>修改页面内容的<code>api</code>主要包括：<code>appendChild</code>，<code>insertBefore</code>，<code>removeChild</code>，<code>replaceChild</code></li>
</ul>
<h4 id="4-1-appendChild"><a href="#4-1-appendChild" class="headerlink" title="4.1 appendChild"></a>4.1 appendChild</h4><hr>
<ul>
<li><code>appendChild</code>我们在前面已经用到多次，就是将指定的节点添加到调用该方法的节点的子元素的末尾。调用方法如下：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">parent.appendChild(child);</div></pre></td></tr></table></figure>
<ul>
<li><p><code>child</code>节点将会作为<code>parent</code>节点的最后一个子节点</p>
</li>
<li><p><code>appendChild</code>这个方法很简单，但是还有有一点需要注意：如果被添加的节点是一个页面中存在的节点，则执行后这个节点将会添加到指定位置，其原本所在的位置将移除该节点，也就是说不会同时存在两个该节点在页面上，相当于把这个节点移动到另一个地方</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"child"</span>&gt;</span></div><div class="line">    要被添加的节点</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">    要移动的位置</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>		</div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"btnMove"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"移动节点"</span> /&gt;</span></div><div class="line"></div><div class="line">document.getElementById("btnMove").onclick = function()&#123;</div><div class="line">	var child = document.getElementById("child");</div><div class="line">	document.getElementById("parent").appendChild(child);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这段代码主要是获取页面上的<code>child</code>节点，然后添加到指定位置，可以看到原本的<code>child</code>节点被移动到<code>parent</code>中了。<br>这里还有一个要注意的点：如果<code>child</code>绑定了事件，被移动时，它依然绑定着该事件</li>
</ul>
<h4 id="4-2-insertBefore"><a href="#4-2-insertBefore" class="headerlink" title="4.2 insertBefore"></a>4.2 insertBefore</h4><hr>
<ul>
<li><code>insertBefore</code>用来添加一个节点到一个参照节点之前，用法如下</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">parentNode.insertBefore(newNode,refNode);</div></pre></td></tr></table></figure>
<ul>
<li><code>parentNode</code>表示新节点被添加后的父节点</li>
<li><code>newNode</code>表示要添加的节点</li>
<li><code>refNode</code>表示参照节点，新节点会添加到这个节点之前</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">    父节点</div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"child"</span>&gt;</span>				</div><div class="line">        子元素</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"insertNode"</span> <span class="attr">value</span>=<span class="string">"插入节点"</span> /&gt;</span></div><div class="line"></div><div class="line">var parent = document.getElementById("parent");</div><div class="line">var child = document.getElementById("child");</div><div class="line">document.getElementById("insertNode").onclick = function()&#123;</div><div class="line">	var newNode = document.createElement("div");</div><div class="line">	newNode.textContent = "新节点"</div><div class="line">	parent.insertBefore(newNode,child);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这段代码创建了一个新节点，然后添加到<code>child</code>节点之前</li>
<li><p>和<code>appendChild</code>一样，如果插入的节点是页面上的节点，则会移动该节点到指定位置，并且保留其绑定的事件。</p>
</li>
<li><p><strong>关于第二个参数参照节点还有几个注意的地方：</strong></p>
<ul>
<li><code>refNode</code>是必传的，如果不传该参数会报错</li>
<li>如果<code>refNode</code>是<code>undefined</code>或<code>null</code>，则<code>insertBefore</code>会将节点添加到子元素的末尾</li>
</ul>
</li>
</ul>
<h4 id="4-3-removeChild"><a href="#4-3-removeChild" class="headerlink" title="4.3 removeChild"></a>4.3 removeChild</h4><hr>
<ul>
<li><code>removeChild</code>顾名思义，就是删除指定的子节点并返回，用法如下</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> deletedChild = parent.removeChild(node);</div></pre></td></tr></table></figure>
<ul>
<li><p><code>deletedChild</code>指向被删除节点的引用，它等于<code>node</code>，被删除的节点仍然存在于内存中，可以对其进行下一步操作。</p>
</li>
<li><p><strong>注意</strong>：如果被删除的节点不是其子节点，则程序将会报错。我们可以通过下面的方式来确保可以删除：</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(node.parentNode)&#123;</div><div class="line">    node.parentNode.removeChild(node);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>通过节点自己获取节点的父节点，然后将自身删除</li>
</ul>
<h4 id="4-4-replaceChild"><a href="#4-4-replaceChild" class="headerlink" title="4.4 replaceChild"></a>4.4 replaceChild</h4><hr>
<ul>
<li><code>replaceChild</code>用于使用一个节点替换另一个节点，用法如下</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">parent.replaceChild(newChild,oldChild);</div></pre></td></tr></table></figure>
<ul>
<li><code>newChild</code>是替换的节点，可以是新的节点，也可以是页面上的节点，如果是页面上的节点，则其将被转移到新的位置</li>
<li><code>oldChild</code>是被替换的节点</li>
</ul>
<h4 id="4-5-页面修改型API总结"><a href="#4-5-页面修改型API总结" class="headerlink" title="4.5 页面修改型API总结"></a>4.5 页面修改型API总结</h4><hr>
<ul>
<li>页面修改型api主要是这四个接口，<strong>要注意几个特点</strong>：<ul>
<li>不管是新增还是替换节点，如果新增或替换的节点是原本存在页面上的，则其原来位置的节点将被移除，也就是说同一个节点不能存在于页面的多个位置</li>
<li>节点本身绑定的事件会不会消失，会一直保留着</li>
</ul>
</li>
</ul>
<h3 id="五、节点查询型API"><a href="#五、节点查询型API" class="headerlink" title="五、节点查询型API"></a>五、节点查询型API</h3><hr>
<ul>
<li>节点查询型<code>API</code>也是非常常用的</li>
</ul>
<h4 id="5-1-document-getElementById"><a href="#5-1-document-getElementById" class="headerlink" title="5.1 document.getElementById"></a>5.1 document.getElementById</h4><hr>
<ul>
<li><p>这个接口很简单，根据元素<code>id</code>返回元素，返回值是<code>Element</code>类型，如果不存在该元素，则返回<code>null</code></p>
</li>
<li><p><strong>使用这个接口有几点要注意：</strong></p>
<ul>
<li>元素的<code>Id</code>是大小写敏感的，一定要写对元素的<code>id</code></li>
<li><code>HTML</code>文档中可能存在多个<code>id</code>相同的元素，则返回第一个元素</li>
<li>只从文档中进行搜索元素，如果创建了一个元素并指定<code>id</code>，但并没有添加到文档中，则这个元素是不会被查找到的</li>
</ul>
</li>
</ul>
<h4 id="5-2-document-getElementsByTagName"><a href="#5-2-document-getElementsByTagName" class="headerlink" title="5.2 document.getElementsByTagName"></a>5.2 document.getElementsByTagName</h4><hr>
<ul>
<li>这个接口根据元素标签名获取元素，返回一个即时的<code>HTMLCollection</code>类型，什么是即时的<code>HTMLCollection</code>类型呢？</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		</div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"显示数量"</span> <span class="attr">id</span>=<span class="string">"btnShowCount"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"新增div"</span> <span class="attr">id</span>=<span class="string">"btnAddDiv"</span>/&gt;</span>	</div><div class="line"></div><div class="line">var divList = document.getElementsByTagName("div");</div><div class="line">document.getElementById("btnAddDiv").onclick = function()&#123;</div><div class="line">	var div = document.createElement("div");</div><div class="line">	div.textContent ="div" + (divList.length+1);</div><div class="line">	document.body.appendChild(div);</div><div class="line">&#125;</div><div class="line">	</div><div class="line">document.getElementById("btnShowCount").onclick = function()&#123;</div><div class="line">        alert(divList.length);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>这段代码中有两个按钮，一个按钮是显示<code>HTMLCollection</code>元素的个数，另一个按钮可以新增一个div标签到文档中。前面提到<code>HTMLCollcetion</code>元素是即时的表示该集合是随时变化的，也就是是文档中有几个<code>div</code>，它会随时进行变化，当我们新增一个<code>div</code>后，再访问<code>HTMLCollection</code>时，就会包含这个新增的<code>div</code></p>
</li>
<li><p><strong>使用document.getElementsByTagName这个方法有几点要注意</strong>：</p>
<ul>
<li>如果要对<code>HTMLCollection</code>集合进行循环操作，最好将其长度缓存起来，因为每次循环都会去计算长度，暂时缓存起来可以提高效率</li>
<li>如果没有存在指定的标签，该接口返回的不<code>是null</code>，而是一个空的<code>HTMLCollection</code></li>
<li><code>“*”</code>表示所有标签</li>
</ul>
</li>
</ul>
<h4 id="5-3-document-getElementsByName"><a href="#5-3-document-getElementsByName" class="headerlink" title="5.3 document.getElementsByName"></a>5.3 document.getElementsByName</h4><hr>
<ul>
<li><p><code>getElementsByName</code>主要是通过指定的<code>name</code>属性来获取元素，它返回一个即时的<code>NodeList</code>对象。一般用于获取表单元素的·name·属性</p>
</li>
<li><p><strong>使用这个接口主要要注意几点：</strong></p>
<ul>
<li>返回对象是一个即时的<code>NodeList</code>，它是随时变化的</li>
<li>在<code>HTML</code>元素中，并不是所有元素都有<code>name</code>属性，比如<code>div</code>是没有<code>name</code>属性的，但是如果强制设置<code>div的</code>name`属性，它也是可以被查找到的</li>
<li>在<code>IE</code>中，如果<code>id</code>设置成某个值，然后传入<code>getElementsByName</code>的参数值和<code>id</code>值一样，则这个元素是会被找到的，所以最好不好设置同样的值给<code>id</code>和<code>name</code></li>
</ul>
</li>
</ul>
<h4 id="5-4-document-getElementsByClassName"><a href="#5-4-document-getElementsByClassName" class="headerlink" title="5.4 document.getElementsByClassName"></a>5.4 document.getElementsByClassName</h4><hr>
<ul>
<li>这个<code>API</code>是根据元素的<code>class</code>返回一个即时的<code>HTMLCollection</code>，用法如下</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> elements = <span class="built_in">document</span>.getElementsByClassName(names);</div></pre></td></tr></table></figure>
<ul>
<li><strong>这个接口有下面几点要注意：</strong><ul>
<li>返回结果是一个即时的<code>HTMLCollection</code>，会随时根据文档结构变化</li>
<li><code>IE9</code>以下浏览器不支持</li>
<li>如果要获取<code>2</code>个以上<code>classname</code>，可传入多个<code>classname</code>，每个用空格相隔，例如</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> elements = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"test1 test2"</span>);</div></pre></td></tr></table></figure>
<h4 id="5-5-document-querySelector和document-querySelectorAll"><a href="#5-5-document-querySelector和document-querySelectorAll" class="headerlink" title="5.5 document.querySelector和document.querySelectorAll"></a>5.5 document.querySelector和document.querySelectorAll</h4><hr>
<ul>
<li><p>这两个<code>api</code>很相似，通过<code>css</code>选择器来查找元素，注意选择器要符合<code>CSS</code>选择器的规则</p>
</li>
<li><p>首先来介绍一下<code>document.querySelector</code></p>
</li>
<li><code>document.querySelector</code>返回第一个匹配的元素，如果没有匹配的元素，则返回<code>null</code>。</li>
<li><strong>注意</strong>，由于返回的是第一个匹配的元素，这个<code>api</code>使用的深度优先搜索来获取元素</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span>第三级的span<span class="tag">&lt;/<span class="name">span</span>&gt;</span>	</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span>			</div><div class="line">    同级的第二个div</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btnGet"</span> <span class="attr">value</span>=<span class="string">"获取test元素"</span> /&gt;</span></div><div class="line"></div><div class="line">document.getElementById("btnGet").addEventListener("click",function()&#123;</div><div class="line">	var element = document.querySelector(".test");</div><div class="line">	alert(element.textContent);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ul>
<li><p>这个例子很简单，就是两个<code>class</code>都包<code>含“test”</code>的元素，一个在文档树的前面，但是它在第三级，另一个在文档树的后面，但它在第一级，通过<code>querySelector</code>获取元素时，它通过深度优先搜索，拿到文档树前面的第三级的元素</p>
</li>
<li><p><code>document.querySelectorAll</code>的不同之处在于它返回的是所有匹配的元素，而且可以匹配多个选择符</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span></div><div class="line">    class为test</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span></div><div class="line">    id为test</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"btnShow"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"显示内容"</span> /&gt;</span></div><div class="line"></div><div class="line">document.getElementById("btnShow").addEventListener("click",function()&#123;</div><div class="line">	var elements = document.querySelectorAll("#test,.test");	</div><div class="line">	for(var i = 0,length = elements.length;i<span class="tag">&lt;<span class="name">length;i++)&#123;</span></span></div><div class="line">		<span class="attr">alert</span>(<span class="attr">elements</span>[<span class="attr">i</span>]<span class="attr">.textContent</span>);</div><div class="line">	&#125;	</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ul>
<li><p>这段代码通过<code>querySelectorAll</code>，使用<code>id</code>选择器和<code>class</code>选择器选择了两个元素，并依次输出其内容。要注意两点：</p>
<ul>
<li><code>querySelectorAll</code>也是通过深度优先搜索，搜索的元素顺序和选择器的顺序无关</li>
<li>返回的是一个非即时的<code>NodeList</code>，也就是说结果不会随着文档树的变化而变化</li>
</ul>
</li>
<li><p><strong>兼容性问题</strong>：<code>querySelector</code>和<code>querySelectorAll</code>在<code>ie8</code>以下的浏览器不支持</p>
</li>
<li><p><strong>小结</strong>：</p>
<ul>
<li><code>document.getElementById</code>返回一个对象</li>
<li><code>document.getElementsByName</code>和<code>document.getElementsByClasName</code>返回一个对象数组</li>
</ul>
</li>
</ul>
<h3 id="六、节点关系型API"><a href="#六、节点关系型API" class="headerlink" title="六、节点关系型API"></a>六、节点关系型API</h3><hr>
<p><img src="https://segmentfault.com/img/remote/1460000006899101" alt=""></p>
<ul>
<li>在<code>html</code>文档中的每个节点之间的关系都可以看成是家谱关系，包含父子关系，兄弟关系等等</li>
</ul>
<h4 id="6-1-父关系型API"><a href="#6-1-父关系型API" class="headerlink" title="6.1 父关系型API"></a>6.1 父关系型API</h4><hr>
<ul>
<li><code>parentNode</code>：每个节点都有一个<code>parentNode</code>属性，它表示元素的父节点。<code>Element</code>的父节点可能是<code>Element</code>，<code>Document</code>或<code>DocumentFragment</code></li>
<li><code>parentElement</code>：返回元素的父元素节点，与<code>parentNode</code>的区别在于，其父节点必须是一个<code>Element</code>，如果不是，则返回<code>null</code></li>
</ul>
<h4 id="6-2-兄弟关系型API"><a href="#6-2-兄弟关系型API" class="headerlink" title="6.2 兄弟关系型API"></a>6.2 兄弟关系型API</h4><hr>
<ul>
<li><code>previousSibling</code>：节点的前一个节点，如果该节点是第一个节点，则为<code>null</code>。注意有可能拿到的节点是文本节点或注释节点，与预期的不符，要进行处理一下</li>
<li><p><code>previousElementSibling</code>：返回前一个元素节点，前一个节点必须是<code>Element</code>，注意<code>IE9</code>以下浏览器不支持</p>
</li>
<li><p><code>nextSibling</code> <code>previousSibling</code> 存在兼容性问题</p>
</li>
<li><p><code>nextElementSibling</code> <code>previousElementSibling</code> 推荐使用</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    <span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">'ul1'</span>);</div><div class="line"></div><div class="line">    <span class="keyword">var</span> firstEle = oUl.firstElementChild;</div><div class="line">    <span class="keyword">var</span> lastEle = oUl.lastElementChild;</div><div class="line"></div><div class="line">    firstEle.nextElementSibling.style.background = <span class="string">'red'</span>;</div><div class="line">    lastEle.previousElementSibling.style.background = <span class="string">'green'</span>;</div><div class="line"></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p><img src="https://segmentfault.com/img/remote/1460000006899104" alt=""></p>
<ul>
<li><code>nextSibling</code>：节点的后一个节点，如果该节点是最后一个节点，则为<code>null</code>。注意有可能拿到的节点是文本节点，与预期的不符，要进行处理一下</li>
<li><code>nextElementSibling</code>：返回后一个元素节点，后一个节点必须是<code>Element</code>，注意<code>IE9</code>以下浏览器不支持</li>
</ul>
<h4 id="6-3-子关系型API"><a href="#6-3-子关系型API" class="headerlink" title="6.3 子关系型API"></a>6.3 子关系型API</h4><hr>
<ul>
<li><code>childNodes</code>：<ul>
<li>返回一个即时的<code>NodeList</code>，表示元素的子节点列表，子节点可能会包含文本节点，注释节点等。<code>childNodes</code>子节点列表集合（只读属性 有兼容性问题 ）</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>11111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>22222<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3333<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>44444<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">'ul1'</span>);</div><div class="line">    <span class="built_in">console</span>.log(oUl.childNodes);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="https://segmentfault.com/img/remote/1460000006899102" alt=""></p>
<ul>
<li><p>从截图中可以看出 这段代码中<code>ul</code>的子节点有<code>9</code>个，这说明使用<code>childNodes</code>获取的节点包括了文本节点和元素节点</p>
</li>
<li><p><code>childNodes</code> 在低版本的<code>ie</code> 浏览器下获取的节点只包括元素节点，这就导致了兼容性问题</p>
</li>
<li>如何解决兼容性？？<ul>
<li>根据子节点的<code>nodeType</code>属性值判断</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;oUl.childNodes.length; i++) &#123;</div><div class="line"></div><div class="line">     <span class="keyword">if</span> ( oUl.childNodes[i].nodeType == <span class="number">1</span> ) &#123;</div><div class="line">        oUl.childNodes[i].style.background = <span class="string">'red'</span>;</div><div class="line">     &#125;</div><div class="line"></div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<ul>
<li><p><code>children</code>：</p>
<ul>
<li>一个即时的<code>HTMLCollection</code>，子节点都是<code>Element</code>，<code>IE9</code>以下浏览器不支持。<code>children</code>子节点列表集合（只读属性 推荐使用 ）</li>
</ul>
</li>
<li><p><code>children</code> 获取的子节点只包含元素节点</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;oUl.children.length; i++)&#123;</div><div class="line">    oUl.children[i].style.background = <span class="string">'red'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>firstNode</code>：第一个子节点</li>
<li><p><code>lastNode</code>：最后一个子节点</p>
</li>
<li><p><code>firstChild</code> （firstElementChild） <code>lastChild</code>(lastElementChild) 第一个子节点 最后一个子节点</p>
</li>
<li><p><code>firstChild</code> 、<code>lastChild</code> 和<code>childNodes</code>同样的存在兼容性问题，在低版本<code>ie</code>浏览器中只能获取到元素节点</p>
</li>
<li><p><code>firstElementChild</code>、 <code>lastElementChild</code> 获取第一个元素子节点，最后一个元素子节点 推荐使用</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">'ul1'</span>);</div><div class="line"></div><div class="line"><span class="comment">//    oUl.firstChild.style.background = 'red';//标准浏览器 报错</span></div><div class="line"><span class="comment">//    oUl.lastChild.style.background = 'red';//标准浏览器 报错</span></div><div class="line"></div><div class="line">oUl.firstElementChild.style.background = <span class="string">'red'</span>;</div><div class="line">oUl.lastElementChild.style.background = <span class="string">'red'</span>;</div></pre></td></tr></table></figure>
<p><img src="https://segmentfault.com/img/remote/1460000006899103" alt=""></p>
<ul>
<li><code>hasChildNodes</code>方法：可以用来判断是否包含子节点</li>
</ul>
<h3 id="七、元素属性型"><a href="#七、元素属性型" class="headerlink" title="七、元素属性型"></a>七、元素属性型</h3><hr>
<h4 id="7-1-setAttribute"><a href="#7-1-setAttribute" class="headerlink" title="7.1 setAttribute"></a>7.1 setAttribute</h4><hr>
<ul>
<li><code>setAttribute</code>：它允许我们对元素属性值做出修改与<code>getAttribute</code>一样<code>setAttribute</code>也能用于元素节点</li>
<li>通过<code>setAttribute</code>对文档做出修改后，在通过浏览器的查看源码选项看到的任然是改变之前的属性值，也就是说<code>setAttribue</code>做出的修改，不会反应到文档本身的源码里</li>
<li><code>setAttribute</code>优势在于可以修改文档中的任何一个属性</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">element.setAttribute(name, value);</div></pre></td></tr></table></figure>
<ul>
<li>其中<code>name</code>是特性名，<code>value</code>是特性值。如果元素不包含该特性，则会创建该特性并赋值。</li>
<li>如果元素本身包含指定的特性名为属性，则可以访问属性进行赋值，比如下面两条代码是等价</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">element.setAttribute(<span class="string">"id"</span>,<span class="string">"test"</span>);</div><div class="line"></div><div class="line">element.id = <span class="string">"test"</span>;</div></pre></td></tr></table></figure>
<ul>
<li><p><strong>非DOM的解决方案</strong></p>
<ul>
<li>其实不用<code>setAttribute</code>也可以改变元素的属性</li>
<li><code>setAttribute</code>方法是第一级<code>DOM</code>的组成部分，它可以设计任何元素节点的任意属性。在第1级<code>DOM</code>出现之前，你可以通过另外一种办法设置大部分元素的属性</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">element.value = <span class="string">"the new value"</span>;</div></pre></td></tr></table></figure>
<p>与下面语句等价</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">element.setAttribute(<span class="string">"value"</span>,<span class="string">"the new value"</span>);</div></pre></td></tr></table></figure>
<h4 id="7-2-getAttribute"><a href="#7-2-getAttribute" class="headerlink" title="7.2 getAttribute"></a>7.2 getAttribute</h4><hr>
<ul>
<li><code>getAttribute</code>返回指定的特性名相应的特性值，如果不存在，则返回<code>null</code>或空字符串。</li>
<li><code>getAttribute</code>不属性<code>doucment</code>对象，不能通过<code>document</code>对象调用，只能通过元素节点对象调用</li>
<li>例如可以与<code>getElementsByTagName</code>方法合用，获取每个<code>p</code>的<code>title</code>属性</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> paras = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"p"</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;para.lenght;i++)&#123;</div><div class="line">    alert(paras.getAttrtitube(<span class="string">"title"</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="八、网上的一张思维导图总结"><a href="#八、网上的一张思维导图总结" class="headerlink" title="八、网上的一张思维导图总结"></a>八、网上的一张思维导图总结</h3><hr>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-1893e82e8c49b23d.gif?imageMogr2/auto-orient/strip" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文 &lt;a href=&quot;http://blog.poetries.top/2016/09/22/DOM%E7%BC%96%E7%A8%8B%E4%B9%8BAPI%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AF%87/&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;一、基本类型介绍&quot;&gt;&lt;a href=&quot;#一、基本类型介绍&quot; class=&quot;headerlink&quot; title=&quot;一、基本类型介绍&quot;&gt;&lt;/a&gt;一、基本类型介绍&lt;/h3&gt;&lt;hr&gt;
&lt;h4 id=&quot;1-1-Node类型&quot;&gt;&lt;a href=&quot;#1-1-Node类型&quot; class=&quot;headerlink&quot; title=&quot;1.1 Node类型&quot;&gt;&lt;/a&gt;1.1 Node类型&lt;/h4&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DOM1&lt;/code&gt;级定义了一个&lt;code&gt;Node&lt;/code&gt;接口，该接口由&lt;code&gt;DOM&lt;/code&gt;中所有节点类型实现。这个&lt;code&gt;Node&lt;/code&gt;接口在&lt;code&gt;JS&lt;/code&gt;中是作为&lt;code&gt;Node&lt;/code&gt;类型实现的。在&lt;code&gt;IE9&lt;/code&gt;以下版本无法访问到这个类型，&lt;code&gt;JS&lt;/code&gt;中所有节点都继承自&lt;code&gt;Node&lt;/code&gt;类型，都共享着相同的基本属性和方法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Node&lt;/code&gt;有一个属性&lt;code&gt;nodeType&lt;/code&gt;表示&lt;code&gt;Node&lt;/code&gt;的类型，它是一个整数，其数值分别表示相应的&lt;code&gt;Node&lt;/code&gt;类型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1480597-8a0893521cfc83f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Node类型&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://www.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://www.poetries.top/tags/JavaScript/"/>
    
      <category term="DOM" scheme="http://www.poetries.top/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>Flex布局教程-实例篇[转]</title>
    <link href="http://www.poetries.top/2016/09/21/Flex%20%E5%B8%83%E5%B1%80%E6%95%99%E7%A8%8B-%E5%AE%9E%E4%BE%8B%E7%AF%87/"/>
    <id>http://www.poetries.top/2016/09/21/Flex 布局教程-实例篇/</id>
    <published>2016-09-21T14:20:08.000Z</published>
    <updated>2016-09-27T15:41:22.575Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071327.png" alt=""><br><a id="more"></a></p>
<h3 id="一、骰子的布局"><a href="#一、骰子的布局" class="headerlink" title="一、骰子的布局"></a>一、骰子的布局</h3><hr>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071329.png" alt=""></p>
<ul>
<li>如果不加说明，本节的HTML模板一律如下</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>上面代码中，<code>div</code>元素（代表骰子的一个面）是<code>Flex</code>容器，<code>span</code>元素（代表一个点）是<code>Flex</code>项目。如果有多个项目，就要添加多个<code>span</code>元素，以此类推</li>
</ul>
<h4 id="1-1-单项目"><a href="#1-1-单项目" class="headerlink" title="1.1 单项目"></a>1.1 单项目</h4><hr>
<ul>
<li>首先，只有左上角1个点的情况。<code>Flex</code>布局默认就是首行左对齐，所以一行代码就够了</li>
</ul>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071301.png" alt=""></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>设置项目的对齐方式，就能实现居中对齐和右对齐</li>
</ul>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071302.png" alt=""></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">justify-content</span>: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071303.png" alt=""></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">justify-content</span>: flex-end;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>设置交叉轴对齐方式，可以垂直移动主轴</li>
</ul>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071304.png" alt=""></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">align-items</span>: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071305.png" alt=""></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">justify-content</span>: center;</div><div class="line">  <span class="attribute">align-items</span>: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071306.png" alt=""></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">justify-content</span>: center;</div><div class="line">  <span class="attribute">align-items</span>: flex-end;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071307.png" alt=""></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">justify-content</span>: flex-end;</div><div class="line">  <span class="attribute">align-items</span>: flex-end;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="1-2-双项目"><a href="#1-2-双项目" class="headerlink" title="1.2 双项目"></a>1.2 双项目</h4><hr>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071308.png" alt=""></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">justify-content</span>: space-between;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071309.png" alt=""></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">flex-direction</span>: column;</div><div class="line">  <span class="attribute">justify-content</span>: space-between;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071310.png" alt=""></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">flex-direction</span>: column;</div><div class="line">  <span class="attribute">justify-content</span>: space-between;</div><div class="line">  <span class="attribute">align-items</span>: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071311.png" alt=""></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">flex-direction</span>: column;</div><div class="line">  <span class="attribute">justify-content</span>: space-between;</div><div class="line">  <span class="attribute">align-items</span>: flex-end;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071312.png" alt=""></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(2)</span> &#123;</div><div class="line">  <span class="attribute">align-self</span>: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071313.png" alt=""></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">justify-content</span>: space-between;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(2)</span> &#123;</div><div class="line">  <span class="attribute">align-self</span>: flex-end;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="1-3-三项目"><a href="#1-3-三项目" class="headerlink" title="1.3 三项目"></a>1.3 三项目</h4><hr>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071314.png" alt=""></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(2)</span> &#123;</div><div class="line">  <span class="attribute">align-self</span>: center;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:nth-child(3)</span> &#123;</div><div class="line">  <span class="attribute">align-self</span>: flex-end;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="1-4-四项目"><a href="#1-4-四项目" class="headerlink" title="1.4 四项目"></a>1.4 四项目</h4><hr>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071315.png" alt=""></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">flex-wrap</span>: wrap;</div><div class="line">  <span class="attribute">justify-content</span>: flex-end;</div><div class="line">  <span class="attribute">align-content</span>: space-between;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071316.png" alt=""></p>
<ul>
<li>HTML代码如下</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>CSS代码如下</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">flex-wrap</span>: wrap;</div><div class="line">  <span class="attribute">align-content</span>: space-between;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.column</span> &#123;</div><div class="line">  <span class="attribute">flex-basis</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">justify-content</span>: space-between;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="1-5-六项目"><a href="#1-5-六项目" class="headerlink" title="1.5 六项目"></a>1.5 六项目</h4><hr>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071317.png" alt=""></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">flex-wrap</span>: wrap;</div><div class="line">  <span class="attribute">align-content</span>: space-between;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071318.png" alt=""></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">flex-direction</span>: column;</div><div class="line">  <span class="attribute">flex-wrap</span>: wrap;</div><div class="line">  <span class="attribute">align-content</span>: space-between;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071319.png" alt=""></p>
<ul>
<li>HTML代码如下</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>CSS代码如下</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">box</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">flex-wrap</span>: wrap;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.row</span>&#123;</div><div class="line">  <span class="attribute">flex-basis</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">display</span>:flex;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.row</span><span class="selector-pseudo">:nth-child(2)</span>&#123;</div><div class="line">  <span class="attribute">justify-content</span>: center;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.row</span><span class="selector-pseudo">:nth-child(3)</span>&#123;</div><div class="line">  <span class="attribute">justify-content</span>: space-between;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="1-6-九项目"><a href="#1-6-九项目" class="headerlink" title="1.6 九项目"></a>1.6 九项目</h4><hr>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071320.png" alt=""></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">flex-wrap</span>: wrap;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="二、网格布局"><a href="#二、网格布局" class="headerlink" title="二、网格布局"></a>二、网格布局</h3><hr>
<h4 id="2-1-基本网格布局"><a href="#2-1-基本网格布局" class="headerlink" title="2.1 基本网格布局"></a>2.1 基本网格布局</h4><hr>
<ul>
<li>最简单的网格布局，就是平均分布。在容器里面平均分配空间，跟上面的骰子布局很像，但是需要设置项目的自动缩放</li>
</ul>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071321.png" alt=""></p>
<ul>
<li>HTML代码如下</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"Grid"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"Grid-cell"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"Grid-cell"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"Grid-cell"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>CSS代码如下</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.Grid</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.Grid-cell</span> &#123;</div><div class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-2-百分比布局"><a href="#2-2-百分比布局" class="headerlink" title="2.2 百分比布局"></a>2.2 百分比布局</h4><hr>
<ul>
<li>某个网格的宽度为固定的百分比，其余网格平均分配剩余的空间</li>
</ul>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071322.png" alt=""></p>
<ul>
<li>HTML代码如下</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"Grid"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"Grid-cell u-1of4"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"Grid-cell"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"Grid-cell u-1of3"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>css代码如下</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.Grid</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.Grid-cell</span> &#123;</div><div class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.Grid-cell</span><span class="selector-class">.u-full</span> &#123;</div><div class="line">  <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.Grid-cell</span><span class="selector-class">.u-1of2</span> &#123;</div><div class="line">  <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">50%</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.Grid-cell</span><span class="selector-class">.u-1of3</span> &#123;</div><div class="line">  <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">33.3333%</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.Grid-cell</span><span class="selector-class">.u-1of4</span> &#123;</div><div class="line">  <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">25%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-3、圣杯布局"><a href="#2-3、圣杯布局" class="headerlink" title="2.3、圣杯布局"></a>2.3、圣杯布局</h4><hr>
<ul>
<li>圣杯布局（Holy Grail Layout）指的是一种最常见的网站布局。页面从上到下，分成三个部分：头部（<code>header</code>），躯干（<code>body</code>），尾部（<code>footer</code>）。其中躯干又水平分成三栏，从左到右为：导航、主栏、副栏</li>
</ul>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071323.png" alt=""></p>
<ul>
<li>HTML代码如下</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"HolyGrail"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span>...<span class="tag">&lt;/<span class="name">header</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"HolyGrail-body"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">main</span> <span class="attr">class</span>=<span class="string">"HolyGrail-content"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">main</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"HolyGrail-nav"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">aside</span> <span class="attr">class</span>=<span class="string">"HolyGrail-ads"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span>...<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>CSS代码如下</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.HolyGrail</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">min-height</span>: <span class="number">100vh</span>;</div><div class="line">  <span class="attribute">flex-direction</span>: column;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">header</span>,</div><div class="line"><span class="selector-tag">footer</span> &#123;</div><div class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.HolyGrail-body</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.HolyGrail-content</span> &#123;</div><div class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.HolyGrail-nav</span>, <span class="selector-class">.HolyGrail-ads</span> &#123;</div><div class="line">  <span class="comment">/* 两个边栏的宽度设为12em */</span></div><div class="line">  <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">12em</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.HolyGrail-nav</span> &#123;</div><div class="line">  <span class="comment">/* 导航放到最左边 */</span></div><div class="line">  <span class="attribute">order</span>: -<span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>如果是小屏幕，躯干的三栏自动变为垂直叠加</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">media</span> (max-width: <span class="number">768px</span>) &#123;</div><div class="line">  <span class="selector-class">.HolyGrail-body</span> &#123;</div><div class="line">    <span class="attribute">flex-direction</span>: column;</div><div class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.HolyGrail-nav</span>,</div><div class="line">  <span class="selector-class">.HolyGrail-ads</span>,</div><div class="line">  <span class="selector-class">.HolyGrail-content</span> &#123;</div><div class="line">    <span class="attribute">flex</span>: auto;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-4、输入框的布局"><a href="#2-4、输入框的布局" class="headerlink" title="2.4、输入框的布局"></a>2.4、输入框的布局</h4><hr>
<ul>
<li>我们常常需要在输入框的前方添加提示，后方添加按钮</li>
</ul>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071324.png" alt=""></p>
<ul>
<li>HTML代码如下</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"InputAddOn"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"InputAddOn-item"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"InputAddOn-field"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"InputAddOn-item"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>CSS代码如下</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.InputAddOn</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.InputAddOn-field</span> &#123;</div><div class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-5、悬挂式布局"><a href="#2-5、悬挂式布局" class="headerlink" title="2.5、悬挂式布局"></a>2.5、悬挂式布局</h4><hr>
<ul>
<li>有时，主栏的左侧或右侧，需要添加一个图片栏</li>
</ul>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071325.png" alt=""></p>
<ul>
<li>HTML代码如下</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"Media"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"Media-figure"</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"Media-body"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>CSS代码如下</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.Media</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">align-items</span>: flex-start;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.Media-figure</span> &#123;</div><div class="line">  <span class="attribute">margin-right</span>: <span class="number">1em</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.Media-body</span> &#123;</div><div class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-6、固定的底栏"><a href="#2-6、固定的底栏" class="headerlink" title="2.6、固定的底栏"></a>2.6、固定的底栏</h4><hr>
<ul>
<li>有时，页面内容太少，无法占满一屏的高度，底栏就会抬高到页面的中间。这时可以采用<code>Flex</code>布局，让底栏总是出现在页面的底部</li>
</ul>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071326.png" alt=""></p>
<ul>
<li>HTML代码如下</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"Site"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span>...<span class="tag">&lt;/<span class="name">header</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">main</span> <span class="attr">class</span>=<span class="string">"Site-content"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">main</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span>...<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>CSS代码如下</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.Site</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">min-height</span>: <span class="number">100vh</span>;</div><div class="line">  <span class="attribute">flex-direction</span>: column;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.Site-content</span> &#123;</div><div class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-7，流式布局"><a href="#2-7，流式布局" class="headerlink" title="2.7，流式布局"></a>2.7，流式布局</h4><hr>
<ul>
<li>每行的项目数固定，会自动分行</li>
</ul>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071330.png" alt=""></p>
<ul>
<li>CSS的写法</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</div><div class="line">  <span class="attribute">background-color</span>: black;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">flex-flow</span>: row wrap;</div><div class="line">  <span class="attribute">align-content</span>: flex-start;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.child</span> &#123;</div><div class="line">  <span class="attribute">box-sizing</span>: border-box;</div><div class="line">  <span class="attribute">background-color</span>: white;</div><div class="line">  <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">25%</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>声明：本文系转载 <a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html" target="_blank" rel="external">原文出处</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071327.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://www.poetries.top/categories/Front-End/"/>
    
    
      <category term="CSS" scheme="http://www.poetries.top/tags/CSS/"/>
    
      <category term="CSS布局" scheme="http://www.poetries.top/tags/CSS%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>Flex 布局教程-语法篇[转]</title>
    <link href="http://www.poetries.top/2016/09/21/Flex%20%E5%B8%83%E5%B1%80%E6%95%99%E7%A8%8B%EF%BC%9A%E8%AF%AD%E6%B3%95%E7%AF%87/"/>
    <id>http://www.poetries.top/2016/09/21/Flex 布局教程：语法篇/</id>
    <published>2016-09-21T09:24:08.000Z</published>
    <updated>2016-09-27T15:41:22.575Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>布局的传统解决方案，基于盒状模型，依赖 <code>display</code>属性 + <code>position</code>属性 + <code>float</code>属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现</p>
</li>
<li><p>2009年，W3C提出了一种新的方案—-<code>Flex</code>布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能</p>
</li>
</ul>
<h3 id="一、Flex布局是什么"><a href="#一、Flex布局是什么" class="headerlink" title="一、Flex布局是什么"></a>一、Flex布局是什么</h3><hr>
<ul>
<li><code>Flex</code>是<code>Flexible Box</code>的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。<br>任何一个容器都可以指定为<code>Flex</code>布局</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>行内元素也可以使用<code>Flex</code>布局</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">  <span class="attribute">display</span>: inline-flex;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>Webkit</code>内核的浏览器，必须加上<code>-webkit</code>前缀</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">  <span class="attribute">display</span>: -webkit-flex; <span class="comment">/* Safari */</span></div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>注意</strong>，设为<code>Flex</code>布局以后，子元素的<code>float</code>、<code>clear</code>和<code>vertical-align</code>属性将失效</li>
</ul>
<h3 id="二、基本概念"><a href="#二、基本概念" class="headerlink" title="二、基本概念"></a>二、基本概念</h3><hr>
<ul>
<li>采用<code>Flex</code>布局的元素，称为<code>Flex</code>容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为<code>Flex</code>项目（flex item），简称”项目”</li>
</ul>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071004.png" alt=""></p>
<ul>
<li>容器默认存在两根轴：水平的主轴（<code>main axis</code>）和垂直的交叉轴（<code>cross axis</code>）。主轴的开始位置（与边框的交叉点）叫做<code>main start</code>，结束位置叫做<code>main end</code>；交叉轴的开始位置叫做<code>cross start</code>，结束位置叫做<code>cross end</code></li>
<li>项目默认沿主轴排列。单个项目占据的主轴空间叫做<code>main size</code>，占据的交叉轴空间叫做<code>cross size</code></li>
</ul>
<h3 id="三、容器的属性"><a href="#三、容器的属性" class="headerlink" title="三、容器的属性"></a>三、容器的属性</h3><hr>
<ul>
<li><p>以下6个属性设置在容器上</p>
<ul>
<li><code>flex-direction</code></li>
<li><code>flex-wrap</code></li>
<li><code>flex-flow</code></li>
<li><code>justify-content</code></li>
<li><code>align-items</code></li>
<li><code>align-content</code></li>
</ul>
</li>
</ul>
<h4 id="3-1-flex-direction属性"><a href="#3-1-flex-direction属性" class="headerlink" title="3.1 flex-direction属性"></a>3.1 flex-direction属性</h4><hr>
<ul>
<li><code>flex-direction</code>属性决定主轴的方向（即项目的排列方向）</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">  <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071005.png" alt=""></p>
<ul>
<li><p>它可能有4个值</p>
<ul>
<li><code>row</code>（默认值）：主轴为水平方向，起点在左端。</li>
<li><code>row-reverse</code>：主轴为水平方向，起点在右端。</li>
<li><code>column</code>：主轴为垂直方向，起点在上沿。</li>
<li><code>column-reverse</code>：主轴为垂直方向，起点在下沿</li>
</ul>
</li>
</ul>
<h4 id="3-2-flex-wrap属性"><a href="#3-2-flex-wrap属性" class="headerlink" title="3.2 flex-wrap属性"></a>3.2 flex-wrap属性</h4><hr>
<ul>
<li>默认情况下，项目都排在一条线（又称”轴线”）上。<code>flex-wrap</code>属性定义，如果一条轴线排不下，如何换行</li>
</ul>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071006.png" alt=""></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">  <span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>nowrap</code>（默认）：不换行</li>
</ul>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071007.png" alt=""></p>
<ul>
<li><code>wrap</code>：换行，第一行在上方</li>
</ul>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071008.jpg" alt=""></p>
<ul>
<li><code>wrap-reverse：换行，第一行在下方</code></li>
</ul>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071009.jpg" alt=""></p>
<h4 id="3-3-flex-flow"><a href="#3-3-flex-flow" class="headerlink" title="3.3 flex-flow"></a>3.3 flex-flow</h4><hr>
<ul>
<li><code>flex-flow</code>属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row</code> <code>nowrap</code></li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">  <span class="attribute">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-4-justify-content属性"><a href="#3-4-justify-content属性" class="headerlink" title="3.4 justify-content属性"></a>3.4 justify-content属性</h4><hr>
<ul>
<li><code>justify-content</code>属性定义了项目在主轴上的对齐方式</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">  <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071010.png" alt=""></p>
<ul>
<li>它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右</li>
<li><code>flex-start</code>（默认值）：左对齐</li>
<li><code>flex-end</code>：右对齐</li>
<li><code>center</code>： 居中</li>
<li><code>space-between</code>：两端对齐，项目之间的间隔都相等。</li>
<li><code>space-around</code>：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍</li>
</ul>
<h4 id="3-5-align-items属性"><a href="#3-5-align-items属性" class="headerlink" title="3.5 align-items属性"></a>3.5 align-items属性</h4><hr>
<ul>
<li><code>align-items</code>属性定义项目在交叉轴上如何对齐</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">  <span class="attribute">align-items</span>: flex-start | flex-end | center | baseline | stretch;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071011.png" alt=""></p>
<ul>
<li><p>它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下</p>
</li>
<li><p><code>flex-start</code>：交叉轴的起点对齐。</p>
</li>
<li><code>flex-end</code>：交叉轴的终点对齐。</li>
<li><code>center</code>：交叉轴的中点对齐。</li>
<li><code>baseline</code>: 项目的第一行文字的基线对齐。</li>
<li><code>stretch</code>（默认值）：如果项目未设置高度或设为<code>auto</code>，将占满整个容器的高度。</li>
</ul>
<h4 id="3-6-align-content属性"><a href="#3-6-align-content属性" class="headerlink" title="3.6 align-content属性"></a>3.6 align-content属性</h4><hr>
<ul>
<li><code>align-content</code>属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">  <span class="attribute">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071012.png" alt=""></p>
<ul>
<li><code>flex-start</code>：与交叉轴的起点对齐。</li>
<li><code>flex-end</code>：与交叉轴的终点对齐。</li>
<li><code>center</code>：与交叉轴的中点对齐。</li>
<li><code>space-between</code>：与交叉轴两端对齐，轴线之间的间隔平均分布。</li>
<li><code>space-around</code>：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li>
<li><code>stretch</code>（默认值）：轴线占满整个交叉轴</li>
</ul>
<h3 id="四、项目的属性"><a href="#四、项目的属性" class="headerlink" title="四、项目的属性"></a>四、项目的属性</h3><hr>
<ul>
<li><p>以下6个属性设置在项目上</p>
<ul>
<li><code>order</code></li>
<li><code>flex-grow</code></li>
<li><code>flex-shrink</code></li>
<li><code>flex-basis</code></li>
<li><code>flex</code></li>
<li><code>align-self</code></li>
</ul>
</li>
</ul>
<h4 id="4-1-order属性"><a href="#4-1-order属性" class="headerlink" title="4.1 order属性"></a>4.1 order属性</h4><hr>
<ul>
<li><code>order</code>属性定义项目的排列顺序。数值越小，排列越靠前，默认为<code>0</code></li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.item</span> &#123;</div><div class="line">  <span class="attribute">order</span>: &lt;integer&gt;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071013.png" alt=""></p>
<h4 id="4-2-flex-grow属性"><a href="#4-2-flex-grow属性" class="headerlink" title="4.2 flex-grow属性"></a>4.2 flex-grow属性</h4><hr>
<ul>
<li><code>flex-grow</code>属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.item</span> &#123;</div><div class="line">  <span class="attribute">flex-grow</span>: &lt;number&gt;; <span class="comment">/* default 0 */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071014.png" alt=""></p>
<ul>
<li>如果所有项目的<code>flex-grow</code>属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的<code>flex-grow</code>属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍</li>
</ul>
<h4 id="4-3-flex-shrink属性"><a href="#4-3-flex-shrink属性" class="headerlink" title="4.3 flex-shrink属性"></a>4.3 flex-shrink属性</h4><hr>
<ul>
<li><code>flex-shrink</code>属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.item</span> &#123;</div><div class="line">  <span class="attribute">flex-shrink</span>: &lt;number&gt;; <span class="comment">/* default 1 */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071015.jpg" alt=""></p>
<ul>
<li>如果所有项目的<code>flex-shrink</code>属性都为1，当空间不足时，都将等比例缩小。如果一个项目<code>的flex-shrink</code>属性为0，其他项目都为1，则空间不足时，前者不缩小</li>
<li>负值对该属性无效</li>
</ul>
<h4 id="4-4-flex-basis属性"><a href="#4-4-flex-basis属性" class="headerlink" title="4.4 flex-basis属性"></a>4.4 flex-basis属性</h4><hr>
<ul>
<li><code>flex-basis</code>属性定义了在分配多余空间之前，项目占据的主轴空间（<code>main size</code>）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code>auto</code>，即项目的本来大小</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.item</span> &#123;</div><div class="line">  <span class="attribute">flex-basis</span>: &lt;length&gt; | auto; <span class="comment">/* default auto */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>它可以设为跟<code>width</code>或<code>height</code>属性一样的值（比如350px），则项目将占据固定空间</li>
</ul>
<h4 id="4-5-flex属性"><a href="#4-5-flex属性" class="headerlink" title="4.5 flex属性"></a>4.5 flex属性</h4><hr>
<ul>
<li><code>flex</code>属性是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。后两个属性可选</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.item</span> &#123;</div><div class="line">  <span class="attribute">flex</span>: none | [ &lt;<span class="string">'flex-grow'</span>&gt; &lt;<span class="string">'flex-shrink'</span>&gt;? || &lt;<span class="string">'flex-basis'</span>&gt; ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>该属性有两个快捷值：<code>auto (1 1 auto)</code> 和 <code>none (0 0 auto)</code>。<br>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关</li>
</ul>
<h4 id="4-6-align-self属性"><a href="#4-6-align-self属性" class="headerlink" title="4.6 align-self属性"></a>4.6 align-self属性</h4><hr>
<ul>
<li><code>align-self</code>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性。默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code></li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.item</span> &#123;</div><div class="line">  <span class="attribute">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071016.png" alt=""></p>
<ul>
<li>该属性可能取6个值，除了<code>auto</code>，其他都与<code>align-items</code>属性完全一致</li>
</ul>
<h3 id="flex布局导图小结"><a href="#flex布局导图小结" class="headerlink" title="flex布局导图小结"></a>flex布局导图小结</h3><hr>
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/flex%E5%B8%83%E5%B1%80%E5%B0%8F%E7%BB%93.png" alt=""></p>
<blockquote>
<p>声明：<a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="external">原文出处</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;布局的传统解决方案，基于盒状模型，依赖 &lt;code&gt;display&lt;/code&gt;属性 + &lt;code&gt;position&lt;/code&gt;属性 + &lt;code&gt;float&lt;/code&gt;属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2009年，W3C提出了一种新的方案—-&lt;code&gt;Flex&lt;/code&gt;布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;一、Flex布局是什么&quot;&gt;&lt;a href=&quot;#一、Flex布局是什么&quot; class=&quot;headerlink&quot; title=&quot;一、Flex布局是什么&quot;&gt;&lt;/a&gt;一、Flex布局是什么&lt;/h3&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Flex&lt;/code&gt;是&lt;code&gt;Flexible Box&lt;/code&gt;的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。&lt;br&gt;任何一个容器都可以指定为&lt;code&gt;Flex&lt;/code&gt;布局&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.box&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: flex;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://www.poetries.top/categories/Front-End/"/>
    
    
      <category term="CSS" scheme="http://www.poetries.top/tags/CSS/"/>
    
      <category term="CSS布局" scheme="http://www.poetries.top/tags/CSS%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中的this的一些用法</title>
    <link href="http://www.poetries.top/2016/09/20/JavaScript%E4%B8%ADthis%E7%9A%84%E4%B8%80%E4%BA%9B%E7%94%A8%E6%B3%95/"/>
    <id>http://www.poetries.top/2016/09/20/JavaScript中this的一些用法/</id>
    <published>2016-09-20T12:09:43.000Z</published>
    <updated>2016-09-27T15:41:22.575Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、global-this"><a href="#一、global-this" class="headerlink" title="一、global this"></a>一、global this</h4><hr>
<ul>
<li>总结起来就是：在浏览器里面<code>this</code>是老大，它等价于<code>window</code>对象，如果你声明一些全局变量(不管在任何地方)，这些变量都会作为<code>this</code>的属性。</li>
<li>在node里面，有两种执行<code>JavaScript</code>代码的方式，一种是直接执行写好的<code>JavaScript</code>文件，另外一种是直接在里面执行一行行代码。</li>
<li>对于直接运行一行行<code>JavaScript</code>代码的方式，<code>global</code>才是老大，<code>this</code>和它是等价的。在这种情况下，和浏览器比较相似</li>
<li>也就是声明一些全局变量会自动添加给老大<code>global</code>，顺带也会添加给<code>this</code>。</li>
<li>但是在<code>node</code>里面直接脚本文件就不一样了，你声明的全局变量不会自动添加到<code>this</code>，但是会添加到<code>global</code>对象。所以相同点是，在全局范围内，全局变量终究是属于老大的<a id="more"></a>
</li>
</ul>
<h4 id="二、function-this"><a href="#二、function-this" class="headerlink" title="二、function this"></a>二、function this</h4><hr>
<ul>
<li>如果不是用<code>new</code>调用，在函数里面使用<code>this</code>都是指代全局范围的<code>this</code></li>
<li>函数里面的<code>this</code>其实相对比较好理解，如果我们在一个函数里面使用<code>this</code>，需要注意的就是我们调用函数的方式，如果是正常的方式调用函数，this指代全局的this</li>
<li>如果我们加一个<code>new</code>，这个函数就变成了一个构造函数，我们就创建了一个实例，<code>this</code>指代这个实例，这个和其他面向对象的语言很像</li>
<li>另外，写<code>JavaScript</code>很常做的一件事就是绑定事件处理程序，也就是诸如<code>button.addEventListener(‘click’, fn, false)</code>之类的，如果在<code>fn</code>里面需要使用<code>this</code>，<code>this</code>指代事件处理程序对应的对象，也就是<code>button</code></li>
</ul>
<h4 id="三、prototype-this"><a href="#三、prototype-this" class="headerlink" title="三、prototype this"></a>三、prototype this</h4><hr>
<ul>
<li>你创建的每一个函数都是函数对象。它们会自动获得一个特殊的属性<code>prototype</code>，你可以给这个属性赋值。当你用<code>new</code>的方式调用一个函数的时候，你就能通过<code>this</code>访问你给<code>prototype</code>赋的值了</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo);</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> Thing.prototype.foo = <span class="string">"bar"</span>;</div><div class="line"></div><div class="line"> <span class="keyword">var</span> thing = <span class="keyword">new</span> Thing(); <span class="comment">//logs "bar"</span></div><div class="line"> <span class="built_in">console</span>.log(thing.foo);  <span class="comment">//logs "bar"</span></div></pre></td></tr></table></figure>
<ul>
<li><p>当你使用<code>new</code>为你的函数创建多个实例的时候，这些实例会共享你给<code>prototype</code>设定的值。当你调用<code>this.foo</code>的时候，都会返回相同的值，除非你在某个实例里面重写了自己的<code>this.foo</code></p>
</li>
<li><p>实例里面的<code>this</code>是一个特殊的对象。你可以把<code>this</code>想成一种获取<code>prototype</code>的值的一种方式。当你在一个实例里面直接给<code>this</code>添加属性的时候，会隐藏<code>prototype</code>中与之同名的属性。如果你想访问<code>prototype</code>中的这个属性值而不是你自己设定的属性值，你可以通过在实例里面删除你自己添加的属性的方式来实现</p>
</li>
<li><p>通过一个函数创建的实例会共享这个函数的<code>prototype</code>属性的值，如果你给这个函数的<code>prototype</code>赋值一个<code>Array</code>，那么所有的实例都会共享这个<code>Array</code>，除非你在实例里面重写了这个<code>Array</code>，这种情况下，函数的<code>prototype</code>的<code>Array</code>就会被隐藏掉</p>
</li>
<li>给一个函数的<code>prototype</code>赋值一个<code>Array</code>通常是一个错误的做法。如果你想每一个实例有他们专属的<code>Array</code>，你应该在函数里面创建而不是在<code>prototype</code>里面创建</li>
<li>实际上你可以通过把多个函数的<code>prototype</code>链接起来的从而形成一个原型链，因此<code>this</code>就会魔法般地沿着这条原型链往上查找直到找你你需要引用的值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing1</span>(<span class="params"></span>) </span>&#123;</div><div class="line"> </div><div class="line">    Thing1.prototype.foo = <span class="string">"bar"</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing2</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">    Thing2.prototype = <span class="keyword">new</span> Thing1();</div><div class="line"></div><div class="line">    <span class="keyword">var</span> thing = <span class="keyword">new</span> Thing2();</div><div class="line">    <span class="built_in">console</span>.log(thing.foo); <span class="comment">//logs "bar"</span></div></pre></td></tr></table></figure>
<h4 id="四、object-this"><a href="#四、object-this" class="headerlink" title="四、object this"></a>四、object this</h4><hr>
<ul>
<li>在一个对象的一个函数里，你可以通过<code>this</code>来引用这个对象的其他属性。这个用<code>new</code>来新建一个实例是不一样的</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">     <span class="attr">foo</span>: <span class="string">"bar"</span>,</div><div class="line">     <span class="attr">logFoo</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">         <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo);</div><div class="line">     &#125;</div><div class="line"> &#125;;</div><div class="line"> </div><div class="line"> obj.logFoo(); <span class="comment">//logs "bar"</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>注意</strong>，没有使用<code>new</code>，没有使用<code>Object.create</code>，也没有使用函数调用创建一个对象。你也可以将对象当作一个实例将函数绑定到上面</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">foo</span>: <span class="string">"bar"</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">logFoo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo);</div><div class="line">&#125;</div><div class="line"></div><div class="line">logFoo.apply(obj); <span class="comment">//logs "bar"</span></div></pre></td></tr></table></figure>
<h4 id="五、DOM-event-this"><a href="#五、DOM-event-this" class="headerlink" title="五、DOM event this"></a>五、DOM event this</h4><hr>
<ul>
<li>在一个<code>HTML DOM</code>事件处理程序里面，<code>this</code>始终指向这个处理程序被所绑定到的<code>HTML DOM</code>节点</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Listener</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">document</span>.getElementById(<span class="string">"foo"</span>).addEventListener(<span class="string">"click"</span>,</div><div class="line">         <span class="keyword">this</span>.handleClick);</div><div class="line">  &#125;</div><div class="line">  Listener.prototype.handleClick = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//logs "&lt;div id="foo"&gt;&lt;/div&gt;"</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">var</span> listener = <span class="keyword">new</span> Listener();</div><div class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"foo"</span>).click();</div></pre></td></tr></table></figure>
<ul>
<li>除非你自己通过<code>bind</code>切换了上下文</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Listener</span>(<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="built_in">document</span>.getElementById(<span class="string">"foo"</span>).addEventListener(<span class="string">"click"</span>, </div><div class="line">         <span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>));</div><div class="line"> &#125;</div><div class="line"> Listener.prototype.handleClick = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">     <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//logs Listener &#123;handleClick: function&#125;</span></div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="keyword">var</span> listener = <span class="keyword">new</span> Listener();</div><div class="line"> <span class="built_in">document</span>.getElementById(<span class="string">"foo"</span>).click();</div></pre></td></tr></table></figure>
<h4 id="六、HTML-this"><a href="#六、HTML-this" class="headerlink" title="六、HTML this"></a>六、HTML this</h4><hr>
<ul>
<li>在<code>HTML</code>节点的属性里面，你可以放置<code>JavaScript</code>代码，<code>this</code>指向了这个元素</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;div id=<span class="string">"foo"</span> onclick=<span class="string">"console.log(this);"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line"> &lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line"> <span class="built_in">document</span>.getElementById(<span class="string">"foo"</span>).click(); <span class="comment">//logs &lt;div id="foo"...</span></div><div class="line"> &lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h4 id="七、override-this"><a href="#七、override-this" class="headerlink" title="七、override this"></a>七、override this</h4><hr>
<ul>
<li>你不能重写<code>this</code>，因为它是保留字</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="keyword">var</span> <span class="keyword">this</span> = &#123;&#125;;  <span class="comment">// Uncaught SyntaxError: Unexpected token this </span></div><div class="line"> &#125;</div><div class="line"><span class="built_in">eval</span> <span class="keyword">this</span></div></pre></td></tr></table></figure>
<ul>
<li>你可以通过<code>eval</code>来访问<code>this</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span> (<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">Thing.prototype.foo = <span class="string">"bar"</span>;</div><div class="line"></div><div class="line">Thing.prototype.logFoo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">eval</span>(<span class="string">"console.log(this.foo)"</span>); <span class="comment">//logs "bar"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> thing = <span class="keyword">new</span> Thing();</div><div class="line"></div><div class="line">thing.logFoo();</div></pre></td></tr></table></figure>
<ul>
<li>这会造成一个安全问题，除非不用<code>eval</code>，没有其他方式来避免这个问题</li>
</ul>
<h4 id="八、with-this"><a href="#八、with-this" class="headerlink" title="八、with this"></a>八、with this</h4><hr>
<ul>
<li>你可以通过<code>with</code>来将<code>this</code>添加到当前的执行环境，并且读写<code>this</code>的属性的时候不需要通过<code>this</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span> (<span class="params"></span>) </span>&#123;</div><div class="line"> &#125;</div><div class="line"> Thing.prototype.foo = <span class="string">"bar"</span>;</div><div class="line"> Thing.prototype.logFoo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="keyword">with</span> (<span class="keyword">this</span>) &#123;</div><div class="line">         <span class="built_in">console</span>.log(foo);</div><div class="line">         foo = <span class="string">"foo"</span>;</div><div class="line">     &#125;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> thing = <span class="keyword">new</span> Thing();</div><div class="line">thing.logFoo(); <span class="comment">// logs "bar"</span></div><div class="line"><span class="built_in">console</span>.log(thing.foo); <span class="comment">// logs "foo"</span></div></pre></td></tr></table></figure>
<ul>
<li>许多人认为这样使用是不好的因为<code>with</code>本身就饱受争议</li>
</ul>
<h4 id="九、jQuery-this"><a href="#九、jQuery-this" class="headerlink" title="九、jQuery this"></a>九、jQuery this</h4><hr>
<ul>
<li>和<code>HTML DOM</code>元素节点的事件处理程序一样，在许多情况下<code>JQuery</code>的<code>this</code>都指向<code>HTML</code>元素节点。这在事件处理程序和一些方便的方法中都是管用的，比如<code>$.each</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"foo bar1"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line"></div><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"foo bar2"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line"> </div><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">     $(<span class="string">".foo"</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">         <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//logs &lt;div class="foo...</span></div><div class="line">     &#125;);</div><div class="line">     $(<span class="string">".foo"</span>).on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">         <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//logs &lt;div class="foo...</span></div><div class="line">     &#125;);</div><div class="line">    $(<span class="string">".foo"</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.click();</div><div class="line">    &#125;);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;一、global-this&quot;&gt;&lt;a href=&quot;#一、global-this&quot; class=&quot;headerlink&quot; title=&quot;一、global this&quot;&gt;&lt;/a&gt;一、global this&lt;/h4&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;总结起来就是：在浏览器里面&lt;code&gt;this&lt;/code&gt;是老大，它等价于&lt;code&gt;window&lt;/code&gt;对象，如果你声明一些全局变量(不管在任何地方)，这些变量都会作为&lt;code&gt;this&lt;/code&gt;的属性。&lt;/li&gt;
&lt;li&gt;在node里面，有两种执行&lt;code&gt;JavaScript&lt;/code&gt;代码的方式，一种是直接执行写好的&lt;code&gt;JavaScript&lt;/code&gt;文件，另外一种是直接在里面执行一行行代码。&lt;/li&gt;
&lt;li&gt;对于直接运行一行行&lt;code&gt;JavaScript&lt;/code&gt;代码的方式，&lt;code&gt;global&lt;/code&gt;才是老大，&lt;code&gt;this&lt;/code&gt;和它是等价的。在这种情况下，和浏览器比较相似&lt;/li&gt;
&lt;li&gt;也就是声明一些全局变量会自动添加给老大&lt;code&gt;global&lt;/code&gt;，顺带也会添加给&lt;code&gt;this&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;但是在&lt;code&gt;node&lt;/code&gt;里面直接脚本文件就不一样了，你声明的全局变量不会自动添加到&lt;code&gt;this&lt;/code&gt;，但是会添加到&lt;code&gt;global&lt;/code&gt;对象。所以相同点是，在全局范围内，全局变量终究是属于老大的
    
    </summary>
    
      <category term="Front-End" scheme="http://www.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://www.poetries.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>javascript工具函数</title>
    <link href="http://www.poetries.top/2016/09/18/javascript%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0/"/>
    <id>http://www.poetries.top/2016/09/18/javascript工具函数/</id>
    <published>2016-09-18T15:21:00.000Z</published>
    <updated>2016-09-27T15:41:22.579Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一部分-JavaScript工具函数"><a href="#第一部分-JavaScript工具函数" class="headerlink" title="第一部分 JavaScript工具函数"></a>第一部分 JavaScript工具函数</h3><hr>
<h4 id="转义特殊字符为html实体"><a href="#转义特殊字符为html实体" class="headerlink" title="转义特殊字符为html实体"></a>转义特殊字符为html实体</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">HtmlEncode: <span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> str.replace(<span class="regexp">/&amp;/g</span>, <span class="string">'&amp;amp;'</span>).replace(<span class="regexp">/\"/g</span>, <span class="string">'&amp;quot;'</span>).replace(<span class="regexp">/&lt;/g</span>, <span class="string">'&amp;lt;'</span>).replace(<span class="regexp">/&gt;/g</span>, <span class="string">'&amp;gt;'</span>).replace(<span class="regexp">/'/g</span>, <span class="string">'&amp;apos;'</span>);</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="验证是否为有效的手机电话号码"><a href="#验证是否为有效的手机电话号码" class="headerlink" title="验证是否为有效的手机电话号码"></a>验证是否为有效的手机电话号码</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">IsMobile: <span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> rp = <span class="regexp">/^1[3|4|5|7|8][0-9]\d&#123;4,8&#125;$/</span>;</div><div class="line">    <span class="keyword">return</span> rp.test(str);</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h4 id="验证是否为有效的座机电话号码"><a href="#验证是否为有效的座机电话号码" class="headerlink" title="验证是否为有效的座机电话号码"></a>验证是否为有效的座机电话号码</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">IsTel: <span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> rp = <span class="regexp">/^([0-9]&#123;3,4&#125;-)?[0-9]&#123;7,8&#125;$/</span>;</div><div class="line">    <span class="keyword">return</span> rp.test(str);</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h4 id="清除左空格-右空格"><a href="#清除左空格-右空格" class="headerlink" title="清除左空格/右空格"></a>清除左空格/右空格</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Ltrim: <span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123; <span class="keyword">return</span> str.replace( <span class="regexp">/^(\s*|　*)/</span>, <span class="string">""</span>); &#125;,</div><div class="line"><span class="attr">Rtrim</span>: <span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123; <span class="keyword">return</span> str.replace( <span class="regexp">/(\s*|　*)$/</span>, <span class="string">""</span>); &#125;,</div></pre></td></tr></table></figure>
<h4 id="清除左右空格"><a href="#清除左右空格" class="headerlink" title="清除左右空格"></a>清除左右空格</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Trim: <span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.Ltrim(<span class="keyword">this</span>.Rtrim(str));</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h4 id="判断是那种类型的浏览器"><a href="#判断是那种类型的浏览器" class="headerlink" title="判断是那种类型的浏览器"></a>判断是那种类型的浏览器</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">WhichBrowser: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> userAgent = navigator.userAgent;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> isOpera = userAgent.indexOf(<span class="string">"Opera"</span>) &gt; <span class="number">-1</span>;</div><div class="line">    <span class="keyword">var</span> isIE = userAgent.indexOf(<span class="string">"compatible"</span>) &gt; <span class="number">-1</span> &amp;&amp; userAgent.indexOf(<span class="string">"MSIE"</span>) &gt; <span class="number">-1</span> &amp;&amp; !isOpera;</div><div class="line">    <span class="keyword">var</span> isFF = userAgent.indexOf(<span class="string">"Firefox"</span>) &gt; <span class="number">-1</span>;</div><div class="line">    <span class="keyword">var</span> isCH = userAgent.indexOf(<span class="string">"Chrome"</span>) &gt; <span class="number">-1</span>;</div><div class="line">    <span class="keyword">var</span> isSafari = userAgent.indexOf(<span class="string">"Safari"</span>) &gt; <span class="number">-1</span>;</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (isIE)&#123;</div><div class="line">        <span class="keyword">var</span> IE5 = IE55 = IE6 = IE7 = IE8 = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">var</span> reIE = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"MSIE (\\d+\\.\\d+);"</span>);</div><div class="line">        reIE.test(userAgent);</div><div class="line">        <span class="keyword">var</span> fIEVersion = <span class="built_in">parseFloat</span>(<span class="built_in">RegExp</span>[<span class="string">"$1"</span>]);</div><div class="line">        IE55 = fIEVersion == <span class="number">5.5</span>;</div><div class="line">        IE6 = fIEVersion == <span class="number">6.0</span>;</div><div class="line">        IE7 = fIEVersion == <span class="number">7.0</span>;</div><div class="line">        IE8 = fIEVersion == <span class="number">8.0</span>;</div><div class="line">        <span class="keyword">if</span> (IE55) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"IE55"</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (IE6) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"IE6"</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (IE7) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"IE7"</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (IE8) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"IE8"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (isFF) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Firefox"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (isCH) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Chrome"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (isOpera) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Opera"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (isSafari) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Safari"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h4 id="获取客户端浏览器cookie"><a href="#获取客户端浏览器cookie" class="headerlink" title="获取客户端浏览器cookie"></a>获取客户端浏览器cookie</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">GetCookie: <span class="function"><span class="keyword">function</span>(<span class="params">c_name</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">document</span>.cookie.length&gt;<span class="number">0</span>)&#123;</div><div class="line">        c_start = <span class="built_in">document</span>.cookie.indexOf(c_name + <span class="string">'='</span>);</div><div class="line">        <span class="keyword">if</span>(c_start != <span class="number">-1</span>)&#123;</div><div class="line">            c_start = c_start + c_name.length + <span class="number">1</span>;</div><div class="line">            c_end = <span class="built_in">document</span>.cookie.indexOf(<span class="string">';'</span>,c_start);</div><div class="line">            <span class="keyword">if</span> (c_end==<span class="number">-1</span>) c_end = <span class="built_in">document</span>.cookie.length;</div><div class="line">            <span class="keyword">return</span> <span class="built_in">unescape</span>(<span class="built_in">document</span>.cookie.substring(c_start,c_end));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="string">''</span>;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h4 id="设置客户端浏览器cookie"><a href="#设置客户端浏览器cookie" class="headerlink" title="设置客户端浏览器cookie"></a>设置客户端浏览器cookie</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">    SetCookie: <span class="function"><span class="keyword">function</span>(<span class="params">c_name, value, expiredays</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> exdate = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">        exdate.setDate(exdate.getDate() + expiredays);</div><div class="line">        <span class="built_in">document</span>.cookie = c_name + <span class="string">"="</span> + <span class="built_in">escape</span>(value) + ((expiredays==<span class="literal">null</span>) ? <span class="string">""</span> : <span class="string">";expires="</span>+exdate.toGMTString());</div><div class="line">    &#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="第二部分-插件工具"><a href="#第二部分-插件工具" class="headerlink" title="第二部分 插件工具"></a>第二部分 插件工具</h3><hr>
<h4 id="Dialog对话框"><a href="#Dialog对话框" class="headerlink" title="Dialog对话框"></a>Dialog对话框</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> DialogBox = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.defaults = &#123;</div><div class="line">            <span class="string">'height'</span>: <span class="number">350</span>,</div><div class="line">            <span class="string">'width'</span>: <span class="number">500</span>,</div><div class="line">            <span class="string">'title'</span>: <span class="string">''</span>,</div><div class="line">            <span class="string">'content'</span>: <span class="string">''</span>,</div><div class="line">            <span class="string">'action'</span>: <span class="string">''</span></div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">this</span>.options = $.extend(<span class="keyword">this</span>.defaults,options);</div><div class="line">    &#125;;</div><div class="line"> </div><div class="line">    DialogBox.prototype = &#123;</div><div class="line"> </div><div class="line">        <span class="attr">mask</span>: <span class="string">''</span>,</div><div class="line">        <span class="attr">dialogBox</span>: <span class="string">''</span>,</div><div class="line"> </div><div class="line">        <span class="attr">close</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">            self.mask.remove();</div><div class="line">            self.dialogBox.remove();</div><div class="line">        &#125;,</div><div class="line"> </div><div class="line">        <span class="attr">resize</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">            <span class="keyword">var</span> w_h = $(<span class="built_in">window</span>).height();</div><div class="line">            <span class="keyword">var</span> w_w = $(<span class="built_in">window</span>).width();</div><div class="line"> </div><div class="line">            <span class="keyword">var</span> pos_l = w_w/<span class="number">2</span>-self.defaults.width/<span class="number">2</span>;</div><div class="line">            <span class="keyword">var</span> pos_t = w_h/<span class="number">2</span>-self.defaults.height/<span class="number">2</span>;</div><div class="line">            self.dialogBox.css(&#123;</div><div class="line">                <span class="string">'top'</span>: pos_t,</div><div class="line">                <span class="string">'left'</span>: pos_l</div><div class="line">            &#125;);</div><div class="line">        &#125;,</div><div class="line"> </div><div class="line">        <span class="attr">init</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line"> </div><div class="line">            <span class="comment">// mask</span></div><div class="line">            <span class="keyword">var</span> d_w = $(<span class="built_in">document</span>).width();</div><div class="line">            <span class="keyword">var</span> d_h = $(<span class="built_in">document</span>).height();</div><div class="line">            <span class="keyword">var</span> w_h = $(<span class="built_in">window</span>).height();</div><div class="line">            <span class="keyword">var</span> w_w = $(<span class="built_in">window</span>).width();</div><div class="line"> </div><div class="line">            <span class="keyword">var</span> mask = $(<span class="string">'&lt;div class="dialog-mask"&gt;&lt;/div&gt;'</span>);</div><div class="line">            mask.css(&#123;</div><div class="line">                <span class="string">'height'</span>: d_h,</div><div class="line">                <span class="string">'width'</span>: d_w</div><div class="line">            &#125;);</div><div class="line"> </div><div class="line">            <span class="comment">// dialog-box</span></div><div class="line">            <span class="keyword">var</span> dialog_out = $(<span class="string">'&lt;div class="dialog-out"&gt;&lt;/div&gt;'</span>);</div><div class="line">            <span class="keyword">var</span> pos_l = w_w/<span class="number">2</span>-self.defaults.width/<span class="number">2</span>;</div><div class="line">            <span class="keyword">var</span> pos_t = w_h/<span class="number">2</span>-self.defaults.height/<span class="number">2</span>;</div><div class="line">            dialog_out.css(&#123;</div><div class="line">                <span class="string">'height'</span>: self.defaults.height,</div><div class="line">                <span class="string">'width'</span>: self.defaults.width,</div><div class="line">                <span class="string">'top'</span>: pos_t,</div><div class="line">                <span class="string">'left'</span>: pos_l</div><div class="line">            &#125;);</div><div class="line"> </div><div class="line">            <span class="comment">// insert html</span></div><div class="line">            <span class="keyword">var</span> inner = $(<span class="string">'&lt;div class="dialog-inner"&gt;&lt;/div&gt;'</span>);</div><div class="line">            inner.html(self.defaults.content);</div><div class="line">            dialog_out.append(inner);</div><div class="line"> </div><div class="line">            <span class="comment">// close-btn</span></div><div class="line">            <span class="keyword">var</span> close = $(<span class="string">'&lt;div class="close-btn" title="关闭"&gt;&lt;/div&gt;'</span>);</div><div class="line">            close.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                self.close();</div><div class="line">            &#125;);</div><div class="line">            dialog_out.append(close);</div><div class="line"> </div><div class="line">            <span class="comment">// action-btn</span></div><div class="line">            <span class="keyword">var</span> action_btn = $(<span class="string">'&lt;button class="action-btn ibtn"&gt;确认&lt;/button&gt;'</span>);</div><div class="line">            dialog_out.append(action_btn);</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">typeof</span> self.defaults.action === <span class="string">'function'</span>)&#123;</div><div class="line">                action_btn.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                    self.defaults.action();</div><div class="line">                &#125;);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                action_btn.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                    self.close();</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line"> </div><div class="line">            <span class="comment">// add to body</span></div><div class="line">            $(<span class="built_in">document</span>.body).append(dialog_out);</div><div class="line">            $(<span class="built_in">document</span>.body).append(mask);</div><div class="line"> </div><div class="line">            self.mask = mask;</div><div class="line">            self.dialogBox = dialog_out;</div><div class="line"> </div><div class="line">            <span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                self.resize();</div><div class="line">            &#125;;</div><div class="line"> </div><div class="line">            <span class="keyword">return</span> self;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"> </div><div class="line">    $.fn.deYuanDialog = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> dialog = <span class="keyword">new</span> DialogBox(options);</div><div class="line">        <span class="keyword">return</span> dialog.init();</div><div class="line">    &#125;;</div><div class="line">&#125;)(jQuery);</div></pre></td></tr></table></figure>
<h4 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> Tip = <span class="function"><span class="keyword">function</span>(<span class="params">element,options</span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.element = element;</div><div class="line">        <span class="keyword">this</span>.defaults = &#123;</div><div class="line">            <span class="string">'height'</span>: <span class="number">27</span>,</div><div class="line">            <span class="string">'width'</span>: <span class="number">150</span>,</div><div class="line">            <span class="string">'content'</span>: <span class="string">'温馨提示'</span>,</div><div class="line">            <span class="string">'background-color'</span>: <span class="string">'#000000'</span>,</div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">this</span>.options = $.extend(<span class="keyword">this</span>.defaults,options);</div><div class="line">    &#125;;</div><div class="line"> </div><div class="line">    Tip.prototype = &#123;</div><div class="line"> </div><div class="line">        <span class="attr">hide</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="comment">//$(self.element).remove();</span></div><div class="line">        &#125;,</div><div class="line"> </div><div class="line">        <span class="attr">init</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">            <span class="keyword">var</span> element = self.element;</div><div class="line">            <span class="keyword">var</span> pos_l = element.offset().left;</div><div class="line">            <span class="keyword">var</span> pos_t = element.offset().top;</div><div class="line"> </div><div class="line">            <span class="keyword">var</span> tip_out = $(<span class="string">'&lt;div class="tip-out"&gt;&lt;span class="tip-arrow"&gt;&lt;/span&gt;&lt;/div&gt;'</span>);</div><div class="line">            <span class="keyword">var</span> tip_body = $(<span class="string">'&lt;div class="tip-body"&gt;&lt;/div&gt;'</span>);</div><div class="line">            tip_body.html(self.defaults.content);</div><div class="line">            tip_out.append(tip_body);</div><div class="line">            tip_out.css(&#123;</div><div class="line">                <span class="string">'left'</span>: pos_l,</div><div class="line">                <span class="string">'top'</span>: pos_t - self.defaults.height - <span class="number">13</span>,</div><div class="line">            &#125;).show();</div><div class="line">            $(<span class="built_in">document</span>.body).append(tip_out);</div><div class="line"> </div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">hide</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                tip_out.stop().fadeOut(<span class="string">'slow'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;tip_out.remove();&#125;);</div><div class="line">            &#125;</div><div class="line"> </div><div class="line">            setTimeout(hide,<span class="number">3000</span>);</div><div class="line"> </div><div class="line">            <span class="keyword">return</span> self;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"> </div><div class="line">    $.fn.deYuanTip = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> tip = <span class="keyword">new</span> Tip(<span class="keyword">this</span>,options);</div><div class="line">        <span class="keyword">return</span> tip.init();</div><div class="line">    &#125;;</div><div class="line">&#125;)(jQuery);</div></pre></td></tr></table></figure>
<h4 id="Banner"><a href="#Banner" class="headerlink" title="Banner"></a>Banner</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">var</span> Scrolling = <span class="function"><span class="keyword">function</span>(<span class="params">element,options</span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.element = element;</div><div class="line">        <span class="keyword">this</span>.defaults = &#123;</div><div class="line">            <span class="string">'height'</span>: <span class="number">400</span>,  <span class="comment">// 默认高度</span></div><div class="line">            <span class="string">'interval'</span>: <span class="number">3000</span>    <span class="comment">// 默认时间间隔ms</span></div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">this</span>.options = $.extend(<span class="keyword">this</span>.defaults,options);</div><div class="line">    &#125;;</div><div class="line"> </div><div class="line">    Scrolling.prototype = &#123;</div><div class="line">        <span class="attr">d_w</span> : <span class="number">0</span>,    <span class="comment">// 浏览器宽度</span></div><div class="line">        sort: <span class="number">0</span>,    <span class="comment">// 图片顺序</span></div><div class="line">        count : <span class="number">0</span>,  <span class="comment">// 图片数量</span></div><div class="line"> </div><div class="line">        <span class="comment">// 分页按钮</span></div><div class="line">        scrollBtn: <span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> step = <span class="built_in">parseInt</span>(i) ? <span class="built_in">parseInt</span>(i) : <span class="number">0</span>;</div><div class="line">            <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">            <span class="keyword">var</span> element = $(self.element);</div><div class="line">            <span class="keyword">var</span> banner = element.find(<span class="string">'.banner-inner'</span>);</div><div class="line"> </div><div class="line">            banner.stop().animate(&#123;</div><div class="line">                <span class="string">'left'</span>: -self.d_w * step</div><div class="line">            &#125;);</div><div class="line"> </div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;,</div><div class="line"> </div><div class="line">        <span class="comment">// 初始化</span></div><div class="line">        init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">            <span class="keyword">var</span> element = $(self.element);</div><div class="line">            self.d_w = $(<span class="built_in">document</span>).width();</div><div class="line"> </div><div class="line">            <span class="keyword">var</span> inner = element.find(<span class="string">'.banner-inner'</span>);</div><div class="line">            <span class="keyword">var</span> a = inner.find(<span class="string">'a'</span>);</div><div class="line">            self.count = a.length - <span class="number">1</span>;</div><div class="line">            <span class="comment">//设置包裹容器高宽</span></div><div class="line">            <span class="keyword">var</span> wrap = element.find(<span class="string">'.banner-img'</span>);</div><div class="line">            wrap.css(&#123;</div><div class="line">                <span class="string">'height'</span>: self.defaults.height,</div><div class="line">                <span class="string">'width'</span>: self.d_w</div><div class="line">            &#125;);</div><div class="line">            <span class="comment">// 设置内容器高宽</span></div><div class="line">            inner.css(&#123;</div><div class="line">                <span class="string">'height'</span>: self.defaults.height,</div><div class="line">                <span class="string">'width'</span>: (self.count+<span class="number">1</span>) * self.d_w</div><div class="line">            &#125;);</div><div class="line">            <span class="comment">// 设置内容高宽</span></div><div class="line">            a.css(&#123;</div><div class="line">                <span class="string">'height'</span>: self.defaults.height,</div><div class="line">                <span class="string">'width'</span>: self.d_w</div><div class="line">            &#125;);</div><div class="line">            <span class="comment">// 设置btn点击事件</span></div><div class="line">            <span class="keyword">var</span> pages = element.find(<span class="string">'li'</span>);</div><div class="line">            pages.each(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> page = $(<span class="keyword">this</span>);</div><div class="line">                page.on(<span class="string">'mousedown'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                    pages.removeClass(<span class="string">'page-active'</span>);</div><div class="line">                    $(<span class="keyword">this</span>).addClass(<span class="string">'page-active'</span>);</div><div class="line">                    self.sort = i;</div><div class="line">                    self.scrollBtn(self.sort);</div><div class="line">                &#125;);</div><div class="line">            &#125;);</div><div class="line">            <span class="keyword">var</span> btns = element.find(<span class="string">'.banner-btn'</span>);</div><div class="line">            btns.remove();</div><div class="line">            <span class="keyword">var</span> len = pages.length;</div><div class="line">            btns.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> btn = $(<span class="keyword">this</span>);</div><div class="line">                btn.on(<span class="string">'mousedown'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                    <span class="keyword">var</span> left = $(<span class="keyword">this</span>).hasClass(<span class="string">'left-btn'</span>);</div><div class="line">                    <span class="keyword">var</span> right = $(<span class="keyword">this</span>).hasClass(<span class="string">'right-btn'</span>);</div><div class="line">                    <span class="keyword">if</span>(left)&#123;</div><div class="line">                        <span class="keyword">if</span>(self.sort &lt; len - <span class="number">1</span>)&#123;</div><div class="line">                            self.sort += <span class="number">1</span>;</div><div class="line">                        &#125;</div><div class="line">                        self.scrollBtn(self.sort);</div><div class="line">                        pages.removeClass(<span class="string">'page-active'</span>);</div><div class="line">                        pages.eq(self.sort).addClass(<span class="string">'page-active'</span>);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span>(right)&#123;</div><div class="line">                        <span class="keyword">if</span>(self.sort &gt; <span class="number">0</span>)&#123;</div><div class="line">                            self.sort -= <span class="number">1</span>;</div><div class="line">                        &#125;</div><div class="line">                        self.scrollBtn(self.sort);</div><div class="line">                        pages.removeClass(<span class="string">'page-active'</span>);</div><div class="line">                        pages.eq(self.sort).addClass(<span class="string">'page-active'</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125;);</div><div class="line"> </div><div class="line">            <span class="comment">// 当窗口改变大小时重新初始化banner</span></div><div class="line">            <span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                self.init();</div><div class="line">            &#125;;</div><div class="line"> </div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;,</div><div class="line"> </div><div class="line">        <span class="comment">// 自动播放</span></div><div class="line">        scrollAuto: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">            <span class="keyword">var</span> banner = $(self.element).find(<span class="string">'.banner-inner'</span>);</div><div class="line">            <span class="keyword">var</span> element = $(self.element);</div><div class="line">            <span class="keyword">var</span> btns = element.find(<span class="string">'li'</span>);</div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">scroll</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">if</span>(self.sort &lt;= self.count)&#123;</div><div class="line">                    banner.stop().animate(&#123;</div><div class="line">                        <span class="string">'left'</span>: (-self.d_w * self.sort)</div><div class="line">                    &#125;);</div><div class="line"> </div><div class="line">                    btns.removeClass(<span class="string">'page-active'</span>);</div><div class="line">                    btns.eq(self.sort).addClass(<span class="string">'page-active'</span>);</div><div class="line"> </div><div class="line">                    self.sort++;</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    self.sort = <span class="number">0</span>;</div><div class="line">                    banner.stop().animate(&#123;</div><div class="line">                        <span class="string">'left'</span>: <span class="number">0</span></div><div class="line">                    &#125;);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            setInterval(scroll, self.defaults.interval);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"> </div><div class="line">    $.fn.deYuanBanner = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> scrolling = <span class="keyword">new</span> Scrolling(<span class="keyword">this</span>, options);</div><div class="line">        scrolling.init().scrollAuto();</div><div class="line">    &#125;</div><div class="line">&#125;)(jQuery);</div></pre></td></tr></table></figure>
<h4 id="GotoTop"><a href="#GotoTop" class="headerlink" title="GotoTop"></a>GotoTop</h4><hr>
<ul>
<li>当窗口滚动大于300px时出现回底部按钮</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gotop = $(<span class="string">'&lt;div class="go-to-top" title="回到顶部"&gt;&lt;/div&gt;'</span>);</div><div class="line">$(<span class="built_in">document</span>.body).append(gotop);</div><div class="line">$(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>($(<span class="built_in">window</span>).scrollTop()&gt;<span class="number">300</span>)&#123;</div><div class="line">        gotop.fadeIn(<span class="string">'fast'</span>);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        gotop.fadeOut(<span class="string">'fast'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">gotop.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">'body,html'</span>).animate(&#123;<span class="attr">scrollTop</span>:<span class="number">0</span>&#125;,<span class="number">1000</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="判断用户是否用低版本的IE浏览器访问网页，如是，则提醒升级"><a href="#判断用户是否用低版本的IE浏览器访问网页，如是，则提醒升级" class="headerlink" title="判断用户是否用低版本的IE浏览器访问网页，如是，则提醒升级"></a>判断用户是否用低版本的IE浏览器访问网页，如是，则提醒升级</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> oldIE = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">'IE55'</span>,<span class="string">'IE6'</span>,<span class="string">'IE7'</span>,<span class="string">'IE8'</span>);</div><div class="line">    <span class="keyword">var</span> browser = $Dy.WhichBrowser();</div><div class="line">    <span class="keyword">if</span>(oldIE.toString().indexOf(browser)&gt;<span class="number">-1</span>)&#123;</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> old_browser = $(<span class="string">'&lt;div class="old-browser"&gt;您的浏览器版本过低，为您让您获得更好的浏览体验，请您升级至高版本浏览器，如IE10，Firefox，Chrome。&lt;/div&gt;'</span>);</div><div class="line">            <span class="keyword">var</span> close = $(<span class="string">'&lt;span class="old-close" title="关闭"&gt;×&lt;/span&gt;'</span>);</div><div class="line">            old_browser.append(close);</div><div class="line">            $(<span class="built_in">document</span>.body).prepend(old_browser);</div><div class="line">            old_browser.fadeIn();</div><div class="line"> </div><div class="line">            close.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                $Dy.SetCookie(<span class="string">'old_browser_warn'</span>,<span class="literal">true</span>,<span class="number">1</span>);</div><div class="line">                old_browser.remove();</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        <span class="keyword">var</span> is_close = $Dy.GetCookie(<span class="string">'old_browser_warn'</span>);</div><div class="line">        <span class="keyword">if</span>(is_close.length===<span class="number">0</span>)&#123;</div><div class="line">            setTimeout(append,<span class="number">2000</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;第一部分-JavaScript工具函数&quot;&gt;&lt;a href=&quot;#第一部分-JavaScript工具函数&quot; class=&quot;headerlink&quot; title=&quot;第一部分 JavaScript工具函数&quot;&gt;&lt;/a&gt;第一部分 JavaScript工具函数&lt;/h3&gt;&lt;hr&gt;
&lt;h4 id=&quot;转义特殊字符为html实体&quot;&gt;&lt;a href=&quot;#转义特殊字符为html实体&quot; class=&quot;headerlink&quot; title=&quot;转义特殊字符为html实体&quot;&gt;&lt;/a&gt;转义特殊字符为html实体&lt;/h4&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;HtmlEncode: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;str&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; str.replace(&lt;span class=&quot;regexp&quot;&gt;/&amp;amp;/g&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;&amp;amp;amp;&#39;&lt;/span&gt;).replace(&lt;span class=&quot;regexp&quot;&gt;/\&quot;/g&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;&amp;amp;quot;&#39;&lt;/span&gt;).replace(&lt;span class=&quot;regexp&quot;&gt;/&amp;lt;/g&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;&amp;amp;lt;&#39;&lt;/span&gt;).replace(&lt;span class=&quot;regexp&quot;&gt;/&amp;gt;/g&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;&amp;amp;gt;&#39;&lt;/span&gt;).replace(&lt;span class=&quot;regexp&quot;&gt;/&#39;/g&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;&amp;amp;apos;&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;,&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://www.poetries.top/categories/Front-End/"/>
    
    
      <category term="Snippet" scheme="http://www.poetries.top/tags/Snippet/"/>
    
      <category term="Javascript" scheme="http://www.poetries.top/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Emmet常用快捷键</title>
    <link href="http://www.poetries.top/2016/09/09/Emmet%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://www.poetries.top/2016/09/09/Emmet常用快捷键/</id>
    <published>2016-09-09T13:00:08.000Z</published>
    <updated>2016-09-27T15:41:22.575Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><hr>
<ul>
<li><code>div+div&gt;p&gt;span+em^bq</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">blockquote</span>&gt;</span><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><code>div+div&gt;p&gt;span+em^^bq</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li><code>div&gt;(header&gt;ul&gt;li*2&gt;a)+footer&gt;p</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><code>(div&gt;dl&gt;(dt+dd)*3)+footer&gt;p</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><code>ul&gt;li.item$*5</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item1"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item2"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item3"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item4"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item5"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><code>h$[title=item$]{Header $}*3</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">title</span>=<span class="string">"item1"</span>&gt;</span>Header 1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">title</span>=<span class="string">"item2"</span>&gt;</span>Header 2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">title</span>=<span class="string">"item3"</span>&gt;</span>Header 3<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><code>ul&gt;li.item$$$*5</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item001"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item002"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item003"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item004"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item005"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><code>ul&gt;li.item$@-*5</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item5"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item4"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item3"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item2"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item1"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><code>ul&gt;li.item$@3*5</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item3"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item4"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item5"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item6"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item7"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><code>form#search.wide</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"search"</span> <span class="attr">class</span>=<span class="string">"wide"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><code>p.class1.class2.class3</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"class1 class2 class3"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><code>td[rowspan=2 colspan=3 title]</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">"2"</span> <span class="attr">colspan</span>=<span class="string">"3"</span> <span class="attr">title</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div></pre></td></tr></table></figure>
<hr>
<h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><hr>
<ul>
<li><strong><code>!</code></strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><strong><code>a:link</code></strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><strong><code>a:mail</code></strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><strong><code>link:css</code></strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"style.css"</span> /&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><strong><code>link:favicon</code></strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"shortcut icon"</span> <span class="attr">type</span>=<span class="string">"image/x-icon"</span> <span class="attr">href</span>=<span class="string">"favicon.ico"</span> /&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><strong><code>link:rss</code></strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"alternate"</span> <span class="attr">type</span>=<span class="string">"application/rss+xml"</span> <span class="attr">title</span>=<span class="string">"RSS"</span> <span class="attr">href</span>=<span class="string">"rss.xml"</span> /&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><strong><code>meta:utf</code></strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=UTF-8"</span> /&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><strong><code>script:src</code></strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">""</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><code>form:get</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<hr>
<ul>
<li><strong><code>input:hidden</code>,<code>input:h</code></strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">""</span> /&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><code>input:text</code>, <code>input:t</code></li>
<li><code>input:password,</code> <code>input:p</code></li>
<li><code>input:checkbox</code>, <code>input:c</code></li>
<li><code>input:radio</code>,<code>input:r</code></li>
<li><code>input:file</code>, <code>input:f</code></li>
<li><code>input:submit</code>, <code>input:s</code></li>
<li><code>input:image</code>,<code>input:i</code></li>
<li><code>input:button</code>, <code>input:b</code></li>
</ul>
<hr>
<ul>
<li><strong><code>option</code>, <code>opt</code></strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><code>button:disabled</code>,<code>button:d</code>, <code>btn:d</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">disabled</span>=<span class="string">"disabled"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><strong><code>ifr</code></strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">frameborder</span>=<span class="string">"0"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><code>btn</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><strong><code>ul+</code></strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><strong><code>dl+</code></strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div><div class="line">`</div></pre></td></tr></table></figure>
<ul>
<li><strong><code>table+</code></strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><strong><code>tr+</code></strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><strong><code>select+</code></strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><strong><code>c</code></strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- --&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><strong><code>cc:ie6</code></strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--[if lte IE 6]&gt;</span></div><div class="line">    $&#123;child&#125;</div><div class="line">&lt;![endif]--&gt;</div></pre></td></tr></table></figure>
<h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><h4 id="visual-formating"><a href="#visual-formating" class="headerlink" title="visual formating"></a>visual formating</h4><hr>
<ul>
<li><p><code>pos:s</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">position</span><span class="selector-pseudo">:static</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>pos:a</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>pos:r</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">position</span><span class="selector-pseudo">:relative</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>pos:f</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">position</span><span class="selector-pseudo">:fixed</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>t</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">top</span>:;</div></pre></td></tr></table></figure>
</li>
<li><p><code>b:a</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">bottom</span><span class="selector-pseudo">:auto</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>l</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">left</span>:;</div></pre></td></tr></table></figure>
</li>
<li><p><code>l:a</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">left</span><span class="selector-pseudo">:auto</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>z</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">z-index</span>:;</div></pre></td></tr></table></figure>
</li>
<li><p><code>z:a</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">z-index</span><span class="selector-pseudo">:auto</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>fl</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>fl:n</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">float</span><span class="selector-pseudo">:none</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>fl:l</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>fl:r</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">float</span><span class="selector-pseudo">:right</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>cl</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">clear</span><span class="selector-pseudo">:both</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>cl:n</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">clear</span><span class="selector-pseudo">:none</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>cl:l</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">clear</span><span class="selector-pseudo">:left</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>cl:r</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">clear</span><span class="selector-pseudo">:right</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>cl:b</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">clear</span><span class="selector-pseudo">:both</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>d</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">display</span><span class="selector-pseudo">:block</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>d:n</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">display</span><span class="selector-pseudo">:none</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>d:b</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">display</span><span class="selector-pseudo">:block</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>d:i</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">display</span><span class="selector-pseudo">:inline</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>d:ib</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">display</span><span class="selector-pseudo">:inline-block</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>d:itb</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">display</span><span class="selector-pseudo">:inline-table</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>d:tbc</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">display</span><span class="selector-pseudo">:table-cell</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>v</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">visibility</span><span class="selector-pseudo">:hidden</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>v:v</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">visibility</span><span class="selector-pseudo">:visible</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>v:h</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">visibility</span><span class="selector-pseudo">:hidden</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>ov</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">overflow</span><span class="selector-pseudo">:hidden</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>ov:v</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">overflow</span><span class="selector-pseudo">:visible</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>ov:h</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">overflow</span><span class="selector-pseudo">:hidden</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>ov:s</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">overflow</span><span class="selector-pseudo">:scroll</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>zoo, zm</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">zoom</span><span class="selector-pseudo">:1</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>cur:d</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">cursor</span><span class="selector-pseudo">:default</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>cur:ha</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">cursor</span><span class="selector-pseudo">:hand</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>cur:p</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">cursor</span><span class="selector-pseudo">:pointer</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h4 id="Margin-amp-Padding"><a href="#Margin-amp-Padding" class="headerlink" title="Margin &amp; Padding"></a>Margin &amp; Padding</h4><hr>
<ul>
<li><p><code>m:a</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">margin</span><span class="selector-pseudo">:auto</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>mt</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">margin-top</span>:;</div></pre></td></tr></table></figure>
</li>
<li><p><code>mt:a</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">margin-top</span><span class="selector-pseudo">:auto</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>mr</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">margin-right</span>:;</div></pre></td></tr></table></figure>
</li>
<li><p><code>mr:a</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">margin-right</span><span class="selector-pseudo">:auto</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>mb</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">margin-bottom</span>:;</div></pre></td></tr></table></figure>
</li>
<li><p><code>mb:a</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">margin-bottom</span><span class="selector-pseudo">:auto</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>ml</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">margin-left</span>:;</div></pre></td></tr></table></figure>
</li>
<li><p><code>ml:a</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">margin-left</span><span class="selector-pseudo">:auto</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>pt</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">padding-top</span>:;</div></pre></td></tr></table></figure>
</li>
<li><p><code>pr</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">padding-right</span>:;</div></pre></td></tr></table></figure>
</li>
<li><p><code>pb</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">padding-bottom</span>:;</div></pre></td></tr></table></figure>
</li>
<li><p><code>pl</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">padding-left</span>:;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h4 id="Font"><a href="#Font" class="headerlink" title="Font"></a>Font</h4><ul>
<li><p><code>fw</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">font-weight</span>:;</div></pre></td></tr></table></figure>
</li>
<li><p><code>fw:n</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">font-weight</span><span class="selector-pseudo">:normal</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>fw:b</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">font-weight</span><span class="selector-pseudo">:bold</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>fw:br</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">font-weight</span><span class="selector-pseudo">:bolder</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>fw:lr</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">font-weight</span><span class="selector-pseudo">:lighter</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>fs</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">font-style:$&#123;italic&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p><code>fs:n</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">font-style</span><span class="selector-pseudo">:normal</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>fz</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">font-size</span>:;</div></pre></td></tr></table></figure>
</li>
<li><p><code>ff</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">font-family</span>:;</div></pre></td></tr></table></figure>
</li>
<li><p><code>ff:s</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">font-family</span><span class="selector-pseudo">:serif</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>ff:ss</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">font-family</span><span class="selector-pseudo">:sans-serif</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>ff:m</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">font-family</span><span class="selector-pseudo">:monospace</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>ff:a</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">font-family</span>: <span class="selector-tag">Arial</span>, "<span class="selector-tag">Helvetica</span> <span class="selector-tag">Neue</span>", <span class="selector-tag">Helvetica</span>, <span class="selector-tag">sans-serif</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>ff:t</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">font-family</span>: "<span class="selector-tag">Times</span> <span class="selector-tag">New</span> <span class="selector-tag">Roman</span>", <span class="selector-tag">Times</span>, <span class="selector-tag">Baskerville</span>, <span class="selector-tag">Georgia</span>, <span class="selector-tag">serif</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>ff:v</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">font-family</span>: <span class="selector-tag">Verdana</span>, <span class="selector-tag">Geneva</span>, <span class="selector-tag">sans-serif</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h4 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h4><ul>
<li><p><code>bg</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background</span>:<span class="selector-id">#000</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>bg+</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background</span>:<span class="selector-id">#fff</span> <span class="selector-tag">url</span>() 0 0 <span class="selector-tag">no-repeat</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>bg:n</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background</span><span class="selector-pseudo">:none</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>bgc</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background-color</span>:<span class="selector-id">#fff</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>bgc:t</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background-color</span><span class="selector-pseudo">:transparent</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>bgi</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background-image</span><span class="selector-pseudo">:url()</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>bgi:n</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background-image</span><span class="selector-pseudo">:none</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>bgr</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background-repeat</span>:;</div></pre></td></tr></table></figure>
</li>
<li><p><code>bgr:n</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background-repeat</span><span class="selector-pseudo">:no-repeat</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>bgr:x</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background-repeat</span><span class="selector-pseudo">:repeat-x</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>bgr:y</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background-repeat</span><span class="selector-pseudo">:repeat-y</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>bgr:sp</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background-repeat</span><span class="selector-pseudo">:space</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>bgr:rd</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background-repeat</span><span class="selector-pseudo">:round</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>bga</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background-attachment</span>:;</div></pre></td></tr></table></figure>
</li>
<li><p><code>bga:f</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background-attachment</span><span class="selector-pseudo">:fixed</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>bga:s</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background-attachment</span><span class="selector-pseudo">:scroll</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>bgp</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background-position</span><span class="selector-pseudo">:0</span> 0;</div></pre></td></tr></table></figure>
</li>
<li><p><code>bgpx</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background-position-x</span>:;</div></pre></td></tr></table></figure>
</li>
<li><p><code>bgpy</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background-position-y</span>:;</div></pre></td></tr></table></figure>
</li>
<li><p><code>bgbk</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background-break</span>:;</div></pre></td></tr></table></figure>
</li>
<li><p><code>bgbk:bb</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background-break</span><span class="selector-pseudo">:bounding-box</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>bgbk:eb</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background-break</span><span class="selector-pseudo">:each-box</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>bgbk:c</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background-break</span><span class="selector-pseudo">:continuous</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>bgcp</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background-clip</span><span class="selector-pseudo">:padding-box</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>bgcp:bb</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background-clip</span><span class="selector-pseudo">:border-box</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>bgcp:pb</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background-clip</span><span class="selector-pseudo">:padding-box</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>bgcp:cb</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background-clip</span><span class="selector-pseudo">:content-box</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>bgcp:nc</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background-clip</span><span class="selector-pseudo">:no-clip</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>bgo</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background-origin</span>:;</div></pre></td></tr></table></figure>
</li>
<li><p><code>bgo:pb</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background-origin</span><span class="selector-pseudo">:padding-box</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>bgo:bb</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background-origin</span><span class="selector-pseudo">:border-box</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>bgo:cb</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background-origin</span><span class="selector-pseudo">:content-box</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>bgsz</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background-size</span>:;</div></pre></td></tr></table></figure>
</li>
<li><p><code>bgsz:a</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background-size</span><span class="selector-pseudo">:auto</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>bgsz:ct</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background-size</span><span class="selector-pseudo">:contain</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>bgsz:cv</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background-size</span><span class="selector-pseudo">:cover</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Color"><a href="#Color" class="headerlink" title="Color"></a>Color</h4><hr>
<ul>
<li><p><code>c</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">color</span>:<span class="selector-id">#000</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><code>c:r</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">color</span><span class="selector-pseudo">:rgb(0</span>, 0, 0);</div></pre></td></tr></table></figure>
</li>
<li><p><code>c:ra</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">color</span><span class="selector-pseudo">:rgba(0</span>, 0, 0, <span class="selector-class">.5</span>);</div></pre></td></tr></table></figure>
</li>
<li><p><code>op</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">opacity</span>:;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><hr>
<ul>
<li><strong><code>·@m·</code>, <code>@media</code>·</strong></li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">media</span> screen &#123;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong><code>@i</code>, <code>@import</code></strong></li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">import</span> url();</div></pre></td></tr></table></figure>
<ul>
<li><strong><code>@kf</code></strong></li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">keyframes</span> identifier &#123;</div><div class="line">    <span class="selector-tag">from</span> &#123;  &#125;</div><div class="line">    <span class="selector-tag">to</span> &#123;  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong><code>@f+</code></strong></li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">font-face</span> &#123;</div><div class="line">    <span class="attribute">font-family</span>: <span class="string">'FontName'</span>;</div><div class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'FileName.eot'</span>);</div><div class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'FileName.eot?#iefix'</span>) <span class="built_in">format</span>(<span class="string">'embedded-opentype'</span>),</div><div class="line">         <span class="built_in">url</span>(<span class="string">'FileName.woff'</span>) <span class="built_in">format</span>(<span class="string">'woff'</span>),</div><div class="line">         <span class="built_in">url</span>(<span class="string">'FileName.ttf'</span>) <span class="built_in">format</span>(<span class="string">'truetype'</span>),</div><div class="line">         <span class="built_in">url</span>(<span class="string">'FileName.svg#FontName'</span>) <span class="built_in">format</span>(<span class="string">'svg'</span>);</div><div class="line">    <span class="attribute">font-style</span>: normal;</div><div class="line">    <span class="attribute">font-weight</span>: normal;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong><code>@f</code></strong></li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">font-face</span> &#123;</div><div class="line">    <span class="attribute">font-family</span>:;</div><div class="line">    <span class="attribute">src</span>:<span class="built_in">url</span>(|);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong><code>!</code></strong></li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">!<span class="selector-tag">important</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本语法&quot;&gt;&lt;a href=&quot;#基本语法&quot; class=&quot;headerlink&quot; title=&quot;基本语法&quot;&gt;&lt;/a&gt;基本语法&lt;/h3&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;div+div&amp;gt;p&amp;gt;span+em^bq&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;em&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;em&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;blockquote&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;blockquote&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;div+div&amp;gt;p&amp;gt;span+em^^bq&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;em&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;em&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;blockquote&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;blockquote&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="工欲善其事必先利其器" scheme="http://www.poetries.top/categories/%E5%B7%A5%E6%AC%B2%E5%96%84%E5%85%B6%E4%BA%8B%E5%BF%85%E5%85%88%E5%88%A9%E5%85%B6%E5%99%A8/"/>
    
    
      <category term="Emmet" scheme="http://www.poetries.top/tags/Emmet/"/>
    
  </entry>
  
  <entry>
    <title>display:table-cell的应用[转]</title>
    <link href="http://www.poetries.top/2016/09/07/display_table-cell%E7%9A%84%E5%BA%94%E7%94%A8%5B%E8%BD%AC%5D/"/>
    <id>http://www.poetries.top/2016/09/07/display_table-cell的应用[转]/</id>
    <published>2016-09-07T16:00:08.000Z</published>
    <updated>2016-09-27T15:41:22.579Z</updated>
    
    <content type="html"><![CDATA[<h3 id="display-table-cell属性简述"><a href="#display-table-cell属性简述" class="headerlink" title="display:table-cell属性简述"></a>display:table-cell属性简述</h3><hr>
<ul>
<li><code>display:table-cell</code>属性指让标签元素以表格单元格的形式呈现，类似于<code>td</code>标签。目前<code>IE8+</code>以及其他现代浏览器都是支持此属性的，但是<code>IE6/7</code>只能对你说sorry了，这一事实也是大大制约了<code>display:table-cell</code>属性在实际项目中的应用</li>
<li><code>table-cell</code>同样会被其他一些<code>CSS</code>属性破坏，例如<code>float</code>, <code>position:absolute</code>，所以，在使用<code>display:table-cell</code>与<code>loat:left</code>或是<code>position:absolute</code>属性尽量不用同用。设置了<code>display:table-cell</code>的元素对宽度高度敏感，对<code>margin</code>值无反应，响应<code>padding</code>属性</li>
</ul>
<a id="more"></a>
<h3 id="display-table-cell与大小不固定元素的垂直居中"><a href="#display-table-cell与大小不固定元素的垂直居中" class="headerlink" title="display:table-cell与大小不固定元素的垂直居中"></a>display:table-cell与大小不固定元素的垂直居中</h3><hr>
<ul>
<li>使用<code>display:table-cell</code>让大小不固定元素垂直居中已经是很老的方法了</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line">  <span class="attribute">display</span>:table-cell; </div><div class="line">  <span class="attribute">width</span>:<span class="number">1em</span>;</div><div class="line">  <span class="attribute">height</span>:<span class="number">1em</span>;</div><div class="line">  <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#beceeb</span>; </div><div class="line">  <span class="attribute">font-size</span>:<span class="number">144px</span>; </div><div class="line">  <span class="attribute">text-align</span>:center; </div><div class="line">  <span class="attribute">vertical-align</span>:middle;</div><div class="line">&#125; </div><div class="line"><span class="selector-tag">div</span> <span class="selector-tag">img</span>&#123;</div><div class="line">  <span class="attribute">vertical-align</span>:middle;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="display-table-cell与两栏自适应布局"><a href="#display-table-cell与两栏自适应布局" class="headerlink" title="display:table-cell与两栏自适应布局"></a>display:table-cell与两栏自适应布局</h3><hr>
<ul>
<li><code>display:table-cell</code>可以用在两栏的自适应布局上</li>
<li>对于不认识<code>display:table-cell</code>属性的IE6/7呢，使用display:inline-block属性代替<code>display:table-cell</code>就完全ok</li>
</ul>
<h3 id="display-table-cell下的等高布局"><a href="#display-table-cell下的等高布局" class="headerlink" title="display:table-cell下的等高布局"></a>display:table-cell下的等高布局</h3><hr>
<ul>
<li><code>table</code>表格中的单元格最大的特点之一就是同一行列表元素都等高。所以，很多时候，我们需要等高布局的时候，就可以借助<code>display:table-cell属</code>性</li>
<li><code>table</code>表格中的单元格最大的特点之一就是同一行列表元素都等高。所以，很多时候，我们需要等高布局的时候，就可以借助<code>display:table-cell属</code>性</li>
</ul>
<hr>
<ul>
<li><a href="http://www.zhangxinxu.com/wordpress/2010/10/%E6%88%91%E6%89%80%E7%9F%A5%E9%81%93%E7%9A%84%E5%87%A0%E7%A7%8Ddisplaytable-cell%E7%9A%84%E5%BA%94%E7%94%A8/" target="_blank" rel="external"> 原文出处</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;display-table-cell属性简述&quot;&gt;&lt;a href=&quot;#display-table-cell属性简述&quot; class=&quot;headerlink&quot; title=&quot;display:table-cell属性简述&quot;&gt;&lt;/a&gt;display:table-cell属性简述&lt;/h3&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;display:table-cell&lt;/code&gt;属性指让标签元素以表格单元格的形式呈现，类似于&lt;code&gt;td&lt;/code&gt;标签。目前&lt;code&gt;IE8+&lt;/code&gt;以及其他现代浏览器都是支持此属性的，但是&lt;code&gt;IE6/7&lt;/code&gt;只能对你说sorry了，这一事实也是大大制约了&lt;code&gt;display:table-cell&lt;/code&gt;属性在实际项目中的应用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;table-cell&lt;/code&gt;同样会被其他一些&lt;code&gt;CSS&lt;/code&gt;属性破坏，例如&lt;code&gt;float&lt;/code&gt;, &lt;code&gt;position:absolute&lt;/code&gt;，所以，在使用&lt;code&gt;display:table-cell&lt;/code&gt;与&lt;code&gt;loat:left&lt;/code&gt;或是&lt;code&gt;position:absolute&lt;/code&gt;属性尽量不用同用。设置了&lt;code&gt;display:table-cell&lt;/code&gt;的元素对宽度高度敏感，对&lt;code&gt;margin&lt;/code&gt;值无反应，响应&lt;code&gt;padding&lt;/code&gt;属性&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://www.poetries.top/categories/Front-End/"/>
    
    
      <category term="CSS" scheme="http://www.poetries.top/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>hasLayout知多少</title>
    <link href="http://www.poetries.top/2016/09/07/hasLayout%E7%9F%A5%E5%A4%9A%E5%B0%91/"/>
    <id>http://www.poetries.top/2016/09/07/hasLayout知多少/</id>
    <published>2016-09-07T11:20:08.000Z</published>
    <updated>2016-09-27T15:41:22.579Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是haslayout"><a href="#什么是haslayout" class="headerlink" title="什么是haslayout"></a>什么是haslayout</h3><hr>
<ul>
<li>什么是<code>hasLayout</code>？<code>hasLayout</code>是<code>IE</code>特有的一个属性。很多的<code>ie</code>下的<code>css bug</code>都与其息息相关。在<code>ie</code>中，一个元素要么自己对自身的内容进行计算大小和组织，要么依赖于父元素来计算尺寸和组织内容。当一个元素的<code>hasLayout</code>属性值为<code>true</code>时，它负责对自己和可能的子孙元素进行尺寸计算和定位。虽然这意味着这个元素需要花更多的代价来维护自身和里面的内容，而不是依赖于祖先元素来完成这些工作<a id="more"></a>
</li>
</ul>
<h3 id="默认拥有haslayout属性"><a href="#默认拥有haslayout属性" class="headerlink" title="默认拥有haslayout属性"></a>默认拥有haslayout属性</h3><hr>
<ul>
<li><code>&lt;html&gt;</code>, <code>&lt;body&gt;</code></li>
<li><code>&lt;table&gt;</code>, <code>&lt;tr&gt;</code>, <code>&lt;th&gt;</code>,<code>&lt;td&gt;</code></li>
<li><code>&lt;img&gt;</code></li>
<li><code>&lt;hr&gt;</code></li>
<li><code>&lt;input&gt;</code>, <code>&lt;button&gt;</code>, <code>&lt;select&gt;</code>, <code>&lt;textarea&gt;</code>, <code>&lt;fieldset&gt;</code>, <code>&lt;legend&gt;</code></li>
<li><code>&lt;iframe&gt;</code>, <code>&lt;embed&gt;</code>, <code>&lt;object&gt;</code>, <code>&lt;applet&gt;</code></li>
<li><code>&lt;marquee&gt;</code></li>
</ul>
<h3 id="触发haslayout属性"><a href="#触发haslayout属性" class="headerlink" title="触发haslayout属性"></a>触发haslayout属性</h3><hr>
<ul>
<li><p>很多情况下，我们把<code>hasLayout</code>的状态改成<code>true</code>就可以解决很大部分<code>ie</code>下显示的<code>bug</code>。<br><code>hasLayout</code>属性不能直接设定，你只能通过设定一些特定的<code>css</code>属性来触发并改变 <code>hasLayout</code>状态。下面列出可以触发<code>hasLayout</code>的一些<code>CSS</code>属性值</p>
<ul>
<li><p><code>display</code></p>
<ul>
<li>启动<code>haslayout</code>的值:<code>inline-block</code> </li>
<li>取消<code>hasLayout</code>的值:其他值 </li>
</ul>
</li>
<li><p><code>width</code> / <code>height</code></p>
<ul>
<li>启动<code>hasLayout</code>的值：除了<code>auto</code>以外的值</li>
<li>取消<code>hasLayout</code>的值：<code>auto</code><ul>
<li>( 对 <code>IE6</code>及更早版本来说很常用，该方法被称为霍莉破解(<code>Holly hack</code>)，即设定这个元素的高度为 <code>1%</code>  (<code>height:1%</code>;)。但是要注意，当这个元素的 <code>overflow</code> 属性被设置为 <code>visible</code> 时，这个方法就失效了。)</li>
</ul>
</li>
</ul>
</li>
<li><p><code>position</code></p>
<ul>
<li>启动hasLayout的值：absolute </li>
<li>取消hasLayout的值：static </li>
</ul>
</li>
<li><p><code>float</code></p>
<ul>
<li>启动<code>hasLayout</code>的值：<code>left</code>或<code>right</code></li>
<li>取消<code>hasLayout</code>的值：<code>none</code> </li>
</ul>
</li>
<li><p><code>zoom</code></p>
<ul>
<li>启动<code>hasLayout</code>的值：有值 </li>
<li>取消<code>hasLayout</code>的值：<code>narmal</code>或者空值 </li>
<li>(又一个<code>ie</code>私有属性，不兼容标准。)</li>
</ul>
</li>
<li><p><code>ie7</code>还有一些额外的属性可以触发该属性（不完全列表）： </p>
<ul>
<li><code>min-height:</code> (任何值) </li>
<li><code>max-height:</code>(任何值除了<code>none</code>) </li>
<li><code>min-width:</code>(任何值) </li>
<li><code>max-width:</code> (任何值除了<code>none</code>) </li>
<li><code>overflow:</code>(任何值除了<code>visible</code>) </li>
<li><code>overflow-x:</code> (任何值除了<code>visible</code>) </li>
<li><code>overflow-y:</code> (任何值除了<code>visible</code>)</li>
<li><code>position: fixed</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="发现及使用"><a href="#发现及使用" class="headerlink" title="发现及使用"></a>发现及使用</h3><hr>
<ul>
<li>因元素<code>hasLayout</code>而导致的问题其实一般都很容易发现：往往是内容出现错位甚至完全不可见，比如含浮动或者绝对定位子元素的容器高度会塌陷，在<code>ie6/ie7</code>下我们为其添加<code>zoom：1</code>属性就触发了<code>haslayout</code>，从而修复高度塌陷的问题;再比如，我们经常会碰到<code>ie6</code>和<code>ie7</code>同时出现的<code>bug</code>，这个时候可以考虑是否源于 <code>haslayout</code>，可以添加一些可以触发<code>haslayout</code>的属性来解决</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是haslayout&quot;&gt;&lt;a href=&quot;#什么是haslayout&quot; class=&quot;headerlink&quot; title=&quot;什么是haslayout&quot;&gt;&lt;/a&gt;什么是haslayout&lt;/h3&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;什么是&lt;code&gt;hasLayout&lt;/code&gt;？&lt;code&gt;hasLayout&lt;/code&gt;是&lt;code&gt;IE&lt;/code&gt;特有的一个属性。很多的&lt;code&gt;ie&lt;/code&gt;下的&lt;code&gt;css bug&lt;/code&gt;都与其息息相关。在&lt;code&gt;ie&lt;/code&gt;中，一个元素要么自己对自身的内容进行计算大小和组织，要么依赖于父元素来计算尺寸和组织内容。当一个元素的&lt;code&gt;hasLayout&lt;/code&gt;属性值为&lt;code&gt;true&lt;/code&gt;时，它负责对自己和可能的子孙元素进行尺寸计算和定位。虽然这意味着这个元素需要花更多的代价来维护自身和里面的内容，而不是依赖于祖先元素来完成这些工作
    
    </summary>
    
      <category term="Front-End" scheme="http://www.poetries.top/categories/Front-End/"/>
    
    
      <category term="CSS" scheme="http://www.poetries.top/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS中的BFC</title>
    <link href="http://www.poetries.top/2016/09/07/CSS%E4%B8%AD%E7%9A%84BFC/"/>
    <id>http://www.poetries.top/2016/09/07/CSS中的BFC/</id>
    <published>2016-09-07T10:20:08.000Z</published>
    <updated>2016-09-27T15:41:22.575Z</updated>
    
    <content type="html"><![CDATA[<h3 id="BFC-是什么？"><a href="#BFC-是什么？" class="headerlink" title="BFC 是什么？"></a>BFC 是什么？</h3><ul>
<li><code>BFC</code> (<code>Block Formatting Contexts</code>) 即块级格式化上下文，从样式上看，它与普通的容器没有什么区别，但是从功能上，<code>BFC</code> 可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且 <code>BFC</code> 具有普通容器没有的一些特性，例如可以包含浮动元素，使到它可以包含浮动元素，从而防止出现高度塌陷的问题<a id="more"></a>
</li>
</ul>
<hr>
<h3 id="如何触发-BFC"><a href="#如何触发-BFC" class="headerlink" title="如何触发 BFC"></a>如何触发 BFC</h3><ul>
<li><p>触发 BFC 的条件</p>
<ul>
<li>浮动元素，<code>float</code> 除 <code>none</code> 以外的值</li>
<li>绝对定位元素，<code>position</code>（<code>absolute</code>，<code>fixed</code>）</li>
<li><code>display</code> 为以下其中之一的值 <code>inline-blocks</code>，<code>table-cells</code>，<code>table-captions</code></li>
<li><code>overflow</code> 除了 <code>visible</code> 以外的值（<code>hidden</code>，<code>auto</code>，<code>scroll</code>）</li>
</ul>
<ul>
<li>在 <code>CSS3</code> 中，<code>BFC</code> 叫做<code>Flow Root</code>，并增加了一些触发条件：<ul>
<li><code>display</code> 的 <code>table-caption</code> 值</li>
<li><code>position</code> 的 <code>fixed</code> 值，其实 <code>fixed</code> 是 <code>absolute</code> 的一个子类，因此在 <code>CSS2.1</code> 中使用这个值也会触发 <code>BFC</code> ，只是在<code>CSS3</code> 中更加明确了这一点</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h3 id="BFC布局规则"><a href="#BFC布局规则" class="headerlink" title="BFC布局规则"></a>BFC布局规则</h3><ul>
<li>内部的<code>Box</code>会在垂直方向，一个接一个地放置。</li>
<li><code>Box</code>垂直方向的距离由<code>margin</code>决定。属于同一个<code>BFC</code>的两个相邻<code>Box</code>的<code>margin</code>会发生重叠</li>
<li>每个元素的<code>margin box</code>的左边， 与包含块<code>border box</code>的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如 此。</li>
<li><code>BFC</code>的区域不会与<code>float box</code>重叠。</li>
<li><code>BFC</code>就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</li>
<li>计算<code>BFC</code>的高度时，浮动元素也参与计算</li>
</ul>
<hr>
<h3 id="BFC的作用及原理"><a href="#BFC的作用及原理" class="headerlink" title="BFC的作用及原理"></a>BFC的作用及原理</h3><ul>
<li><strong>自适应两栏布局</strong></li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">       <span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">       <span class="attribute">position</span>: relative;</div><div class="line">   &#125;</div><div class="line">   <span class="selector-class">.aside</span> &#123;</div><div class="line">       <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">       <span class="attribute">height</span>: <span class="number">150px</span>;</div><div class="line">       <span class="attribute">float</span>: left;</div><div class="line">       <span class="attribute">background</span>: <span class="number">#f66</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="selector-class">.main</span> &#123;</div><div class="line">       <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">       <span class="attribute">background</span>: <span class="number">#fcc</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"aside"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://p1.qhimg.com/d/inn/4055c62a/4dca44a927d4c1ffc30e3ae5f53a0b79.png" alt=""></p>
<ul>
<li>根据BFC布局规则第3条：<ul>
<li>每个元素的<code>margin box</code>的左边， 与包含块<code>border box</code>的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</li>
</ul>
</li>
<li>因此，虽然存在浮动的元素<code>aslide</code>，但<code>main</code>的左边依然会与包含块的左边相接触</li>
<li><p>根据<code>BFC</code>布局规则第四条：</p>
<ul>
<li><code>BFC</code>的区域不会与<code>float box</code>重叠</li>
</ul>
</li>
<li><p>我们可以通过通过触发<code>main</code>生成<code>BFC</code>， 来实现自适应两栏布局</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.main</span> &#123;</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>当触发<code>main</code>生成<code>BFC</code>后，这个新的<code>BFC</code>不会与浮动的<code>aside</code>重叠。因此会根据包含块的宽度，和<code>aside</code>的宽度，自动变窄。效果如下：</li>
</ul>
<p><img src="http://p6.qhimg.com/t01077886a9706cb26b.png" alt=""></p>
<ul>
<li><strong>清除内部浮动</strong></li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.par</span> &#123;</div><div class="line">    <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#fcc</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"><span class="selector-class">.child</span> &#123;</div><div class="line">    <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#f66</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">float</span>: left;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"par"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://p1.qhimg.com/t016035b58195e7909a.png" alt=""></p>
<ul>
<li>根据<code>BFC</code>布局规则第六条：<ul>
<li>计算<code>BFC</code>的高度时，浮动元素也参与计算</li>
</ul>
</li>
<li>为达到清除内部浮动，我们可以触发<code>par</code>生成<code>BFC</code>，那么<code>par</code>在计算高度时，<code>par</code>内部的浮动元素<code>child</code>也会参与计算</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.par</span> &#123;</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://p2.qhimg.com/t016bbbe5236ef1ffd5.png" alt=""></p>
<ul>
<li><strong>防止垂直 margin 重叠</strong></li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#f55</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#fcc</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">text-align</span>: center;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">100px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Haha<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hehe<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p> <img src="http://p5.qhimg.com/t01b47b8b7d153c07cc.png" alt=""></p>
<ul>
<li>两个<code>p</code>之间的距离为<code>100px</code>，发送了<code>margin</code>重叠</li>
<li>根据BFC布局规则第二条：<ul>
<li><code>Box</code>垂直方向的距离由<code>margin</code>决定。属于同一个<code>BFC</code>的两个相邻Box的<code>margin</code>会发生重叠</li>
</ul>
</li>
<li>我们可以在<code>p</code>外面包裹一层容器，并触发该容器生成一个<code>BFC</code>。那么两个<code>P</code>便不属于同一个<code>BFC</code>，就不会发生<code>margin</code>重叠了</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.wrap</span> &#123;</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#f55</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#fcc</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">text-align</span>: center;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">100px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Haha<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hehe<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://p3.qhimg.com/t0118d1d2badbb00521.png" alt=""></p>
<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>其实以上的几个例子都体现了<code>BFC</code>布局规则第五条<ul>
<li><code>BFC</code>就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此</li>
</ul>
</li>
<li>因为<code>BFC</code>内部的元素和外部的元素绝对不会互相影响，因此， 当<code>BFC</code>外部存在浮动时，它不应该影响<code>BFC</code>内部<code>Box</code>的布局，<code>BFC</code>会通过变窄，而不与浮动有重叠。同样的，当<code>BFC</code>内部有浮动时，为了不影响外部元素的布局，<code>BFC</code>计算高度时会包括浮动的高度。避免<code>margin</code>重叠也是这样的一个道理</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;BFC-是什么？&quot;&gt;&lt;a href=&quot;#BFC-是什么？&quot; class=&quot;headerlink&quot; title=&quot;BFC 是什么？&quot;&gt;&lt;/a&gt;BFC 是什么？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BFC&lt;/code&gt; (&lt;code&gt;Block Formatting Contexts&lt;/code&gt;) 即块级格式化上下文，从样式上看，它与普通的容器没有什么区别，但是从功能上，&lt;code&gt;BFC&lt;/code&gt; 可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且 &lt;code&gt;BFC&lt;/code&gt; 具有普通容器没有的一些特性，例如可以包含浮动元素，使到它可以包含浮动元素，从而防止出现高度塌陷的问题
    
    </summary>
    
      <category term="Front-End" scheme="http://www.poetries.top/categories/Front-End/"/>
    
    
      <category term="CSS" scheme="http://www.poetries.top/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>DIV+CSS系统学习笔记回顾</title>
    <link href="http://www.poetries.top/2016/09/06/DIV+CSS%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9E%E9%A1%BE/"/>
    <id>http://www.poetries.top/2016/09/06/DIV+CSS系统学习笔记回顾/</id>
    <published>2016-09-06T10:24:08.000Z</published>
    <updated>2016-09-27T15:41:22.575Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>转载请声明   <a href="http://blog.poetries.top/2016/09/06/DIV+CSS%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9E%E9%A1%BE/#more" target="_blank" rel="external">原文链接地址</a></p>
</blockquote>
<h3 id="第一部分-HTML"><a href="#第一部分-HTML" class="headerlink" title="第一部分 HTML"></a>第一部分 HTML</h3><hr>
<h4 id="第一章-职业规划和前景"><a href="#第一章-职业规划和前景" class="headerlink" title="第一章 职业规划和前景"></a>第一章 职业规划和前景</h4><hr>
<ul>
<li><p><strong>职业方向规划定位：</strong></p>
<ul>
<li><code>web</code>前端开发工程师</li>
<li><code>web</code>网站架构师</li>
<li>自己创业</li>
<li>转岗管理或其他<a id="more"></a></li>
</ul>
</li>
<li><p><strong><code>web</code>前端开发的前景展望：</strong></p>
<ul>
<li>未来<code>IT</code>行业企业需求最多的人才</li>
<li>结合最新的<code>html5</code>抢占移动端的市场</li>
<li>自己创业做老板</li>
<li>随着互联网的普及<code>web</code>开发成为企业的宠儿和核心</li>
</ul>
</li>
<li><p><strong><code>web</code>职业发展目标：</strong></p>
<ul>
<li><p>第一、梳理知识架构</p>
<ul>
<li>负责内容的<code>HTML</code></li>
<li>负责外观的<code>css</code>（层叠样式表）</li>
<li>负责行为的<code>js</code></li>
<li><code>ps</code>切图</li>
</ul>
</li>
<li><p>第二、分解目标（起步阶段、提升阶段、成型阶段）</p>
<ul>
<li><p>起步阶段：</p>
<ul>
<li>基本知识的掌握</li>
<li>常用工具的掌握</li>
<li>沟通技巧的掌握（围绕客户的需求）</li>
<li>良好的开发习惯（加注释、对齐方式）</li>
</ul>
</li>
<li><p>提升阶段：</p>
<ul>
<li>熟悉掌握<code>HTML</code>基本标签和属性</li>
<li>熟练掌握<code>css</code>的基本语法和使用</li>
<li>浏览器兼容和w3c标准的掌握</li>
<li>结合<code>html</code>+<code>css</code>+<code>js</code>开始系统项目的开发</li>
</ul>
</li>
<li><p>成型阶段：</p>
<ul>
<li>精通<code>DIV</code>+<code>CCS</code>布局</li>
<li>精通<code>css</code>样式表控制<code>html</code>标签</li>
<li>熟悉运用<code>js</code>制作动态网站的效果</li>
<li>能独立开发完成网站</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h4 id="第二章-html基本结构"><a href="#第二章-html基本结构" class="headerlink" title="第二章 html基本结构"></a>第二章 html基本结构</h4><hr>
<ul>
<li><p>认识HTML：</p>
<ul>
<li><code>html</code>不是一种编程语言，是一种标志语言</li>
<li>标记语言是由一套标识标签组成的</li>
<li><code>html</code>使用标签来描述网页</li>
</ul>
</li>
<li><p><code>html</code>结构：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;&lt;/head&gt;</div><div class="line">    &lt;body&gt;&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<ul>
<li>不成对出现的标签<br><code>&lt;br&gt;</code> <code>&lt;hr&gt;</code>  <code>&lt;meta&gt;</code> <code>&lt;img&gt;</code>  <code>&lt;input..&gt;</code>  <code>&lt;option..&gt;</code>  <code>&lt;link&gt;</code></li>
</ul>
<ul>
<li><p><strong>HTML 基本标签的讲解：</strong></p>
<ul>
<li><code>&lt;html&gt;</code> <code>&lt;head&gt;</code> <code>&lt;body&gt;</code>标签</li>
<li><code>&lt;h1&gt;</code>—-<code>&lt;h6&gt;</code>仅仅用于标题文本，不要为了产生粗体文本使用它们</li>
<li><code>&lt;p&gt;</code>标签  段落标签</li>
<li><p><code>&lt;strong&gt;&lt;b&gt;</code>标签</p>
</li>
<li><p>都会让文字产生加粗效果</p>
<ul>
<li><code>&lt;strong&gt;</code>用于强调文本，强度更深，表示重要文本—&gt;用于<code>SEO</code>优化</li>
<li><code>&lt;b&gt;</code>只是视觉加粗效果—&gt;单纯为了产生加粗</li>
</ul>
</li>
</ul>
<ul>
<li><code>&lt;em&gt;</code> <code>&lt;i&gt;</code>标签<ul>
<li><code>em</code>用于强调文本</li>
<li><code>i</code>只是视觉斜体效果</li>
<li><code>&lt;strong&gt;</code>比<code>&lt;em&gt;</code>强调更强</li>
</ul>
</li>
<li>特殊符号：<ul>
<li><code>&amp;nbsp</code>; —-&gt;空格</li>
<li><code>&amp;gt</code>; —&gt;大于号</li>
<li><code>&amp;lt</code>；—&gt;小于号</li>
<li><code>&amp;quot</code>；—&gt;引号</li>
<li><code>&amp;copy</code>;–&gt;版权号</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h4 id="第三章-html基本标签"><a href="#第三章-html基本标签" class="headerlink" title="第三章 html基本标签"></a>第三章 html基本标签</h4><hr>
<ul>
<li><p><code>HTMl</code>基本标签：</p>
<ul>
<li><code>span</code>标签<ul>
<li>对被用来组合文档中的行内元素</li>
<li>注意：span没有固定的格式表现，当对它应用样式时，才会产生视觉上的变化</li>
</ul>
</li>
<li><code>&lt;pre&gt;</code>标签<ul>
<li>文字的格式按源码的排版来显示，我们称之为预处理格式</li>
</ul>
</li>
<li><p><code>&lt;a&gt;</code>标签—&gt;他有一个必不可少的属性 href </p>
<ul>
<li><code>target</code>属性：</li>
<li><code>_self</code>(在原来页面打开) </li>
<li><code>_blank</code>（新窗口打开）</li>
<li><code>_top</code>（打开时忽略所有的框架） </li>
<li><code>_parent</code>（在父窗口中打开）</li>
</ul>
</li>
<li><p>创建锚点和锚链接</p>
<ul>
<li>锚点也是一种超链接，是页面内进行跳转的超链接<ul>
<li>第一步：创建锚点 <code>&lt;a name=&quot;锚点名称&quot;&gt;&lt;/a&gt;</code></li>
<li>第二步：使用创建好的锚点名称 <code>&lt;a href=&quot;#锚点名称&quot;&gt;内容&lt;/a&gt;</code></li>
</ul>
</li>
</ul>
</li>
<li><code>marquee</code>标签<ul>
<li>可以创建一个内容滚动效果</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;marquee direction=&quot;down&quot; loop=&quot;4&quot; onmouseover=this.stop() onmouseout=this.start()&gt;&lt;/marquee&gt;</div></pre></td></tr></table></figure>
<ul>
<li><code>direction</code> 表示滚动方向，取值有（left,right,up,down,默认left）</li>
<li><code>loop</code>表示滚动循环的次数，默认为无限循环</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">onmouseover=this.stop()  onmouseover=this.start()  scrollamout=&quot;1&quot;(滚动速度)</div></pre></td></tr></table></figure>
<ul>
<li>表示当鼠标移上区域的时候停止滚动，鼠标移开继续滚动</li>
</ul>
<hr>
<h4 id="第四章-img图片标签与路径"><a href="#第四章-img图片标签与路径" class="headerlink" title="第四章 img图片标签与路径"></a>第四章 img图片标签与路径</h4><hr>
<ul>
<li><p>图片标签与路径：</p>
<ul>
<li>常见图片格式 <code>jpg</code> <code>png</code> <code>gif</code></li>
<li><code>Gif</code>     （只支持全透明）</li>
<li><code>Jpeg</code> /<code>jpg</code>     </li>
<li><code>Png</code> 半/全透明都支持</li>
</ul>
</li>
<li><p>图片标签写法 ：</p>
<ul>
<li><code>&lt;img src=&quot;&quot; alt=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;</code></li>
</ul>
</li>
<li><p>图片四要素：</p>
<ul>
<li><code>src=&quot;&quot;</code>        图片路径</li>
<li><code>alt=&quot;&quot;</code>       图片含义</li>
<li><code>width=&quot;&quot;</code>     图片宽度 和图片大小保持一致</li>
<li><code>height=&quot;&quot;</code>     图片高度 和图片大小保持一致</li>
<li><code>title=&quot;&quot;</code></li>
</ul>
</li>
<li><p>路径知识：</p>
<ul>
<li><p>相对路径、绝对路径：</p>
<ul>
<li>相对路径：(Relative Path) 相对于该文件的路径；</li>
<li>绝对路径：(Absolute Path) 从磁盘出发的路径； </li>
</ul>
</li>
<li><p><code>&lt;img src=&quot;&quot; …… align=&quot;&quot; /&gt;</code> <code>align</code>属性–设置图片与后面文字的位置关系<br>值–<code>top</code>、<code>bottom</code>、<code>middle</code>、<code>absmiddle</code>、<code>left</code>、<code>right</code></p>
</li>
</ul>
</li>
<li><p>在静态页面中：</p>
<ul>
<li><p><code>/</code>开头表示根目录；</p>
</li>
<li><p><code>./</code>表示当前目录；（斜画线前面一个点）</p>
</li>
<li><p><code>../</code>上级目录；（斜画线前面两个点）</p>
</li>
<li><p>直接用文件名不带/也表示同一目录</p>
</li>
</ul>
<ul>
<li>这些都是相对于当前文件的位置来说的，如果用绝对路径的话就是写全了。</li>
</ul>
</li>
</ul>
<hr>
<h4 id="第五章-三种列表的讲解"><a href="#第五章-三种列表的讲解" class="headerlink" title="第五章 三种列表的讲解"></a>第五章 三种列表的讲解</h4><hr>
<ul>
<li>三种列表的知识讲解：<ul>
<li><code>&lt;ul&gt;</code>无序列表<ul>
<li>无序列表是一个没有顺序项目的列表，此列表项默认粗体圆点进行标识</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;</div><div class="line">   &lt;li&gt;&lt;/li&gt;</div><div class="line">   &lt;li&gt;&lt;/li&gt;</div><div class="line">   &lt;li&gt;&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<ul>
<li><ol>有序列表<ul>
<li>有序列表也是一列项目，只是列表项目使用的是数字进行标记。 有序列表始于 <code>&lt;ol&gt;</code> 标签。每个列表项始于 <code>&lt;li&gt;</code>标签。</li>
</ul>
</ol></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;ol&gt;</div><div class="line">   &lt;li&gt;内容一&lt;/li&gt;</div><div class="line">   &lt;li&gt;内容二&lt;/li&gt;</div><div class="line">   &lt;li&gt;内容三&lt;/li&gt;</div><div class="line">&lt;/ol&gt;</div></pre></td></tr></table></figure>
<ul>
<li><p>列表符号</p>
<ul>
<li><p>无序列表-列表符号:</p>
<ul>
<li><code>type=&quot;circle&quot;</code>  空心圆 <code>type=“disc”</code> 实心圆  默认值 <code>type=&quot;square&quot;</code> 方块符</li>
</ul>
</li>
<li><p>有序列表-列表符号</p>
<ul>
<li><code>type=&quot;A&quot;</code>    A B C D</li>
<li><code>type=&quot;a&quot;</code>    a b c d</li>
<li><code>type=&quot;1&quot;</code>    1 2 3 4  默认值type=”I”    I II III type=”i”     i ii iii</li>
</ul>
</li>
<li><p>列表嵌套</p>
</li>
<li><p>无序列表-嵌套</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;</div><div class="line"> &lt;li&gt;柚子</div><div class="line">  &lt;ul&gt;</div><div class="line">   &lt;li&gt;沙田柚&lt;/li&gt;</div><div class="line">   &lt;li&gt;蜜柚&lt;/li&gt;</div><div class="line">  &lt;/ul&gt;</div><div class="line"> &lt;/li&gt;</div><div class="line"> &lt;li&gt;荔枝&lt;/li&gt;</div><div class="line"> &lt;li&gt;苹果&lt;/li&gt;&lt;/ul&gt;</div></pre></td></tr></table></figure>
<ul>
<li>有序列表-嵌套</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;ol&gt;</div><div class="line"> &lt;li&gt;茶</div><div class="line">  &lt;ul&gt;</div><div class="line">   &lt;li&gt;红茶&lt;/li&gt;</div><div class="line">   &lt;li&gt;绿茶&lt;/li&gt;</div><div class="line">  &lt;/ul&gt;</div><div class="line"> &lt;/li&gt;</div><div class="line"> &lt;li&gt;果汁&lt;/li&gt;</div><div class="line"> &lt;li&gt;牛奶&lt;/li&gt;&lt;/ol&gt;</div></pre></td></tr></table></figure>
<ul>
<li>定义列表<ul>
<li>定义列表不仅仅是一列项目，而是项目及其注释的组合。定义列表以 <code>&lt;dl&gt;</code> 标签开始。每个定义列表项以 <code>&lt;dt&gt;</code>开始。每个自定义列表项的定义以 <code>&lt;dd&gt;</code> 开始。</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;dl&gt;  </div><div class="line">     &lt;dt&gt;pc网页制作&lt;/dt&gt;  </div><div class="line">     &lt;dd&gt;学习DIV+CSS JS JQ 项目实战&lt;/dd&gt;  </div><div class="line">     &lt;dt&gt;手机网页制作&lt;/dt&gt;  </div><div class="line">     &lt;dd&gt;手机网页制作实战&lt;/dd&gt;</div><div class="line">&lt;/dl&gt;</div></pre></td></tr></table></figure>
<ul>
<li><p><code>dd</code>是对<code>dt</code>的解释</p>
<ul>
<li><code>&lt; dl&gt;&lt; /dl&gt;</code>用来创建一个普通的列表,</li>
<li><code>&lt; dt&gt;&lt; /dt&gt;</code>用来创建列表中的上层项目，</li>
<li><code>&lt; dd&gt;&lt; /dd&gt;</code>用来创建列表中最下层项目，</li>
<li><code>&lt; dt&gt;&lt; /dt&gt;</code>和<code>&lt; dd&gt;&lt; /dd&gt;</code>都必须放在<code>&lt; dl&gt;&lt; /dl&gt;</code>标志对之间。</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;dl&gt;</div><div class="line">    &lt;dt&gt;中国城市&lt;/dt&gt;</div><div class="line">    &lt;dd&gt;北京 &lt;/dd&gt;</div><div class="line">    &lt;dd&gt;上海 &lt;/dd&gt;</div><div class="line">    &lt;dd&gt;广州 &lt;/dd&gt;</div><div class="line">    &lt;dt&gt;美国城市&lt;/dt&gt;</div><div class="line">    &lt;dd&gt;华盛顿 &lt;/dd&gt;</div><div class="line">    &lt;dd&gt;芝加哥 &lt;/dd&gt;</div><div class="line">    &lt;dd&gt;纽约 &lt;/dd&gt;</div><div class="line">&lt;/dl&gt;</div></pre></td></tr></table></figure>
<ul>
<li><code>dl</code>是d<code>efinition list</code>的缩写</li>
<li><code>dt</code>是<code>definition title</code>的缩写</li>
<li><code>dd</code>是d<code>efinition description</code>的缩写</li>
</ul>
<ul>
<li><code>list-style</code>属性具有三个属性分量：</li>
<li><code>list-style-position</code> ：设置列表项图标的位置，位于文本内或者文本外</li>
<li><code>list-style-type</code>： 设置列表项图标的类型</li>
<li><code>list-style-image</code>：使用图像设置列表项图标</li>
</ul>
<hr>
<h4 id="第六章-表单元素-上"><a href="#第六章-表单元素-上" class="headerlink" title="第六章 表单元素(上)"></a>第六章 表单元素(上)</h4><hr>
<ul>
<li><p>表单标签:</p>
<ul>
<li><p><code>&lt;form&gt;</code>表单标签</p>
<ul>
<li><code>&lt;form&gt;</code>表单是一个包含表单元素的区域，包括起来的都是表单的内容<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;form&gt;</div><div class="line"> &lt;input type=&quot;text&quot;/&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>HTML标签 - <code>Action</code>和确认按钮： </p>
<ul>
<li>当用户单击确认按钮时，表单的内容会被传送到另一个文件。表单的动作属性定义了目的文件的文件名。由动作属性定义的这个文件通常会对接收到的输入数据进行相关的处理。</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;form action=&quot;html.do&quot; method=&quot;get&quot;&gt;    </div><div class="line">        username:  &lt;input type=&quot;text&quot; name=&quot;user&quot; /&gt;   </div><div class="line">        &lt;input type=&quot;submit&quot; value=&quot;提  交&quot; /&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<ul>
<li><p><code>HTML</code>标签 - 隐藏域隐藏标签：</p>
</li>
<li><p>隐藏域在页面中对于用户是不可见的，在表单中插入隐藏域的目的在于收集或发送信息，以利于被处理表单的程序所使用。浏览者单击发送按钮发送表单的时候，隐藏域的信息也被一起发送到服务器</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;form&gt;        </div><div class="line">     &lt;input type=&quot;hidden&quot; name=&quot;hid&quot; value=&quot;value&quot;&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<ul>
<li><p><code>&lt;input&gt;</code>标签的掌握</p>
<ul>
<li><p>常用<code>type</code>类型：</p>
<ul>
<li><code>&lt;input type=&quot;&quot; name=&quot;&quot; value=&quot;&quot; /&gt;</code></li>
<li><code>type=&quot;text&quot;</code>       单行文本输入框</li>
<li><code>type=&quot;password&quot;</code>    密码（<code>maxlength=&quot;&quot;</code>）</li>
<li><code>type=&quot;radio&quot;</code>     单项选择（<code>checked=&quot;checked&quot;</code>） </li>
<li><code>type=&quot;checkbox&quot;</code>   多项选择  </li>
<li><code>type=&quot;button&quot;</code>    按钮</li>
<li><code>type=&quot;submit&quot;</code>    提交 <code>type=&quot;image&quot;</code>图片提交</li>
<li><code>type=&quot;file&quot;</code>    上传文件</li>
<li><code>type=&quot;reset&quot;</code>重置</li>
<li><code>type=&quot;hidden&quot;</code>    隐藏</li>
</ul>
</li>
</ul>
</li>
<li><p>关于表单中的设置默认值：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;input type=&quot;text&quot; name=&quot;&quot; value=&quot;今天心情不错&quot; /&gt;</div><div class="line">&lt;input type=&quot;radio&quot; name=&quot;&quot; value=&quot;&quot; checked=&quot;checked&quot;&gt;</div><div class="line">&lt;input type=&quot;checkbox&quot; name=&quot;&quot; value=&quot;&quot; checked=&quot;checked&quot;&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;select name=&quot;&quot; &gt;</div><div class="line"> &lt;option  value=&quot;&quot;&gt;&lt;/option&gt;</div><div class="line"> &lt;option  value=&quot;&quot; selected=&quot;selected&quot;&gt;&lt;/option&gt;</div><div class="line">&lt;select&gt;</div></pre></td></tr></table></figure>
<ul>
<li><p><code>textarea</code>没有默认值</p>
</li>
<li><p><code>&lt;label&gt;</code>标签的使用</p>
<ul>
<li><p><code>&lt;label&gt;&lt;/label&gt;</code></p>
<ul>
<li><code>label</code> 元素不会向用户呈现任何特殊效果。</li>
<li>不过，它为鼠标用户改进了可用性。</li>
<li>如果您在 <code>label</code> 元素内点击文本，就会触发此控件。</li>
<li>就是说，当用户选择该标签时，浏览器就会自动将焦点转到和标签相关的表单控件上。</li>
</ul>
</li>
<li><p><code>&lt;label&gt;</code> 标签的<code>for</code> 属性应当与相关元素的 <code>id</code>属性相同。</p>
</li>
<li><p>例子：（重要—注册表单–用户体验–必做）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;单向选择&lt;/p&gt;</div><div class="line">&lt;label for=&quot;male&quot;&gt;男：&lt;/label&gt;&lt;input type=&quot;radio&quot; name=&quot;sex&quot; id=&quot;male&quot;/&gt;</div><div class="line">&lt;label for=&quot;nv&quot;&gt;女：&lt;/label&gt;&lt;input type=&quot;radio&quot; name=&quot;sex&quot;checked=&quot;check&quot;/&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<hr>
<h4 id="第七章-表单和表格-下"><a href="#第七章-表单和表格-下" class="headerlink" title="第七章 表单和表格(下)"></a>第七章 表单和表格(下)</h4><hr>
<ul>
<li>表单和表格标签：<ul>
<li><code>&lt;textarea&gt;</code>文本域标签</li>
<li><code>&lt;textarea&gt;</code>标签：</li>
<li><code>&lt;textarea&gt;&lt;/textarea&gt;</code>是文本域标签，可以在其中插入一段文字内容，它有两个常用属性<code>rows</code>和<code>cols</code></li>
</ul>
</li>
<li><p>注意：</p>
<ul>
<li><code>rows</code>表示这个文本域有多少行</li>
<li><code>cols</code>表示这个文本域有多少列</li>
</ul>
</li>
<li><p>除了这两个属性它还有<code>readonly</code>（只读，文本域的内容无法改变，相当于协议）和<code>title</code>（鼠标放上提示）</p>
</li>
<li><p><code>&lt;select&gt;</code>标签的掌握</p>
<ul>
<li>注：当提交表单时，浏览器会提交选定的项目，或者收集用逗号分隔的多个选项，将其合成一个单独的参数列表，并且在将 <code>&lt;select&gt;</code> 表单数据提交给服务器时包括 <code>name</code>属性<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;form&gt;      </div><div class="line">    &lt;select name=&quot;&quot;  id=&quot;&quot;&gt;</div><div class="line">         &lt;option value=&quot;1&quot;&gt;1月&lt;/option&gt;  </div><div class="line">          &lt;option value=&quot;2&quot;&gt;2月&lt;/option&gt;      </div><div class="line">&lt;/select&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>常用到的属性：<code>disabled=“disabled”  name=&quot;sel&quot;  size=&quot;2&quot;</code></p>
</li>
</ul>
<ul>
<li><code>&lt;table&gt;</code>表格标签</li>
<li><p><code>&lt;table&gt;</code>表格标签：<code>&lt;table&gt;</code>是表格标签，可以用它定义一个表格。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;table border=&quot;1&quot;&gt;</div><div class="line">    &lt;tr&gt;</div><div class="line">    &lt;td&gt;姓名&lt;/td&gt;</div><div class="line">    &lt;td&gt;性别&lt;/td&gt;</div><div class="line">    &lt;/tr&gt;</div><div class="line">&lt;/table&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>注意：<code>&lt;table&gt;</code>的<code>border</code>属性不能少</p>
</li>
</ul>
<ul>
<li><p><code>&lt;tr&gt;</code> <code>&lt;td&gt;</code>标签的使用</p>
<ul>
<li><p><code>&lt;tr&gt;</code>行标签：</p>
<ul>
<li><code>&lt;tr&gt;</code>可以定义表格中的一行，一个&lt;<code>tr&gt;&lt;/tr&gt;</code>表示一行。</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;table border=&quot;1&quot;&gt;</div><div class="line">&lt;tr&gt;</div><div class="line"> &lt;td&gt;姓名&lt;/td&gt;</div><div class="line"> &lt;td&gt;性别&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line"></div><div class="line">&lt;tr&gt;</div><div class="line"> &lt;td&gt;姓名&lt;/td&gt;</div><div class="line"> &lt;td&gt;性别&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;/table&gt;</div></pre></td></tr></table></figure>
<ul>
<li><p><code>&lt;td&gt;</code>单元格标签:</p>
<ul>
<li><code>&lt;td&gt;</code>可以定义表格中的一个单元格，<code>&lt;td&gt;&lt;/td&gt;</code>表示一个单元格。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;table border=&quot;1&quot;&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">&lt;td &gt;姓名&lt;/td&gt;</div><div class="line">&lt;td&gt;性别&lt;/td&gt;</div><div class="line">&lt;td&gt;爱好&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;/table&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><code>border-collapse</code> 属性设置是否将表格边框折叠为单一边框：</li>
<li><code>border-collapse:collapse</code>;</li>
<li><code>colspan</code>左右合并</li>
<li><code>rowspan</code>上下合并</li>
</ul>
</li>
</ul>
<p><strong>第一部分总结</strong>：</p>
<ul>
<li>非可视化标签：<code>head</code>  <code>meta</code>  <code>style</code>  <code>scrpit.</code>..</li>
<li>可视化标签：<code>img</code>  <code>div</code> <code>span</code> <code>a</code> <code>ul</code> <code>li</code>…</li>
<li>只有可视化标签，才能用<code>css</code>改变它</li>
<li>单标签：<code>meta</code>  <code>link</code>  <code>base</code>  <code>img</code>  <code>input</code> <code>br</code> <code>hr</code></li>
<li><p>双标签：<code>html</code> <code>head</code> <code>body</code>  <code>div</code>  <code>a</code>  <code>p</code>  <code>span</code> ..<code>ul</code> <code>li</code> <code>ol</code> <code>dl</code> ….</p>
</li>
<li><p><strong>常用可视化标签</strong></p>
<ul>
<li><strong> <code>div</code></strong> <ul>
<li>一般用它来布局</li>
</ul>
</li>
<li><strong>a</strong>  超链接标签<ul>
<li><code>href</code>*属性：设置跳转的网页地址</li>
<li><code>target</code>属性：设置跳转的目标</li>
<li>结论：凡事页面可以点击跳转或者表单提交的文字，都用<code>a</code>标签</li>
</ul>
</li>
<li><strong><code>img</code></strong><ul>
<li><code>src</code>*属性用来设置图片的url数据</li>
<li><code>alt</code>提供给搜索引擎搜索的</li>
<li><code>width</code></li>
<li><code>height</code></li>
<li>结论 ：显示图片</li>
</ul>
</li>
<li><strong>ul li</strong><ul>
<li>列表</li>
<li>结论：只要将来设计页面中有固定样式的列表，就用ul和li</li>
</ul>
</li>
<li><strong><code>table</code> <code>caption</code> <code>tr</code> <code>td (th)</code></strong><ul>
<li>慢慢已经被淘汰了 被ul li代替</li>
<li>如果是合并竖排的就是合并行（<code>rowspan</code>）</li>
<li>如果是合并横排的就是合并列（<code>colspan</code>）</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<p><strong>HTML部分导图总结</strong></p>
<hr>
<ul>
<li><a href="http://www.html5star.com/manual/html5label-meaning/" target="_blank" rel="external">HTML5标签集合</a></li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-1950ccf50810a92b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-3d15eb9c7be0cb65.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-4b0073fd050ba4f3.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<hr>
<h3 id="第二部分-CSS"><a href="#第二部分-CSS" class="headerlink" title="第二部分 CSS"></a>第二部分 CSS</h3><hr>
<h4 id="第八章-css基础知识"><a href="#第八章-css基础知识" class="headerlink" title="第八章 css基础知识"></a>第八章 css基础知识</h4><hr>
<ul>
<li><code>css</code>基础知识：<ul>
<li><code>css</code>样式表的定义</li>
<li><code>css</code>：（Cascading Style Sheets）层叠样式表；</li>
</ul>
</li>
<li>分类及位置：内部样式<code>-head</code>区域<code>style</code>标签里面<ul>
<li>外部样式-<code>link</code>调用</li>
<li>内联样式-标签元素里面</li>
</ul>
</li>
<li><code>css</code>内的注释：/<code>*</code>注释内容<code>*</code>/</li>
<li><p><code>css</code>样式表的语法</p>
<ul>
<li><p><code>CSS</code>规则由两个主要的部分构成：要添加样式的盒子名或者标签名、和要添加的样式。</p>
</li>
<li><p>盒子名或者标签名{属性:值;}</p>
</li>
<li><p><strong>CSS中几种颜色的表示方法</strong></p>
<ul>
<li><strong>用颜色名表示</strong><ul>
<li>有17个预先确定的颜色，它们是<ul>
<li><code>aqua</code>, <code>black</code>, <code>blue</code>, <code>fuchsia</code>, <code>gray</code>, <code>green</code>, <code>lime</code>, <code>maroon</code>, <code>navy</code>,<br>　　<code>olive</code>, <code>orange,</code> <code>purple</code>, <code>red</code>, <code>silver</code>, <code>teal</code>, <code>white</code>, and <code>yellow</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><p><strong>用十六进制的颜色值表示(红、绿、蓝)</strong></p>
<ul>
<li><code>#FF0000</code>或者<code>#F00</code> </li>
</ul>
</li>
<li><p><strong>用rgb(r,g,b)函数表示</strong></p>
<ul>
<li>如：<code>rgb(255,255,0)</code></li>
</ul>
</li>
<li><p><strong>用hsl(Hue,Saturation,Lightness)函数表示（色调、饱和度、亮度)</strong></p>
<ul>
<li>如：<code>hsl(120,100%,100%)</code>,色调0代表红色，<code>120</code>代表绿色，<code>240</code>代表<br>蓝色 </li>
</ul>
</li>
<li><p><strong>用<code>rgba(r,g,b,a)</code>函数表示 </strong></p>
<ul>
<li>其中<code>a</code>表示的是改颜色的透明度，取值范围是<code>0~1</code>，其中<code>0</code>代表完全透明</li>
</ul>
</li>
<li><p><strong>用hsla(Hue,Saturation,Lightness,alpha)函数表示</strong></p>
<ul>
<li>色调、饱和度、亮度、透明度 </li>
</ul>
</li>
<li>例子</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"position:absolute;top:0px"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:gray;"</span>&gt;</span>background-color:gray<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:#F00;"</span>&gt;</span>background-color:#F00<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:#ffff00;"</span>&gt;</span>background-color:#ffff00<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:rgb(255,0,255);"</span>&gt;</span>background-color:rgb(255,0,255)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:hsl(120,80%,50%);"</span>&gt;</span>background-color:hsl(120,80%,50%)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:rgba(255,0,255,0.5);"</span>&gt;</span>background-color:rgba(255,0,255,0.5)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:hsla(120,80%,50%,0.5);"</span>&gt;</span>background-color:hsla(120,80%,50%,0.5)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-39e61a813f637282.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<ul>
<li>内部样式表<ul>
<li>当单个页面需要设置样式时，就应该使用内部样式表。</li>
<li>使用 <code>&lt;style&gt;&lt;/style&gt;</code>标签在文档<code>&lt;head&gt;&lt;/head&gt;</code>里面定义内部样式表</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;head&gt;</div><div class="line"> &lt;style type=&quot;text/css&quot; &gt;</div><div class="line">  p&#123;color:red;&#125;</div><div class="line"> &lt;/style&gt;</div><div class="line">&lt;/head&gt;</div></pre></td></tr></table></figure>
<ul>
<li>从外部引入到样式分为两种：（注意写在<code>head</code>标签里面）  </li>
<li><p>当样式需要应用于很多页面时，就需要用到外部样式表，首先需要创建一个<code>css</code>文件，然后引用到我们的页面中。</p>
</li>
<li><p><code>Link</code>样式表式：  <code>&lt;link rel=”stylesheet” type=”text/css” href=”my.css”(href表示路径)&gt;</code></p>
</li>
<li><p><code>Html</code>式：  <code>&lt;style type=&quot;text/css&quot;&gt;@import url(&quot;css.css&quot;);&gt;&lt;/style&gt;</code> </p>
</li>
</ul>
<ul>
<li><p>内联样式表（优先级高）</p>
<ul>
<li><p>写在标签里面的样式</p>
</li>
<li><p>如：<code>&lt;p style=&quot;color:red;&quot;&gt;&lt;/p&gt;</code></p>
</li>
</ul>
</li>
<li><p>表示给<code>p</code>标签里面的文字颜色设置为红色</p>
</li>
<li><p>区别：外链样式与导入样式</p>
<ul>
<li><p><code>link</code>标签是属于<code>xhtml</code>范畴，而<code>@import</code>则是<code>css2.1</code>中特有的。<code>link</code>标签除了可以加载<code>CSS</code>外，还可以做很多其它的事情，比如定义<code>RSS</code>，定义<code>rel</code>连接属性等，<code>@import</code>就只能加载<code>CSS</code>了。 </p>
</li>
<li><p>加载的顺序的区别，<code>link</code>加载的<code>css</code>时，是一种并行(没有尝试是否是这样)加载<code>CSS</code>方式，而<code>@impor</code>则在整个页面加载完成后才加载。</p>
</li>
<li><p>兼容性的区别，因<code>@import``CSS2.1</code>才特有的，所以对于不兼容<code>CSS2.1</code>的浏览器来说，无效。</p>
</li>
<li><p>在样式控制上(比如动态改变网页的布局时,使用<code>javascript</code>操作<code>DOM</code>)的区别，此时<code>@import</code>就无能为力了。</p>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><strong>样式的优先级补充</strong><ul>
<li>相同权值情况下，<code>CSS</code>样式的优先级总结来说，就是——就近原则（离被设置元素越近优先级别越高）：<ul>
<li><code>内联样式表（标签内部）</code> &gt; <code>嵌入样式表（当前文件中）</code>&gt; <code>外部样式表（外部文件中）</code></li>
</ul>
</li>
</ul>
</li>
<li><p>权值不同时，浏览器是根据权值来判断使用哪种<code>css</code>样式的，哪种样式权值高就使用哪种样式</p>
</li>
<li><p>层叠优先级是:</p>
<ul>
<li><code>浏览器缺省</code>&lt; <code>外部样式表</code> &lt; <code>内部样式表</code> &lt; <code>内联样式</code></li>
</ul>
</li>
<li>其中样式表又有:<code>类选择器</code> &lt; <code>类派生选择器</code>&lt;<code>ID选择器</code> &lt; <code>ID派生选择器</code></li>
<li><p>派生选择器以前叫上下文选择器，所以完整的层叠优先级是:</p>
<ul>
<li><code>浏览器缺省</code> &lt;<code>外部样式表</code> &lt; <code>外部样式表类选择器</code> &lt; <code>外部样式表类派生选择器</code>&lt; <code>外部样式表ID选择器</code> &lt; <code>外部样式表ID派生选择器</code>&lt; <code>内部样式表</code> &lt; <code>内部样式表类选择器</code> &lt; <code>内部样式表类派生选择器</code> &lt; <code>内部样式表ID选择器</code> &lt; <code>内部样式表ID派生选择器</code> &lt; <code>内联样式</code>…共<code>12</code>个优先级</li>
</ul>
</li>
<li><p>另外，如果同一个元素在没有其他样式的作用影响下，其<code>Class</code>定义了多个并以空格分开，其优先级顺序为：</p>
<ul>
<li>一个元素同时应用多个<code>class</code>，后定义的优先（即近者优先），加上<code>!important</code>者最优先！</li>
</ul>
</li>
</ul>
<hr>
<h4 id="第九章-css选择器-上"><a href="#第九章-css选择器-上" class="headerlink" title="第九章 css选择器(上)"></a>第九章 css选择器(上)</h4><ul>
<li><code>css</code>选择器：<ul>
<li><code>class</code>类选择器可以重复利用    </li>
<li><code>id</code>选择器唯一</li>
</ul>
</li>
<li>标签选择器<ul>
<li>什么是选择器：css选择器就是要改变样式的对象</li>
</ul>
</li>
<li><p>选择器<code>{属性:值;属性:值;}</code></p>
</li>
<li><p>标签选择器：页面中所有的标签都是一个选择器  <code>p{color:red;}</code></p>
</li>
<li><p><code>ID</code>选择器</p>
<ul>
<li>选择<code>id</code>命名的元素 以 <code>#</code> 开头   <code>#p1{color:#0f0;}</code></li>
</ul>
</li>
<li><p>类选择器</p>
<ul>
<li><code>class</code>选择器，选择<code>clas</code>命名的元素 以<code>.</code>开头  <code>.first{color:#00f;}</code></li>
</ul>
</li>
<li><code>css</code>代码写完后上线前要经过压缩处理 </li>
<li>本地和服务器分两个<code>css</code>版本（备份）</li>
<li><p>压缩后注释都清除，空间体积减少</p>
</li>
<li><p>群组选择器</p>
<ul>
<li>选择多个元素,以逗号隔开 <code>#main,.first,span,a,h1{color:red;}</code></li>
</ul>
</li>
<li>包含选择器<ul>
<li>选择某元素的后代元素，也称后代选择器，父类与子类间以空格隔开<code>p</code>   <ul>
<li><code>span{color:red;}</code></li>
</ul>
</li>
</ul>
</li>
<li><p>属性选择器</p>
<ul>
<li>选择包含某一属性的元素</li>
<li><code>a[title]{color:red;}</code>  选择包含<code>title</code>的<code>a</code>标签</li>
<li><code>a[title][href]{color:red;}</code> 选择包含<code>title</code>和<code>href</code>的<code>a</code>标签</li>
</ul>
</li>
<li><p><code>&gt;</code> <code>+</code> 选择器子类选择器：只选择子元素（只选择儿子）（相当于包含元素）</p>
<ul>
<li><code>p &gt; span{color:red;}</code></li>
</ul>
</li>
<li>相邻兄弟选择器：只选择后面的相邻兄弟元素<ul>
<li><code>p + span{color:red;}</code></li>
</ul>
</li>
</ul>
<hr>
<h4 id="第十章-css选择器-下"><a href="#第十章-css选择器-下" class="headerlink" title="第十章 css选择器(下)"></a>第十章 css选择器(下)</h4><hr>
<ul>
<li><code>&lt;a&gt;</code>伪类选择器<ul>
<li><code>a:link {color:#FF0000;}</code>    /<em> 未访问的链接 </em>/ （只用于a标签）</li>
<li><code>a:visited {color:#00FF00;}</code>    /<em> 已访问的链接 </em>/ （只用于a标签）</li>
<li><code>a:hover {color:#FF00FF;}</code>/* 鼠标移动到链接上</li>
<li><code>*/</code>（可和其他标签结合一起用）</li>
<li><code>a:active {color:#0000FF;}</code>    /<em> 选定的链接 </em>/</li>
<li><strong>注意</strong><ul>
<li>伪类选择器的排序很重要，<code>a:link</code> <code>a:visited</code> <code>a:hover</code> <code>a:active</code>，记作<code>lvha</code></li>
</ul>
</li>
</ul>
</li>
<li><p>输入伪类选择器（针对表单）</p>
<ul>
<li><code>input:focus{color:red;}</code>      /<em> 键盘输入焦点 </em>/</li>
</ul>
</li>
<li><p>其他伪类选择器</p>
<ul>
<li><code>p:first-child{color:red;}</code>     /<code>* 第一个p *</code>/</li>
<li><code>:before</code> 在元素之前添加内容。</li>
<li><code>:after</code> 在元素之后添加内容。</li>
</ul>
</li>
<li><p><code>css</code>优先规则</p>
<ul>
<li>内联样式表-&gt; <code>ID</code> 选择器—&gt; <code>Class</code> 类选择器-&gt;标签选择器</li>
</ul>
</li>
</ul>
<hr>
<h4 id="第十一章-背景属性"><a href="#第十一章-背景属性" class="headerlink" title="第十一章 背景属性"></a>第十一章 背景属性</h4><hr>
<ul>
<li><p>背景属性：</p>
<ul>
<li><p>背景的添加 ：</p>
</li>
<li><p>背景颜色的添加:</p>
<ul>
<li><code>background:red;</code></li>
<li><code>backgronnd-color:red;</code></li>
</ul>
</li>
<li><p>背景图片的添加：</p>
<ul>
<li><code>background:url(“images/1.jpg”);</code></li>
<li><code>backgronnd-image:url(“images/1.jpg”);</code></li>
</ul>
</li>
<li>背景的平铺</li>
<li>什么是平铺？平铺就是图片是否重复出现<ul>
<li>不平铺：<code>background-repeat:no-repeat;</code></li>
<li>水平方向平铺：<code>background-repeat:repeat-x;</code></li>
<li>垂直方向平铺：<code>background-repeat:repeat-y;</code></li>
<li>完全平铺：默认为完全平铺</li>
</ul>
</li>
<li>背景图片的定位<ul>
<li>背景图片的定位就是可以设置显示背景图片的位置，通过属性<code>background-position</code>来实现</li>
<li><code>background-position</code>的取值可为英文单词或者数值和百分值。</li>
<li><code>background-positon</code>的英文单词取值</li>
<li><code>top left</code>                   </li>
<li><code>top  center</code>                   </li>
<li><code>top  right</code></li>
<li><code>center left</code>            </li>
<li><code>center  center</code>                   </li>
<li><code>center right</code></li>
<li><code>bottom left</code>           </li>
<li><code>bottom  center</code>    </li>
<li><code>ottom right</code></li>
</ul>
</li>
<li><code>background-positon</code>的数值取值     <ul>
<li><code>background-position:x  y;</code>  </li>
</ul>
</li>
<li><code>positon</code>的百分值取值     <ul>
<li><code>background-position:x%  y%;</code> </li>
</ul>
</li>
<li><p>背景图片的大小</p>
<ul>
<li>背景图片的大小可以通过属性<code>background-size</code>来设置<code>background-size</code>的取值可为数值和百分值。</li>
</ul>
</li>
<li><p><code>background-size</code>的数值取值     </p>
<ul>
<li><code>background-size:x  y;</code>  </li>
</ul>
</li>
<li><p><code>background-size</code>的数值取值     </p>
<ul>
<li><code>background-size:x%  y%;</code></li>
</ul>
</li>
<li><p>背景图片的滚动</p>
<ul>
<li><p>背景图片是否随着内容的滚动而滚动由<code>background-attachment</code>设置</p>
</li>
<li><p><code>background-attachment:fixed;</code>  固定，不随内容的滚动而滚动    </p>
</li>
<li><code>background-attachment:scroll;</code> 滚动，随内容的滚动而滚动</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h4 id="第十二章-文字文本属性"><a href="#第十二章-文字文本属性" class="headerlink" title="第十二章 文字文本属性"></a>第十二章 文字文本属性</h4><hr>
<ul>
<li><p><code>css</code>文字文本属性：</p>
<ul>
<li><p><strong>文字属性</strong></p>
<ul>
<li><code>color:red;</code>    文字颜色</li>
<li><code>font-size:12px</code>;    文字大小</li>
<li><code>font-weight:“bold”</code>    文字粗细(<code>bold/normal</code>)</li>
<li><code>font-family:“宋体”</code>    文字字体</li>
<li><code>font-variant:small-caps</code>小写字母以大写字母显示</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><p><strong>文本属性</strong></p>
<ul>
<li><code>text-align:center;</code>   文本对齐(<code>right</code>/<code>left</code>/<code>center</code>)</li>
<li><code>line-height:10px;</code> 行间距(可通过它实现文本的垂直居中)</li>
<li><code>text-indent:20px;</code>  首行缩进</li>
<li><code>text-decoration:none;</code> <ul>
<li>文本线(<code>none</code>/<code>underline</code>/<code>overline</code>/<code>line-through</code>)</li>
</ul>
</li>
<li><code>letter-spacing</code>:   字间距</li>
</ul>
</li>
</ul>
<hr>
<h4 id="第十三章-盒子模型"><a href="#第十三章-盒子模型" class="headerlink" title="第十三章 盒子模型"></a>第十三章 盒子模型</h4><hr>
<ul>
<li><strong>盒子模型</strong><ul>
<li>盒子模型就是一个有高度和宽度的矩形区域</li>
<li>所有<code>html</code>标签都是盒子模型</li>
<li><code>div</code>标签自定义盒子模型</li>
</ul>
</li>
<li><p>所有的标签都是盒子模型</p>
<ul>
<li><code>class</code>和<code>id</code>的主要差别是：<code>class</code>用于元素组（类似的元素，或者可以理解为某一类元素），而<code>id</code>用于标识单独的唯一的元素。</li>
</ul>
</li>
<li><p><strong>盒子模型的组成</strong></p>
<ul>
<li>盒子模型组成部分：<ul>
<li>自身内容：<code>width</code>、h<code>eight</code> 宽高</li>
<li>内边距：   <code>padding</code></li>
<li>盒子边框： <code>border</code> 边框线</li>
<li>与其他盒子距离：  <code>margin</code>外边距</li>
<li>内容+内边距+边框+外边距=面积</li>
</ul>
</li>
</ul>
</li>
<li><p><code>border</code> 边框</p>
<ul>
<li>常见写法  <code>border:1px solid #f00;</code></li>
</ul>
</li>
<li><p>单独属性：</p>
<ul>
<li><code>border-width</code>:</li>
<li><code>border-style:</code> <ul>
<li><code>dotted</code> 点状虚线</li>
<li><code>dashed</code>（虚线）</li>
<li><code>solid</code>（实线）</li>
<li><code>double</code>（双实线）</li>
</ul>
</li>
<li><code>border-color</code> (颜色)</li>
</ul>
</li>
<li><p><code>padding</code> 内边距</p>
<ul>
<li><p>值：<code>像素</code>/<code>厘米</code>等长度单位、百分比</p>
<ul>
<li><code>padding:10px;</code>                      上下左右</li>
<li><code>padding:10px 10px;</code>                 上下  左右</li>
<li><code>padding:10px 10px 10px;</code>         上 左右 下</li>
<li><code>padding:10px 10px 10px 10px;</code> 上 右 下 左（设置4个点–&gt;顺时针方向）</li>
</ul>
</li>
</ul>
</li>
<li><p>单独属性：</p>
<ul>
<li><code>padding-top:</code></li>
<li><code>padding-right:</code></li>
<li><code>padding-bottom:</code></li>
<li><code>padding-left:</code></li>
</ul>
</li>
<li><p>当设置内边距的时候会把盒子撑大，为了保持盒子原来的大小，应该高度和宽度进行减小，根据<code>width</code>和<code>height</code>减小</p>
</li>
<li><p>margin 外边距</p>
<ul>
<li><p>值：与<code>padding</code>相同</p>
</li>
<li><p>单独属性：与<code>padding</code>相同</p>
</li>
</ul>
</li>
<li><p>外边距合并：两个盒子同时设置了外边距，会进行一个外边距合并</p>
</li>
</ul>
<hr>
<p><strong>补充盒子模型内容</strong></p>
<hr>
<ul>
<li><p><strong>标准盒子模型</strong></p>
<ul>
<li>盒子模型是<code>css</code>中一个重要的概念，理解了盒子模型才能更好的排版。其实盒子模型有两种，分别是 <code>ie</code>盒子模型和标准 <code>w3c</code> 盒子模型。他们对盒子模型的解释各不相同，先来看看我们熟知的标准盒子模型</li>
</ul>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-320bad065d62c499.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<ul>
<li><p>从上图可以看到标准 <code>w3c</code> 盒子模型的范围包括 <code>margin</code>、<code>border</code>、<code>padding</code>、<code>content</code>，并且 <code>content</code>部分不包含其他部分</p>
</li>
<li><p><strong> IE盒子模型</strong></p>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-693242e2f03506f8.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<ul>
<li>从上图可以看到 <code>ie</code>盒子模型的范围也包括 <code>margin</code>、<code>border</code>、<code>padding</code>、<code>content</code></li>
<li><p>和标准 <code>w3c</code> 盒子模型不同的是：<code>ie</code> 盒子模型的 <code>content</code> 部分包含了 <code>border</code>和 <code>padding</code></p>
</li>
<li><p><code>IE</code>盒子模型<code>width</code> = <code>padding</code>+<code>border</code>+<code>内容</code></p>
</li>
<li><p>标准盒子模型 = 内容的宽度（不包含<code>border</code>+<code>padding</code>）</p>
</li>
<li><p>例：</p>
<ul>
<li>一个盒子的   <code>margin</code>为 20px，<code>border</code> 为 1px，<code>padding</code>为 10px，<code>content</code> 的宽为 200px、高为 50px，假如用标准 <code>w3c</code> 盒子模型解释，那么这个盒子需要占据的位置为：宽 <code>20*2+1*2+10*2+200=262px</code>、高 <code>20*2+1*2*10*2+50=112px</code>，盒子的实际大小为：宽 <code>1*2+10*2+200=222px</code>、高 <code>1*2+10*2+50=72px</code>；假如用ie 盒子模型，那么这个盒子需要占据的位置为：宽 <code>20*2+200=240px</code>、高 <code>20*2+50=70px</code>，盒子的实际大小为：宽 <code>200px</code>、高 <code>50px</code></li>
</ul>
</li>
<li><p>那应该选择哪中盒子模型呢？当然是“标准 <code>w3c</code> 盒子模型”了。怎么样才算是选择了“标准 <code>w3c</code>盒子模型”呢？很简单，就是在网页的顶部加上 <code>doctype</code> 声明。</p>
</li>
<li>假如不加<code>doctype</code> 声明，那么各个浏览器会根据自己的行为去理解网页，即 <code>ie</code>浏览器会采用 <code>ie</code> 盒子模型去解释你的盒子，而 <code>ff</code>会采用标准<code>w3c</code> 盒子模型解释你的盒子，所以网页在不同的浏览器中就显示的不一样了。</li>
<li>反之，假如加上了 <code>doctype</code> 声明，那么所有浏览器都会采用标准 <code>w3c</code>盒子模型去解释你的盒子，网页就能在各个浏览器中显示一致了。</li>
</ul>
<hr>
<ul>
<li>用 <code>jquery</code> 做的例子来证实一下</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;title&gt;你用的盒子模型是？&lt;/title&gt;</div><div class="line">&lt;script language=&quot;javascript&quot; src=&quot;jquery.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script language=&quot;javascript&quot;&gt;</div><div class="line">var sbox = $.boxmodel ? &quot;标准w3c&quot;:&quot;ie&quot;;</div><div class="line">document.write(&quot;您的页面目前支持：&quot;+sbox+&quot;盒子模型&quot;);</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<ul>
<li>　上面的代码没有加上 <code>doctype</code> 声明，在 <code>ie</code> 浏览器中显示  <code>ie</code>盒子模型，在 ff 浏览器中显示“标准<code>w3c</code> 盒子模型”。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;!doctype html public &quot;-//w3c//dtd xhtml 1.0 transitional//en&quot; &quot;http://www.w3.org/tr/xhtml1/dtd/xhtml1-transitional.dtd&quot;&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;title&gt;你用的盒子模型是标准w3c盒子模型&lt;/title&gt;</div><div class="line">&lt;script language=&quot;javascript&quot; src=&quot;jquery.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script language=&quot;javascript&quot;&gt;</div><div class="line">var sbox = $.boxmodel ? &quot;标准w3c&quot;:&quot;ie&quot;;</div><div class="line">document.write(&quot;您的页面目前支持：&quot;+sbox+&quot;盒子模型&quot;);</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<ul>
<li>　代码2 与代码1 唯一的不同的就是顶部加了 <code>doctype</code>声明。在所有浏览器中都显示“标准 <code>w3c</code>盒子模型”</li>
</ul>
<ul>
<li><p>所以为了让网页能兼容各个浏览器，让我们用标准 <code>w3c</code> 盒子模型</p>
</li>
<li><p>扩展</p>
<ul>
<li><a href="http://www.jianshu.com/p/e2eb0d8c9de6" target="_blank" rel="external">学会使用box-sizing布局</a></li>
</ul>
</li>
</ul>
<hr>
<h4 id="第十四章-块元素、行元素与溢出"><a href="#第十四章-块元素、行元素与溢出" class="headerlink" title="第十四章 块元素、行元素与溢出"></a>第十四章 块元素、行元素与溢出</h4><hr>
<ul>
<li>基本概念<ul>
<li>块级元素：默认情况下独占一行的元素，可控制宽高、上下边距；</li>
<li>行内元素：默认情况下一行可以摆放多个的元素，不可控制宽高和上下边距</li>
</ul>
</li>
<li><p>行块转换</p>
<ul>
<li><code>display:none</code>;  不显示</li>
<li><code>display:block</code>; 变成块级元素</li>
<li><code>display:inline</code>; 变成行级元素</li>
<li><code>display:inline-block</code>; 以块级元素样式展示，以行级元素样式排列</li>
</ul>
</li>
<li><p>溢出</p>
<ul>
<li><code>overflow:hidden</code>;   溢出隐藏</li>
<li><code>overflow:scroll</code>;   内容会被修剪，浏览器会显示滚动条</li>
<li><code>overflow:auto</code>;   如果内容被修剪，则产生滚动条</li>
</ul>
</li>
<li><p>文本不换行：<code>white-space:nowrap</code>;</p>
</li>
<li>长单词换行：<code>word-wrap:break-word</code>;</li>
</ul>
<ul>
<li><p>行内元素和快级元素小结</p>
<ul>
<li><p>一、<strong>块级元素</strong>：block element</p>
<ul>
<li>每个块级元素默认占一行高度，一行内添加一个块级元素后无法一般无法添加其他元素（<code>float</code>浮动后除外）。两个块级元素连续编辑时，会在页面自动换行显示。块级元素一般可嵌套块级元素或行内元素；</li>
<li><p>块级元素一般作为容器出现，用来组织结构，但并不全是如此。有些块级元素，如只能包含块级元素。</p>
</li>
<li><p><code>DIV</code> 是最常用的块级元素，元素样式的<code>display:block</code>都是块级元素。它们总是以一个块的形式表现出来，并且跟同级的兄弟块依次竖直排列，左右撑满。</p>
</li>
</ul>
</li>
<li><p>二、<strong>行内元素</strong>：inline element</p>
<ul>
<li>也叫内联元素、内嵌元素等；行内元素一般都是基于语义级(semantic)的基本元素，只能容纳文本或其他内联元素，常见内联元素 “a”。比如 <code>SPAN</code>元素，<code>IFRAME</code>元素和元素样式的<code>display : inline</code>的都是行内元素。例如文字这类元素，各个字母 之间横向排列，到最右端自动折行。</li>
</ul>
</li>
<li><p>三、<strong>block（块）元素的特点:</strong></p>
<ul>
<li>①、总是在新行上开始；</li>
<li>②、高度，行高以及外边距和内边距都可控制；</li>
<li>③、宽度缺省是它的容器的100%，除非设定一个宽度。</li>
<li>④、它可以容纳内联元素和其他块元素</li>
</ul>
</li>
<li><p>四、<strong>inline元素的特点</strong></p>
<ul>
<li>①、和其他元素都在一行上；</li>
<li>②、高，行高及外边距和内边距不可改变；</li>
<li>③、宽度就是它的文字或图片的宽度，不可改变</li>
<li>④、内联元素只能容纳文本或者其他内联元素</li>
</ul>
</li>
<li><p><strong>对行内元素，需要注意如下</strong>:</p>
<ul>
<li>设置宽度<code>width</code> 无效。 设置高度<code>height</code>无效，可以通过<code>line-height</code>来设置。 设置<code>margin</code></li>
<li>只有左右<code>margin</code>有效，上下无效。</li>
<li>设置<code>padding</code>只有左右<code>padding</code>有效，上下则无效。注意元素范围是增大了，但是对元素周围的内容是没影响的。</li>
</ul>
</li>
<li><p>五、<strong>常见的块状元素</strong></p>
<ul>
<li><code>address</code> – 地址</li>
<li><code>blockquote</code> – 块引用</li>
<li><code>center</code> – 举中对齐块</li>
<li><code>dir</code> – 目录列表</li>
<li><code>div</code> – 常用块级容易，也是<code>CSS layout</code>的主要标签</li>
<li><code>dl</code> – 定义列表</li>
<li><code>fieldset</code> – <code>form</code>控制组</li>
<li><code>form</code> – 交互表单</li>
<li><code>h1</code> – 大标题</li>
<li><code>h2</code> – 副标题</li>
<li><code>h3</code> – 3级标题</li>
<li><code>h4</code> – 4级标题</li>
<li><code>h5</code> – 5级标题</li>
<li><code>h6</code> – 6级标题</li>
<li><code>hr</code> – 水平分隔线</li>
<li><code>isindex</code> – <code>input prompt</code></li>
<li><code>menu</code> – 菜单列表</li>
<li><code>noframes</code> – <code>frames</code>可选内容，（对于不支持frame的浏览器显示此区块内容</li>
<li><code>noscript</code> – 可选脚本内容（对于不支持<code>script</code>的浏览器显示此内容）</li>
<li><code>ol</code> – 有序表单</li>
<li><code>p</code> – 段落</li>
<li><code>pre</code> – 格式化文本</li>
<li><code>table</code> – 表格</li>
<li><code>ul</code> – 无序列表</li>
</ul>
</li>
<li><p>六、<strong>常见的内联元素</strong></p>
<ul>
<li><code>a</code> – 锚点</li>
<li><code>abbr</code> – 缩写</li>
<li><code>acronym</code> – 首字</li>
<li><code>b</code> – 粗体(不推荐)</li>
<li><code>bdo</code> – <code>bidi override</code></li>
<li><code>big</code> – 大字体</li>
<li><code>br</code> – 换行</li>
<li><code>cite</code> – 引用</li>
<li><code>code</code> – 计算机代码(在引用源码的时候需要)</li>
<li><code>dfn</code> – 定义字段</li>
<li><code>em</code> – 强调</li>
<li><code>font</code> – 字体设定(不推荐)</li>
<li><code>i</code> – 斜体</li>
<li><code>img</code> – 图片</li>
<li><code>input</code> – 输入框</li>
<li><code>kbd</code> – 定义键盘文本</li>
<li><code>label</code> – 表格标签</li>
<li><code>q</code> – 短引用</li>
<li><code>s</code> – 中划线(不推荐)</li>
<li><code>samp</code> – 定义范例计算机代码</li>
<li><code>select</code> – 项目选择</li>
<li><code>small</code> – 小字体文本</li>
<li><code>span</code> – 常用内联容器，定义文本内区块</li>
<li><code>strike</code> – 中划线</li>
<li><code>strong</code> – 粗体强调</li>
<li><code>sub</code> – 下标</li>
<li><code>sup</code> – 上标</li>
<li><code>textarea</code> – 多行文本输入框</li>
<li><code>tt</code> – 电传文本</li>
<li><code>u</code> – 下划线</li>
</ul>
</li>
<li><p>七，<strong>可变元素</strong></p>
<ul>
<li>可变元素为根据上下文语境决定该元素为块元素或者内联元素。</li>
<li><code>applet</code> - <code>java applet</code></li>
<li><code>button</code> - 按钮</li>
<li><code>del</code>- 删除文本</li>
<li><code>iframe</code> - <code>inline frame</code></li>
<li><code>ins</code> - 插入的文本</li>
<li><code>map</code> - 图片区块(<code>map</code>)</li>
<li><code>object</code> - <code>object</code>对象</li>
<li><code>script</code> - 客户端脚本</li>
</ul>
</li>
<li><p>八、<strong>行内元素与块级元素有什么不同</strong></p>
<ul>
<li><p>区别一：</p>
<ul>
<li>块级：块级元素会独占一行，默认情况下宽度自动填满其父元素宽度</li>
<li>行内：行内元素不会独占一行，相邻的行内元素会排在同一行。其宽度随内容的变化而变化。</li>
</ul>
</li>
<li><p>区别二：</p>
<ul>
<li>块级：块级元素可以设置宽高</li>
<li>行内：行内元素不可以设置宽高</li>
</ul>
</li>
<li><p>区别三：</p>
<ul>
<li>块级：块级元素可以设置<code>margin</code>，<code>padding</code></li>
<li>行内：行内元素水平方向的<code>margin-left;</code> <code>margin-right;</code></li>
</ul>
</li>
<li><p><code>padding-left;</code> <code>padding-right</code>;可以生效。但是竖直方向的<code>margin-bottom</code>; <code>margin-top</code>; <code>padding-top</code>; <code>padding-bottom</code>;却不能生效。</p>
</li>
<li><p>区别四：</p>
<ul>
<li>块级：<code>display:block</code>;</li>
<li>行内：<code>display:inline</code>;</li>
</ul>
</li>
</ul>
</li>
<li><p>替换元素有如下：（和<code>img</code>一样的设置方法）</p>
<ul>
<li><code>&lt;img&gt;</code>、<code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code>、<code>&lt;select&gt;</code></li>
<li><code>&lt;object&gt;</code>都是替换元素，这些元素都没有实际的内容</li>
</ul>
</li>
</ul>
</li>
<li>可以通过修改<code>display</code>属性来切换块级元素和行内元素</li>
</ul>
<hr>
<h4 id="第十五章-定位"><a href="#第十五章-定位" class="headerlink" title="第十五章 定位"></a>第十五章 定位</h4><hr>
<ul>
<li><p><code>static</code>静态定位（不对它的位置进行改变，在哪里就在那里）</p>
<ul>
<li>默认值。没有定位，元素出现在正常的流中（忽略 <code>top</code>,<code>bottom,</code>  <code>left, right</code> 或者 <code>z-index</code> 声明）。</li>
</ul>
</li>
<li><p><code>fixed</code>固定定位（参照物–浏览器窗口）—做 弹窗广告用到</p>
<ul>
<li>生成固定定位的元素，相对于浏览器窗口进行定位。 元素的位置通过 <code>&quot;left&quot;</code>, <code>&quot;top&quot;</code>, <code>&quot;right&quot;</code>以及 <code>&quot;bottom&quot;</code>属性进行规定。 </li>
</ul>
</li>
<li><p><code>relative</code>（相对定位 ）（参照物以他本身）</p>
<ul>
<li>生成相对定位的元素，相对于其正常位置进行定位。</li>
</ul>
</li>
<li><p><code>absolute</code>（绝对定位）(除了<code>static</code>都可以，找到参照物–&gt;与它最近的已经有定位的父元素进行定位)</p>
<ul>
<li>生成绝对定位的元素，相对于 <code>static</code> 定位以外的第一个父元素进行定位。</li>
<li>元素的位置通过 “<code>left&quot;</code>, <code>&quot;top&quot;</code>, <code>&quot;right&quot;</code> 以及 <code>&quot;bottom&quot;</code> 属性进行规定</li>
</ul>
</li>
<li><p>z-index</p>
<ul>
<li><code>z-index</code> 属性设置元素的堆叠顺序。拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面。</li>
<li>定位的基本思想: 它允许你定义元素框相对于其正常位置应该出现的位置，或者相对于父元素、另一个元素甚至浏览器窗口本身的位置。</li>
</ul>
</li>
<li><p>一切皆为框</p>
<ul>
<li>块级元素: <code>div</code>、<code>h1</code>或<code>p</code>元素 即：显示为一块内容称之为 “块框“ ;</li>
<li>行内元素: <code>span</code>,<code>strong</code>,<code>a</code>等元素 即：内容显示在行中称 “行内框”;</li>
<li>使用display属性改变成框的类型 即：<code>display:block</code>; 让行内元素设置为块级元素，<code>display:none;</code> 没有框</li>
</ul>
</li>
<li><p>相对定位：</p>
<ul>
<li>如果对一个元素进行相对定位，它将出现在它所在的位置上。 </li>
<li>通过设置垂直或水平位置，让这个元素“相对于”它的起点进行移动</li>
<li><code>.adv_relative {  position: relative;  left: 30px;  top: 20px; }</code></li>
</ul>
</li>
<li><p>绝对定位：</p>
<ul>
<li>元素的位置相对于最近的已定位祖先元素，如果元素没有已定位 的祖先元素，它的位置相对于最初的包含块。 <code>.adv_absolute {  position: absolute;  left: 30px;  top: 20px; }</code></li>
</ul>
</li>
</ul>
<hr>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-f72c1c8486445df1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/1480597-7ab9cda0bbd7e62f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<hr>
<h4 id="第十六章-框架"><a href="#第十六章-框架" class="headerlink" title="第十六章 框架"></a>第十六章 框架</h4><hr>
<ul>
<li><code>frameset</code>框架：<ul>
<li><code>&lt;frameset&gt;</code> —-  用来定义一个框架；双标签<br>不能和  <code>&lt;body&gt;</code>  一起使用</li>
</ul>
</li>
<li><p><code>rows</code>、<code>cols</code>属性</p>
<ul>
<li><code>rows</code> 定义行表示框架有多少行（取值 <code>px</code>/<code>%</code>/ <code>*</code> ）</li>
<li><code>cols</code>   定义列表示框架有多少列（取值<code>px</code>/ <code>%</code>/ <code>*</code> ）</li>
</ul>
</li>
<li><p>frame子框架</p>
<ul>
<li><p>&lt;<code>frame</code>&gt;  —-  表示框架中的某一个部分；单标签，要跟结束标志</p>
<ul>
<li><code>src</code> 显示的网页的路径</li>
<li><code>name</code> 框架名</li>
<li><code>frameborder</code>  边框线（取值 0 / 1）</li>
</ul>
</li>
<li><p>&lt;<code>noframes</code>&gt;属性</p>
</li>
<li><p>&lt;<code>noframes</code>&gt; 提供不支持框架的浏览器显示<code>body</code>的内容；双标签</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;frameset&gt;</div><div class="line">     &lt;frame  src=“”  /&gt;</div><div class="line">     &lt;frame  src=“” /&gt;</div><div class="line">     &lt;frame  src=“” /&gt;</div><div class="line">     &lt;noframes&gt;</div><div class="line">      &lt;body&gt;内容&lt;/body&gt;</div><div class="line">     &lt;/noframes&gt;</div><div class="line">&lt;/frameset&gt;</div></pre></td></tr></table></figure>
<ul>
<li><code>&lt;iframe&gt;</code>内联框架<ul>
<li><code>iframe</code>元素会创建包含另外一个文档的内联框架（即行内框架）</li>
<li>允许和 <code>body</code> 一起使用</li>
<li><code>width</code> 宽（取值 px / %）</li>
<li><code>height</code> 高（取值 px / %）</li>
<li><code>name</code> 框架名</li>
<li><code>frameborder</code> 边框线（取值 0 / 1）</li>
<li><code>src</code> 显示的网页的路径</li>
</ul>
</li>
</ul>
<hr>
<h4 id="第十七章-css高级属性"><a href="#第十七章-css高级属性" class="headerlink" title="第十七章 css高级属性"></a>第十七章 css高级属性</h4><hr>
<ul>
<li><code>opacity</code>透明属性<ul>
<li><code>opacity</code><ul>
<li>对于<code>IE6/7/</code>，使用<code>filter:alpha(opacity:值;</code>)  值为<code>0-100</code></li>
<li>对于<code>Webkit</code>，<code>Opera</code>，<code>Firefox</code>，<code>IE9+</code>，使用<code>opacity</code>:值; 值为<code>0-1</code></li>
<li>对于早期火狐，使用<code>-moz-opacity</code>:值; 值为<code>0-1</code></li>
<li>所以写透明属性时，一般写法是</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> &#123;	</div><div class="line">    opacity:0.5;</div><div class="line">   filter:alpha(opacity：50);/*0-100*/</div><div class="line">   -moz-opacity:0.5;	/*取值0-1*/--&gt;针对早起版本的火狐兼容问题的解决</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p><code>border-radius</code>圆角边框属性</p>
<ul>
<li>向 <code>div</code> 元素添加圆角边框<ul>
<li><code>border-radius:10px</code>;</li>
</ul>
</li>
</ul>
</li>
<li><p><code>box-shadow</code>阴影属性</p>
<ul>
<li><p><code>box-shadow</code>属性向框添加阴影效果,后面跟4个参数。</p>
</li>
<li><p><code>box-shadow:0px   0px   10px   #000;</code></p>
</li>
</ul>
</li>
<li><p><code>&lt;embed&gt;</code>属性</p>
<ul>
<li><p>是<code>HTML5</code>中新增的标签,媒体嵌入插件标签，可以通过<code>&lt;embed&gt;</code>插入音频或视频</p>
</li>
<li><p><code>&lt;embed src=“media/music.mp3” /&gt;</code></p>
</li>
<li><p>格式<code>.mid</code> <code>.wav</code> <code>.mp3</code>等</p>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><strong>CSS部分导图总结</strong></li>
</ul>
<hr>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-4b55b5085a7d0c56.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<hr>
<ul>
<li><a href="https://yunpan.cn/cM9va2bHD4wwu" target="_blank" rel="external">原文件下载地址</a>   访问密码 342a</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-a893d4023c39c78a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<hr>
<h3 id="第三部分-附录"><a href="#第三部分-附录" class="headerlink" title="第三部分 附录"></a>第三部分 附录</h3><hr>
<h4 id="附录一-DIV命名规范"><a href="#附录一-DIV命名规范" class="headerlink" title="附录一 DIV命名规范"></a>附录一 DIV命名规范</h4><hr>
<ul>
<li><p>企业<code>DIV</code>使用频率高的命名方法</p>
</li>
<li><p><strong>网页内容类</strong></p>
<ul>
<li><p>标题: <code>title</code></p>
<ul>
<li>摘要: <code>summary</code></li>
<li>箭头： <code>arrow</code></li>
<li>商标： <code>label</code></li>
<li>网站标志： <code>logo</code></li>
<li>转角/圆角：<code>corner</code></li>
<li>横幅广告： <code>banner</code></li>
<li>子菜单： <code>subMenu</code></li>
<li>搜索： <code>search</code></li>
<li>搜索框： <code>searchBox</code></li>
<li>登录： <code>login</code></li>
<li>登录条：<code>loginbar</code></li>
<li>工具条： <code>toolbar</code></li>
<li>下拉： <code>drop</code></li>
<li>标签页： <code>tab</code></li>
<li>当前的： <code>current</code></li>
<li>列表： <code>list</code></li>
<li>滚动： <code>scroll</code></li>
<li>服务： <code>service</code></li>
<li>提示信息： <code>msg</code></li>
<li>热点：<code>hot</code></li>
<li>新闻： <code>news</code></li>
<li>小技巧： <code>tips</code></li>
<li>下载： <code>download</code></li>
<li>栏目标题： <code>title</code></li>
<li>热点： <code>hot</code></li>
<li>加入：<code>joinus</code></li>
<li>注册： <code>regsiter</code></li>
<li>指南： <code>guide</code></li>
<li>友情链接： <code>friendlink</code></li>
<li>状态： <code>status</code></li>
<li>版权： <code>copyright</code></li>
<li>按钮： <code>btn</code></li>
<li>合作伙伴： <code>partner</code></li>
<li>投票： <code>vote</code></li>
<li>左右中：<code>left</code>  <code>right</code>  <code>center</code></li>
</ul>
<hr>
</li>
<li>注释的写法: <code>/* Footer */</code> 内容区<code>/* End Footer */</code></li>
</ul>
</li>
<li><p><strong>id的命名:</strong></p>
<ul>
<li><p>页面结构</p>
<ul>
<li>容器: <code>container</code></li>
<li>页头：<code>header</code></li>
<li>内容：<code>content</code>/<code>container</code></li>
<li>页面主体：<code>main</code></li>
<li>页尾：<code>footer</code></li>
<li>导航：<code>nav</code></li>
<li>侧栏：<code>sidebar</code></li>
<li>栏目：<code>column</code></li>
<li>页面外围控制整体布局宽度：<code>wrapper</code></li>
<li>左右中：<code>left</code> <code>right</code> <code>center</code></li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><p>导航</p>
<ul>
<li>导航：<code>nav</code></li>
<li>主导航：<code>mainbav</code></li>
<li>子导航：<code>subnav</code></li>
<li>顶导航：<code>topnav</code></li>
<li>边导航：<code>sidebar</code></li>
<li>左导航：<code>leftsidebar</code></li>
<li>右导航：<code>rightsidebar</code></li>
<li>菜单：<code>menu</code></li>
<li>子菜单：<code>submenu</code></li>
<li>标题: <code>title</code></li>
<li>摘要: <code>summary</code></li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><p>功能</p>
<ul>
<li>标志：<code>logo</code></li>
<li>广告：<code>banner</code></li>
<li>登陆：<code>login</code></li>
<li>登录条：<code>loginbar</code></li>
<li>注册：<code>regsiter</code></li>
<li>搜索：<code>search</code></li>
<li>功能区：<code>shop</code></li>
<li>标题：<code>title</code></li>
<li>加入：<code>joinus</code></li>
<li>状态：<code>status</code></li>
<li>按钮：<code>btn</code></li>
<li>滚动：<code>scroll</code></li>
<li>标签页：<code>tab</code></li>
<li>文章列表：<code>list</code></li>
<li>提示信息：<code>msg</code></li>
<li>当前的:<code>current</code></li>
<li>小技巧：<code>tips</code></li>
<li>图标: <code>icon</code></li>
<li>注释：<code>note</code></li>
<li>指南：<code>guild</code></li>
<li>服务：<code>service</code></li>
<li>热点：<code>hot</code></li>
<li>新闻：<code>news</code></li>
<li>下载：<code>download</code></li>
<li>投票：<code>vote</code></li>
<li>合作伙伴：<code>partner</code></li>
<li>友情链接：<code>link</code></li>
<li>版权：<code>copyright</code></li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><p><strong><code>class</code>的命名:</strong></p>
<ul>
<li><p>颜色:使用颜色的名称或者16进制代码,如</p>
<ul>
<li><code>.red { color: red; }</code></li>
<li><code>.f60 { color: #f60; }</code></li>
<li><code>.ff8600 { color: #ff8600; }</code></li>
</ul>
</li>
<li><p>字体大小,直接使用”font+字体大小”作为名称,如</p>
<ul>
<li><code>.font12px { font-size: 12px; }</code></li>
<li><code>.font9px {font-size: 9pt; }</code></li>
</ul>
</li>
<li><p>对齐样式,使用对齐目标的英文名称,如</p>
<ul>
<li><code>.left { float:left; }</code></li>
<li><code>.bottom { float:bottom; }</code></li>
</ul>
</li>
<li><p>标题栏样式,使用”类别+功能”的方式命名,如</p>
<ul>
<li><code>.barnews { }</code></li>
<li><code>.barproduct { }</code></li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><p><strong>注意事项::</strong></p>
<ul>
<li>一律小写;</li>
<li>尽量用英文;</li>
<li>不加中杠和下划线;</li>
<li>尽量不缩写，除非一看就明白的单词.</li>
</ul>
</li>
</ul>
<hr>
</li>
</ul>
</li>
<li><p><strong>推荐的 <code>CSS</code> 书写顺序：</strong></p>
<ul>
<li><p>显示属性</p>
<ul>
<li><code>display</code></li>
<li><code>list-style</code></li>
<li><code>position</code></li>
<li><code>float</code></li>
<li><code>clear</code></li>
</ul>
</li>
<li><p>自身属性</p>
<ul>
<li><code>width</code></li>
<li><code>height</code></li>
<li><code>margin</code></li>
<li><code>padding</code></li>
<li><code>border</code></li>
<li><code>background</code></li>
</ul>
</li>
<li><p>文本属性</p>
<ul>
<li><code>color</code></li>
<li><code>font</code></li>
<li><code>text-decoration</code></li>
<li><code>text-align</code></li>
<li><code>vertical-align</code></li>
<li><code>white-space</code></li>
<li><code>other text</code></li>
<li><code>content</code>    </li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h4 id="附录二-CSS精灵"><a href="#附录二-CSS精灵" class="headerlink" title="附录二 CSS精灵"></a>附录二 CSS精灵</h4><hr>
<ul>
<li><strong>CSS精灵原理以及应用</strong><ul>
<li><code>CSS</code>雪碧的基本原理是把你的网站上用到的一些图片整合到一张单独的图片中，从而减少你的网站的HTTP请求数量。<ul>
<li>该图片使用<code>CSS</code>   <code>background和background-position</code>属性渲染，这也就意味着你的标签变得更加复杂了，图片是在<code>CSS</code>中定义，而非<code>&lt;img&gt;</code>标签。</li>
</ul>
</li>
</ul>
</li>
<li><strong>一个简单的例子</strong>：<ul>
<li>一张图片作出一个按钮的三个状态</li>
<li>一个链接用<code>CSS</code>做成按钮的样式，我们可以使用同一张图片，完成按钮的三个状态，<code>a:link</code>，<code>a:hover</code>，<code>a:active</code> <code>&lt;a class=&quot;button&quot; href=&quot;#&quot;&gt;链接&lt;/a&gt;</code></li>
<li>加入右侧的图片为：<code>200px 65px</code>的三个按钮图拼合而成的图片<code>button.png</code>，从上到下一次为按钮的普通、鼠标滑过、鼠标点击的状态。则可以使用<code>CSS</code>进行定义。</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">a &#123;</div><div class="line">    display:block; </div><div class="line">    width:200px; </div><div class="line">    height:65px; </div><div class="line">    line-height:65px; /*定义状态*/</div><div class="line">    text-indent:-2015px; /*隐藏文字*/</div><div class="line">    background-image:url(button.png); /*定义背景图片*/</div><div class="line">    background-position:0 0;</div><div class="line">    /*定义链接的普通状态，此时图像显示的是顶上的部分*/</div><div class="line">&#125;</div><div class="line"></div><div class="line">a:hover &#123;</div><div class="line">    background-position:0 -66px;</div><div class="line">    /*定义链接的滑过状态，此时显示的为中间部分，向下取负值*/</div><div class="line">&#125;</div><div class="line">a:active &#123;</div><div class="line">    background-position:0 -132px;                      </div><div class="line">    /*定 义链接的普通状态，此时显示的是底部的部分，向下取负值*/</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>更多的<code>CSS</code>雪碧，图片更复杂，背景定位更精确。可能会用到大量的数值<ul>
<li>如：<code>background:url(nav.png) -180px 24pxno-repeat</code>; 来达到更精确的定位</li>
</ul>
</li>
<li><strong>优点：</strong><ul>
<li>减少加载网页图片时对服务器的请求次数</li>
<li>可以合并多数背景图片和小图标，方便在任何位置使用，这样不同位置的请求只需要调用一个图片，从而减少对服务器的请求次数，降低服务器压力，同时提高了页面的加载速度，节约服务器的流量。</li>
<li>提高页面的加载速度</li>
<li><code>sprite</code>技术的其中一个好处是图片的加载时间(在有许多 <code>sprite</code> 时，单张图片的加载时间)。由所需图片拼成的一张 <code>GIF</code>图片的尺寸会明显小于所有图片拼合前的大小。单张的 <code>GIF</code>只有相关的一个色表，而单独分割的每一张 <code>GIF</code> 都有自己的一个色表，这就增加了总体的大小。因此，单独的一张 <code>JPEG</code> 或者 <code>PNG</code> <code>sprite</code> 在大小上非常可能比把一张图分成多张得来的图片总尺寸小。</li>
<li>减少鼠标滑过的一些<code>bug</code></li>
<li><code>IE6</code>不会主动预加载鼠标滑过即<code>a:hover</code>中的背景图片，所以，如果使用多张图片，鼠标滑过会出现闪白的现象。使用<code>CSS</code>雪碧，由于一张图片即可，所以不会出现这种现象。</li>
</ul>
</li>
<li><strong>不足：</strong><ul>
<li><code>CSS</code>雪碧的最大问题是内存使用</li>
<li>影响浏览器的缩放功能</li>
<li>拼图维护比较麻烦</li>
<li>使<code>CSS</code>的编写变得困难</li>
<li><code>CSS</code> 雪碧调用的图片不能被打印</li>
<li>错误得使用 <code>Sprites</code> 影响可访问性</li>
</ul>
</li>
</ul>
<h4 id="附录三-一些tips解决方案"><a href="#附录三-一些tips解决方案" class="headerlink" title="附录三 一些tips解决方案"></a>附录三 一些tips解决方案</h4><hr>
<h5 id="页面优化实践"><a href="#页面优化实践" class="headerlink" title="页面优化实践"></a>页面优化实践</h5><hr>
<ul>
<li><p>从下面的几个方面可以进行页面的优化：</p>
<ul>
<li>减少请求数</li>
<li>图片合并</li>
<li><code>CSS</code>文件合并</li>
<li>减少内联样式</li>
<li>避免在 <code>CSS</code>中使用 <code>import</code></li>
<li>减少文件大小</li>
<li>选择适合的图片格式</li>
<li>图片压缩</li>
<li><code>CSS</code> 值缩写（<code>Shorthand Property</code>)</li>
<li>文件压缩</li>
<li>页面性能</li>
<li>调整文件加载顺序</li>
<li>减少标签数量</li>
<li>调整选择器长度</li>
<li>尽量使用<code>CSS</code> 制作显示表现</li>
<li>增强代码可读性与可维护性</li>
<li>规范化</li>
<li>语义化</li>
<li>模块化</li>
</ul>
</li>
</ul>
<h5 id="常用代码片段"><a href="#常用代码片段" class="headerlink" title="常用代码片段"></a>常用代码片段</h5><hr>
<ul>
<li><code>mobile meta</code>标签</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”viewport”</span> <span class="attr">content</span>=<span class="string">”width</span>=<span class="string">320,target-densitydpi</span>=<span class="string">dpi_value,initial-scale</span>=<span class="string">1,</span> <span class="attr">user-scalable</span>=<span class="string">no”/</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>表格不被撑开</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">table-layout</span>: <span class="selector-tag">fixed</span>; <span class="selector-tag">word-break</span>: <span class="selector-tag">break-all</span>;;<span class="selector-tag">border-collapse</span>: <span class="selector-tag">collapse</span></div></pre></td></tr></table></figure>
<ul>
<li>不设宽高居中</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">”abc”</span> <span class="attr">style</span>=<span class="string">”display:table;text-align:center;width:100%;height:100%;”</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">”background:#f00;</span> <span class="attr">display:table-cell</span>; <span class="attr">vertical-align:middle</span>;”&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">”button”</span> <span class="attr">value</span>=<span class="string">”item1″</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>透明度的兼容代码</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">filter:alpha(opacity=50); /*1-100*/</div><div class="line">-moz-opacity:0.5; /*0-1.0*/</div><div class="line">-khtml-opacity:0.5; /*0-1.0*/</div><div class="line">opacity:0.5; /*0-1.0*/</div></pre></td></tr></table></figure>
<ul>
<li>文字溢出点点省略</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">white-space</span><span class="selector-pseudo">:nowrap</span>;</div><div class="line"><span class="selector-tag">text-overflow</span><span class="selector-pseudo">:ellipsis</span>;</div><div class="line"><span class="selector-tag">overflow</span><span class="selector-pseudo">:hidden</span>;</div></pre></td></tr></table></figure>
<ul>
<li><p>清除浮动的几种方法</p>
<ul>
<li><p>方法一：<code>投机取巧法</code> – 不推荐</p>
<ul>
<li>直接一个放到当作最后一个子标签放到父标签那儿，此方法屡试不爽，兼容性强</li>
</ul>
</li>
<li><p>方法二：<code>overflow + zoom</code>方法  –不推荐<br> <code>.fix{overflow:hidden; zoom:1;}</code></p>
<ul>
<li>此方法优点在于代码简洁，涵盖所有浏览器</li>
</ul>
</li>
<li><p>方法三：<code>after + zoom</code>方法 -推荐–此方法可以说是综合起来最好的方法了</p>
<ul>
<li><code>clearfix</code>只应用在包含浮动子元素的父级元素上</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.fix</span>&#123;<span class="attribute">zoom</span>:<span class="number">1</span>;&#125;</div><div class="line"><span class="selector-class">.fix</span><span class="selector-pseudo">:after</span>&#123;</div><div class="line">     <span class="attribute">display</span>:block; </div><div class="line">     <span class="attribute">content</span>:<span class="string">'clear'</span>; </div><div class="line">     <span class="attribute">clear</span>:both;</div><div class="line">     <span class="attribute">line-height</span>:<span class="number">0</span>; </div><div class="line">     <span class="attribute">visibility</span>:hidden;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>更多代码片段详情<ul>
<li><a href="http://www.jianshu.com/p/e878122a92a3" target="_blank" rel="external">实用的60个CSS代码片段</a></li>
</ul>
</li>
</ul>
<h5 id="一些总结"><a href="#一些总结" class="headerlink" title="一些总结"></a>一些总结</h5><hr>
<ul>
<li><p>自动继承属性：</p>
<ul>
<li><code>color</code></li>
<li><code>font</code></li>
<li><code>text-align</code></li>
<li><code>list-style</code><br>…</li>
</ul>
</li>
<li><p>非继承属性：</p>
<ul>
<li><code>background</code></li>
<li><code>border</code></li>
<li><code>position</code><br>…</li>
</ul>
</li>
<li><p>具有破坏性的元素：</p>
<ul>
<li><code>float</code></li>
<li><code>display:none;</code></li>
<li><code>position:absoblute/fixed/sticky;</code></li>
</ul>
</li>
<li><p>具有包裹性的元素：</p>
<ul>
<li><p><code>display:inline-block/table-cell</code></p>
</li>
<li><p><code>position:absolute/fixed/sticky</code></p>
</li>
<li><p><code>overflow:hidden/scroll</code></p>
</li>
</ul>
</li>
<li><p>消除图片底部间隙的方法</p>
<ul>
<li><p>图片块状化-无基线对齐<br><code>img{display:block;}</code></p>
</li>
<li><p>图片底线对齐<br><code>img{vertical-align:bottom;}</code></p>
</li>
<li><p>行高足够小 - 基线位置上移<br><code>.box{line-height:0;}</code></p>
</li>
</ul>
</li>
</ul>
<h5 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h5><hr>
<ul>
<li><p>BFC</p>
<ul>
<li>BFC全称<code>”Block Formatting Context”</code> 中文为“块级格式化上下文”</li>
</ul>
<ul>
<li><p>记住这么一句话：<code>BFC</code>元素特性表现原则就是，内部子元素再怎么翻江倒海，翻云覆雨都不会影响外部的元素</p>
</li>
<li><p><code>BFC</code>就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此</p>
</li>
<li><p>扩展阅读</p>
<ul>
<li><a href="https://github.com/dwqs/blog/issues/22" target="_blank" rel="external">CSS中的BFC</a></li>
</ul>
</li>
</ul>
</li>
<li>优雅降级(<code>graceful degradation</code>)<ul>
<li>一开始就构建完整的功能，然后再针对低版本浏览器进行兼容</li>
</ul>
</li>
<li>渐进增强 <code>progressive enhancement</code>：<ul>
<li>是在浏览器开启<code>JavaScript</code>功能后，如果浏览器版本不支持某些  <code>JavaScript</code>  能力，我们解决这种问题的方式</li>
</ul>
</li>
<li>平稳退化<ul>
<li>是在浏览器没有<code>JavaScript</code>功能，或没有开启<code>JavaScript</code>功能情况下，我们解决这种问题的方式；</li>
</ul>
</li>
</ul>
<h4 id="附录四-部分工具资源"><a href="#附录四-部分工具资源" class="headerlink" title="附录四 部分工具资源"></a>附录四 部分工具资源</h4><hr>
<ul>
<li><a href="http://blog.poetries.top/2016/03/14/Emmet%EF%BC%9AHTML-CSS%E4%BB%A3%E7%A0%81%E5%BF%AB%E9%80%9F%E7%BC%96%E5%86%99%E7%A5%9E%E5%99%A8/" target="_blank" rel="external">学会使用Emmet插件快速编码</a></li>
<li><a href="http://blog.poetries.top/2016/09/09/Emmet%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/#more" target="_blank" rel="external">Emmet常用快捷键</a></li>
<li><a href="https://github.com/poetries/mywiki/blob/master/bookmark/sublime-text.md" target="_blank" rel="external">Sublime专题</a></li>
<li><a href="https://github.com/poetries/mywiki/blob/master/bookmark/Sublime%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E6%80%BB%E7%BB%93.md" target="_blank" rel="external">Sublime常用插件总结</a></li>
<li><a href="https://github.com/poetries/mywiki/blob/master/bookmark/Front-End%20-Develop%20-Tools.md" target="_blank" rel="external">Front-End -Develop -Tools</a></li>
<li><a href="https://github.com/poetries/mywiki/blob/master/bookmark/Tools.md" target="_blank" rel="external">ToolsBox-自己整理的一份工具列表</a></li>
</ul>
<h4 id="附录五-编码规范"><a href="#附录五-编码规范" class="headerlink" title="附录五 编码规范"></a>附录五 编码规范</h4><hr>
<ul>
<li><a href="https://github.com/poetries/mywiki/blob/master/bookmark/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83.md" target="_blank" rel="external">编码规范</a></li>
<li><a href="https://github.com/poetries/mywiki/wiki/web-develop-standard" target="_blank" rel="external">web develop standard</a></li>
<li><a href="http://codecloud.net/5622.html" target="_blank" rel="external">Web 前端开发规范文档</a></li>
</ul>
<h4 id="附录六-前端学习资源"><a href="#附录六-前端学习资源" class="headerlink" title="附录六 前端学习资源"></a>附录六 前端学习资源</h4><hr>
<ul>
<li><a href="https://github.com/poetries/mywiki" target="_blank" rel="external">Github上前端学习资源汇总</a></li>
<li><a href="https://github.com/poetries/mywiki/tree/master/front-end" target="_blank" rel="external">WEB 前端开发学习笔记</a></li>
<li><a href="https://github.com/poetries/mywiki/wiki/%E6%94%B6%E9%9B%86%E5%A5%BD%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7" target="_blank" rel="external">前端开发工具箱</a></li>
<li><a href="https://segmentfault.com/a/1190000006689923" target="_blank" rel="external">148个资源让你成为CSS专家</a></li>
</ul>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><hr>
<ul>
<li><a href="https://github.com/poetries/poetries.github.io/blob/dev/source/_posts/DIV+CSS%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9E%E9%A1%BE.md" target="_blank" rel="external">本文Mardown原文件-欢迎转载</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;转载请声明   &lt;a href=&quot;http://blog.poetries.top/2016/09/06/DIV+CSS%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9E%E9%A1%BE/#more&quot;&gt;原文链接地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;第一部分-HTML&quot;&gt;&lt;a href=&quot;#第一部分-HTML&quot; class=&quot;headerlink&quot; title=&quot;第一部分 HTML&quot;&gt;&lt;/a&gt;第一部分 HTML&lt;/h3&gt;&lt;hr&gt;
&lt;h4 id=&quot;第一章-职业规划和前景&quot;&gt;&lt;a href=&quot;#第一章-职业规划和前景&quot; class=&quot;headerlink&quot; title=&quot;第一章 职业规划和前景&quot;&gt;&lt;/a&gt;第一章 职业规划和前景&lt;/h4&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;职业方向规划定位：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;web&lt;/code&gt;前端开发工程师&lt;/li&gt;
&lt;li&gt;&lt;code&gt;web&lt;/code&gt;网站架构师&lt;/li&gt;
&lt;li&gt;自己创业&lt;/li&gt;
&lt;li&gt;转岗管理或其他
    
    </summary>
    
      <category term="Front-End" scheme="http://www.poetries.top/categories/Front-End/"/>
    
    
      <category term="CSS" scheme="http://www.poetries.top/tags/CSS/"/>
    
      <category term="XHTML" scheme="http://www.poetries.top/tags/XHTML/"/>
    
  </entry>
  
  <entry>
    <title>标准盒子模型和IE盒子模型</title>
    <link href="http://www.poetries.top/2016/09/05/%E6%A0%87%E5%87%86%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B%E5%92%8CIE%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/"/>
    <id>http://www.poetries.top/2016/09/05/标准盒子模型和IE盒子模型/</id>
    <published>2016-09-05T10:50:32.000Z</published>
    <updated>2016-09-27T15:41:22.583Z</updated>
    
    <content type="html"><![CDATA[<h3 id="标准盒子模型"><a href="#标准盒子模型" class="headerlink" title="标准盒子模型"></a>标准盒子模型</h3><ul>
<li>盒子模型是css中一个重要的概念，理解了盒子模型才能更好的排版。其实盒子模型有两种，分别是 ie 盒子模型和标准 w3c 盒子模型。他们对盒子模型的解释各不相同，先来看看我们熟知的标准盒子模型</li>
</ul>
<p><img src="http://images.cnblogs.com/cnblogs_com/cchyao/%E6%A0%87%E5%87%86W3C%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B%E5%92%8CIE%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8BCSS%E5%B8%83%E5%B1%80%E7%BB%8F%E5%85%B8%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/1.JPG" alt=""></p>
<ul>
<li>从上图可以看到标准 <code>w3c</code> 盒子模型的范围包括 <code>margin</code>、<code>border</code>、<code>padding</code>、<code>content</code>，并且 <code>content</code>部分不包含其他部分<a id="more"></a>
</li>
</ul>
<hr>
<h3 id="IE盒子模型"><a href="#IE盒子模型" class="headerlink" title="IE盒子模型"></a>IE盒子模型</h3><p><img src="http://images.cnblogs.com/cnblogs_com/cchyao/%E6%A0%87%E5%87%86W3C%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B%E5%92%8CIE%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8BCSS%E5%B8%83%E5%B1%80%E7%BB%8F%E5%85%B8%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/2.JPG" alt=""></p>
<ul>
<li>从上图可以看到 <code>ie</code>盒子模型的范围也包括 <code>margin</code>、<code>border</code>、<code>padding</code>、<code>content</code></li>
<li>和标准 <code>w3c</code> 盒子模型不同的是：<code>ie</code> 盒子模型的 <code>content</code> 部分包含了 <code>border</code>和 <code>padding</code></li>
<li><code>IE</code>盒子模型<code>width</code> = <code>padding</code>+<code>border</code>+<code>内容</code></li>
<li><p>标准盒子模型 = 内容的宽度（不包含<code>border</code>+<code>padding</code>）</p>
</li>
<li><p>例：</p>
</li>
<li><p>一个盒子的   <code>margin</code>为 20px，<code>border</code> 为 1px，<code>padding</code>为 10px，<code>content</code> 的宽为 200px、高为 50px，假如用标准 <code>w3c</code> 盒子模型解释，那么这个盒子需要占据的位置为：宽 <code>20*2+1*2+10*2+200=262px</code>、高 <code>20*2+1*2*10*2+50=112px</code>，盒子的实际大小为：宽 <code>1*2+10*2+200=222px</code>、高 <code>1*2+10*2+50=72px</code>；假如用ie 盒子模型，那么这个盒子需要占据的位置为：宽 <code>20*2+200=240px</code>、高 <code>20*2+50=70px</code>，盒子的实际大小为：宽 <code>200px</code>、高 <code>50px</code></p>
</li>
<li><p>那应该选择哪中盒子模型呢？当然是“标准 <code>w3c</code> 盒子模型”了。怎么样才算是选择了“标准 <code>w3c</code>盒子模型”呢？很简单，就是在网页的顶部加上 <code>doctype</code> 声明。</p>
</li>
<li>假如不加<code>doctype</code> 声明，那么各个浏览器会根据自己的行为去理解网页，即 <code>ie</code>浏览器会采用 <code>ie</code> 盒子模型去解释你的盒子，而 <code>ff</code>会采用标准 w3c 盒子模型解释你的盒子，所以网页在不同的浏览器中就显示的不一样了。</li>
<li>反之，假如加上了 doctype 声明，那么所有浏览器都会采用标准 <code>w3c</code>盒子模型去解释你的盒子，网页就能在各个浏览器中显示一致了。</li>
</ul>
<hr>
<ul>
<li>再用 jquery 做的例子来证实一下</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>你用的盒子模型是？<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"javascript"</span> <span class="attr">src</span>=<span class="string">"jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">var</span> sbox = $.boxmodel ? <span class="string">"标准w3c"</span>:<span class="string">"ie"</span>;</div><div class="line"><span class="built_in">document</span>.write(<span class="string">"您的页面目前支持："</span>+sbox+<span class="string">"盒子模型"</span>);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>　上面的代码没有加上 <code>doctype</code> 声明，在 <code>ie</code> 浏览器中显示  <code>ie</code>盒子模型，在 ff 浏览器中显示“标准<code>w3c</code> 盒子模型”。</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html public "-//w3c//dtd xhtml 1.0 transitional//en" "http://www.w3.org/tr/xhtml1/dtd/xhtml1-transitional.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>你用的盒子模型是标准w3c盒子模型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"javascript"</span> <span class="attr">src</span>=<span class="string">"jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">var</span> sbox = $.boxmodel ? <span class="string">"标准w3c"</span>:<span class="string">"ie"</span>;</div><div class="line"><span class="built_in">document</span>.write(<span class="string">"您的页面目前支持："</span>+sbox+<span class="string">"盒子模型"</span>);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>　代码2 与代码1 唯一的不同的就是顶部加了 <code>doctype</code>声明。在所有浏览器中都显示“标准 <code>w3c</code>盒子模型”</li>
<li>所以为了让网页能兼容各个浏览器，让我们用标准 <code>w3c</code> 盒子模型</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;标准盒子模型&quot;&gt;&lt;a href=&quot;#标准盒子模型&quot; class=&quot;headerlink&quot; title=&quot;标准盒子模型&quot;&gt;&lt;/a&gt;标准盒子模型&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;盒子模型是css中一个重要的概念，理解了盒子模型才能更好的排版。其实盒子模型有两种，分别是 ie 盒子模型和标准 w3c 盒子模型。他们对盒子模型的解释各不相同，先来看看我们熟知的标准盒子模型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://images.cnblogs.com/cnblogs_com/cchyao/%E6%A0%87%E5%87%86W3C%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B%E5%92%8CIE%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8BCSS%E5%B8%83%E5%B1%80%E7%BB%8F%E5%85%B8%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/1.JPG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从上图可以看到标准 &lt;code&gt;w3c&lt;/code&gt; 盒子模型的范围包括 &lt;code&gt;margin&lt;/code&gt;、&lt;code&gt;border&lt;/code&gt;、&lt;code&gt;padding&lt;/code&gt;、&lt;code&gt;content&lt;/code&gt;，并且 &lt;code&gt;content&lt;/code&gt;部分不包含其他部分
    
    </summary>
    
      <category term="Front-End" scheme="http://www.poetries.top/categories/Front-End/"/>
    
    
      <category term="CSS" scheme="http://www.poetries.top/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>学会使用box-sizingCSS布局</title>
    <link href="http://www.poetries.top/2016/09/04/%E5%AD%A6%E4%BC%9A%E4%BD%BF%E7%94%A8box-sizingCSS%E5%B8%83%E5%B1%80/"/>
    <id>http://www.poetries.top/2016/09/04/学会使用box-sizingCSS布局/</id>
    <published>2016-09-04T09:20:08.000Z</published>
    <updated>2016-09-27T15:41:22.583Z</updated>
    
    <content type="html"><![CDATA[<h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><ul>
<li>关于<code>CSS</code>重要的一个概念就是CSS盒子模型。它控制着页面这些元素的高度和宽度。盒子模型多少会让人产生一些困惑，尤其当涉及到高度和宽度计算的时候。真正盒子的宽度(在页面呈现出来的宽度)和高度，需要加上一些其它的属性，例如：<ul>
<li><code>padding</code> + <code>border</code> + <code>width</code>= 盒子的宽度</li>
<li><code>padding</code>+ <code>border</code> + <code>height</code> = 盒子的高度</li>
</ul>
</li>
<li>这看起来并不是那么直观，那么我们看一个图：</li>
</ul>
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/hezi.png" alt=""></p>
<ul>
<li><p>这意味着，如果我们设置一个宽度为<code>200px</code>，而实际呈现的盒子的宽度可能会大于<code>200px</code>(除非没有左右边框和左右补白)。这可能看起来比较怪，<code>CSS</code>设置的宽度仅仅是内容区的宽度，而非盒子的宽度。同样，高度类似</p>
</li>
<li><p>这导致的直接结果是当我们希望页面呈现的盒子的宽度是200px的时候，我们需要减去它的左右边框和左右补白，然后设置为对应的CSS宽度。例如上图，我们设置希望盒子宽度为<code>200px</code>，则需要先减去左右补白各<code>20px</code>，左右边框各<code>1px</code>，然后设置对应的<code>CSS</code>宽度<code>158px</code>。</p>
</li>
</ul>
<ul>
<li>幸运的是，我们有更好的方法达到我们想要的目的<a id="more"></a>
</li>
</ul>
<hr>
<h3 id="box-sizing"><a href="#box-sizing" class="headerlink" title="box-sizing"></a>box-sizing</h3><ul>
<li><p>语法：<code>box-sizing:</code>  <code>content-box</code> | <code>border-box</code> | <code>inherit</code>;</p>
</li>
<li><p>与上面不同的是，当你设置<code>box-sizing:border-box</code>以后，这就能达到你想要的目的。例如，上面我们想要一个宽度为<code>200px</code>的盒子，那么我们直接设置宽度为<code>200px</code>。是不是看起来清晰多了。当再设置它的左右边框和左右补白后，它的内容区会自动调整。这可能更直接和一目了然。<code>CSS</code>代码如下：</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line">    <span class="attribute">box-sizing</span>: border-box;</div><div class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#DDD</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/hez2.png" alt=""></p>
<ul>
<li><p>实际上，这更被设计者和开发者推崇</p>
</li>
<li><p>一些开发人员觉得<code>box-sizing</code>使用起来十分方便,所以他们主张通过通用选择器将这个属性应用于每个元素</p>
</li>
<li><p>但这样的观点未免有些偏激,而且还会导致不必要的困难,所以更好的方法是只在实际需要时才使用这个属性</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">*&#123;</div><div class="line">     <span class="attribute">margin</span>:<span class="number">0</span>;</div><div class="line">      <span class="attribute">padding</span>:<span class="number">0</span>;</div><div class="line">     <span class="attribute">box-sizing</span>:border-box;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>写上 <code>box-sizing: border-box</code>; ，设置<code>padding</code>值 也不用担心没有减小宽度值而变形</li>
</ul>
<hr>
<h3 id="box-sizing其它的值"><a href="#box-sizing其它的值" class="headerlink" title="box-sizing其它的值"></a>box-sizing其它的值</h3><ul>
<li><code>content-box</code> <ul>
<li>描述：在宽度和高度之外绘制元素的内边距和边框。</li>
</ul>
</li>
</ul>
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/box-size-1.jpg" alt=""></p>
<ul>
<li><code>border-box</code><ul>
<li>描述：为元素指定的任何内边距和边框都将在已设定的宽度和高度内进行绘制</li>
</ul>
</li>
</ul>
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/box-size-2.jpg" alt=""></p>
<ul>
<li><code>inherit</code><ul>
<li>描述：继承 父元素 <code>box-sizing</code>属性的值 </li>
</ul>
</li>
</ul>
<hr>
<h3 id="浏览器兼容性"><a href="#浏览器兼容性" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h3><ul>
<li><code>IE8</code>及以上版本支持该属性，<code>Firefox</code> 需要加上浏览器厂商前缀<code>-moz-，</code>对于低版本的<code>IOS</code>和<code>Android</code>浏览器也需要加上<code>-webkit-</code>。实际上，很多<code>reset.css</code>或者<code>normal.css</code>里都包含如下<code>CSS</code>语句，也是比较赞成的用法：</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">*, *<span class="selector-pseudo">:before</span>, *<span class="selector-pseudo">:after</span> &#123;</div><div class="line">　　<span class="attribute">-moz-box-sizing</span>: border-box;</div><div class="line">　　<span class="attribute">-webkit-box-sizing</span>: border-box;</div><div class="line">　　<span class="attribute">box-sizing</span>: border-box;</div><div class="line">　　&#125;</div></pre></td></tr></table></figure>
<h3 id="box-sizing-布局三栏目案例"><a href="#box-sizing-布局三栏目案例" class="headerlink" title="box-sizing 布局三栏目案例"></a>box-sizing 布局三栏目案例</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line">		<span class="attribute">height</span>:<span class="number">700px</span>;</div><div class="line">		<span class="attribute">float</span>:left;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">div</span><span class="selector-class">.left</span>&#123;</div><div class="line">		<span class="attribute">width</span>:<span class="number">25%</span>;</div><div class="line">		<span class="attribute">background</span>:red;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">div</span><span class="selector-class">.cent</span>&#123;</div><div class="line">		<span class="attribute">width</span>:<span class="number">50%</span>;</div><div class="line">		<span class="attribute">box-sizing</span>:border-box;<span class="comment">/*可以改变元素以使其宽度包含填充*/</span></div><div class="line">				<span class="comment">/* 现在整个元素,包括填充在内,占页面总宽度的50%,所以元素的组合宽度为100%,这全程它们很好地适应于它们的容器.*/</span></div><div class="line">		<span class="attribute">background</span>:yellow;</div><div class="line">		<span class="attribute">padding</span>:<span class="number">0</span> <span class="number">20px</span>;<span class="comment">/*加了这个会使盒子内容溢出 但是box-sizing很好的自适应了*/</span></div><div class="line">&#125;</div><div class="line"><span class="selector-tag">div</span><span class="selector-class">.right</span>&#123;</div><div class="line">       <span class="attribute">width</span>:<span class="number">25%</span>;</div><div class="line">        <span class="attribute">background</span>:blue;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cent"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>效果</li>
</ul>
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/hh2.png" alt=""></p>
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/hh1.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;盒子模型&quot;&gt;&lt;a href=&quot;#盒子模型&quot; class=&quot;headerlink&quot; title=&quot;盒子模型&quot;&gt;&lt;/a&gt;盒子模型&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;关于&lt;code&gt;CSS&lt;/code&gt;重要的一个概念就是CSS盒子模型。它控制着页面这些元素的高度和宽度。盒子模型多少会让人产生一些困惑，尤其当涉及到高度和宽度计算的时候。真正盒子的宽度(在页面呈现出来的宽度)和高度，需要加上一些其它的属性，例如：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;padding&lt;/code&gt; + &lt;code&gt;border&lt;/code&gt; + &lt;code&gt;width&lt;/code&gt;= 盒子的宽度&lt;/li&gt;
&lt;li&gt;&lt;code&gt;padding&lt;/code&gt;+ &lt;code&gt;border&lt;/code&gt; + &lt;code&gt;height&lt;/code&gt; = 盒子的高度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;这看起来并不是那么直观，那么我们看一个图：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://7xq6al.com1.z0.glb.clouddn.com/hezi.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;这意味着，如果我们设置一个宽度为&lt;code&gt;200px&lt;/code&gt;，而实际呈现的盒子的宽度可能会大于&lt;code&gt;200px&lt;/code&gt;(除非没有左右边框和左右补白)。这可能看起来比较怪，&lt;code&gt;CSS&lt;/code&gt;设置的宽度仅仅是内容区的宽度，而非盒子的宽度。同样，高度类似&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;这导致的直接结果是当我们希望页面呈现的盒子的宽度是200px的时候，我们需要减去它的左右边框和左右补白，然后设置为对应的CSS宽度。例如上图，我们设置希望盒子宽度为&lt;code&gt;200px&lt;/code&gt;，则需要先减去左右补白各&lt;code&gt;20px&lt;/code&gt;，左右边框各&lt;code&gt;1px&lt;/code&gt;，然后设置对应的&lt;code&gt;CSS&lt;/code&gt;宽度&lt;code&gt;158px&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;幸运的是，我们有更好的方法达到我们想要的目的
    
    </summary>
    
      <category term="Front-End" scheme="http://www.poetries.top/categories/Front-End/"/>
    
    
      <category term="CSS" scheme="http://www.poetries.top/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS 组合选择符用法总结</title>
    <link href="http://www.poetries.top/2016/09/04/CSS%20%E7%BB%84%E5%90%88%E9%80%89%E6%8B%A9%E7%AC%A6%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://www.poetries.top/2016/09/04/CSS 组合选择符用法总结/</id>
    <published>2016-09-04T08:50:32.000Z</published>
    <updated>2016-09-27T15:41:22.575Z</updated>
    
    <content type="html"><![CDATA[<h3 id="组合选择符基本介绍"><a href="#组合选择符基本介绍" class="headerlink" title="组合选择符基本介绍"></a>组合选择符基本介绍</h3><hr>
<ul>
<li>组合选择符说明了两个选择器直接的关系</li>
<li><code>CSS</code>组合选择符包括各种简单选择符的组合方式</li>
<li>在 <code>CSS3</code> 中包含了四种组合方式<ul>
<li>后代选取器(以空格分隔)</li>
<li>子元素选择器(以大于号分隔）</li>
<li>相邻兄弟选择器（以加号分隔）</li>
<li>普通兄弟选择器（以破折号分隔）<a id="more"></a>
</li>
</ul>
</li>
</ul>
<h3 id="后代选取器"><a href="#后代选取器" class="headerlink" title="后代选取器"></a>后代选取器</h3><hr>
<ul>
<li><p>后代选取器匹配所有值得元素的后代元素</p>
</li>
<li><p>实例：</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是通过后代选择器选择的元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>002<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是通过后代选择器选择的元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span> <span class="selector-tag">p</span>&#123;</div><div class="line">    <span class="attribute">background</span>:red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果：</p>
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/%E5%90%8E%E4%BB%A3%E9%80%89%E6%8B%A9%E5%99%A8.png" alt=""></p>
<h3 id="子元素选择器"><a href="#子元素选择器" class="headerlink" title="子元素选择器"></a>子元素选择器</h3><hr>
<ul>
<li><p>如果您不希望选择任意的后代元素，而是希望缩小范围，只选择某个元素的子元素，请使用子元素选择器</p>
</li>
<li><p><code>html</code>代码的文档树结构如图</p>
</li>
</ul>
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/div.png" alt=""></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mainDiv"</span>&gt;</span></div><div class="line">    我是主DIV</div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"son"</span>&gt;</span>儿子</div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sunzi"</span>&gt;</span>孙子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.mainDiv</span>&#123;</div><div class="line">	<span class="attribute">background</span>:yellow;</div><div class="line">	<span class="attribute">width</span>:<span class="number">100px</span>;</div><div class="line">	<span class="attribute">height</span>:<span class="number">100px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.sunzi</span>&#123;</div><div class="line">	<span class="attribute">background</span>:red;</div><div class="line">	<span class="attribute">width</span>:<span class="number">40px</span>;</div><div class="line">	<span class="attribute">height</span>:<span class="number">40px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.mainDiv</span> &gt; <span class="selector-tag">div</span>&#123;<span class="attribute">background</span>:green;&#125;</div></pre></td></tr></table></figure>
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/%E5%AD%90%E4%BB%A3.png" alt=""></p>
<ul>
<li>然后我们去掉子代选择器，添加一个后代选择器</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.mainDiv</span> <span class="selector-tag">div</span>&#123;</div><div class="line">            <span class="attribute">background-color</span>: red;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>效果</p>
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/%E5%90%8E%E4%BB%A31.png" alt=""></p>
<ul>
<li>经过上面的结果展示，我们能得到结论:子代选择器~ 和后代选择（空格）的区别：<ul>
<li>子代选择器：只对应用对象的直接相应子节点有效。如实例代码中的儿子<code>div</code></li>
<li>后代选择器：对应用对象内的所有相应子节点都有效。如实例中的儿子<code>div</code>和孙子<code>div</code></li>
</ul>
</li>
</ul>
<h3 id="相邻兄弟选择器"><a href="#相邻兄弟选择器" class="headerlink" title="相邻兄弟选择器"></a>相邻兄弟选择器</h3><hr>
<ul>
<li>相邻兄弟选择器可选择紧接在另一元素后的元素，且二者有相同父元素</li>
<li>以下实例选取了所有位于 <code>&lt;div&gt;</code> 元素后的第一个 <code>&lt;p&gt;</code> 元素</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>001<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>002<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>003<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>	</div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是通过相邻兄弟选择器选择的元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span> + <span class="selector-tag">p</span>&#123;<span class="attribute">background</span>:red;&#125;</div></pre></td></tr></table></figure>
<p>效果：</p>
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/%E7%9B%B8%E9%82%BB%E5%85%84%E5%BC%9F%E9%80%89%E6%8B%A9%E5%99%A8.png" alt=""></p>
<h3 id="普通相邻兄弟选择器"><a href="#普通相邻兄弟选择器" class="headerlink" title="普通相邻兄弟选择器"></a>普通相邻兄弟选择器</h3><hr>
<ul>
<li>普通兄弟选择器选取所有指定元素的相邻兄弟元素</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>001<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>002<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>003<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>	</div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是普通相邻兄弟选择器~选择的<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是普通相邻兄弟选择器~选择的<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是普通相邻兄弟选择器~选择的<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span> ~ <span class="selector-tag">p</span>&#123;<span class="attribute">background</span>:red;&#125;</div></pre></td></tr></table></figure>
<p>效果</p>
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/%E6%99%AE%E9%80%9A%E7%9B%B8%E9%82%BB%E5%85%84%E5%BC%9F%E9%80%89%E6%8B%A9%E5%99%A8.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;组合选择符基本介绍&quot;&gt;&lt;a href=&quot;#组合选择符基本介绍&quot; class=&quot;headerlink&quot; title=&quot;组合选择符基本介绍&quot;&gt;&lt;/a&gt;组合选择符基本介绍&lt;/h3&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;组合选择符说明了两个选择器直接的关系&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CSS&lt;/code&gt;组合选择符包括各种简单选择符的组合方式&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;CSS3&lt;/code&gt; 中包含了四种组合方式&lt;ul&gt;
&lt;li&gt;后代选取器(以空格分隔)&lt;/li&gt;
&lt;li&gt;子元素选择器(以大于号分隔）&lt;/li&gt;
&lt;li&gt;相邻兄弟选择器（以加号分隔）&lt;/li&gt;
&lt;li&gt;普通兄弟选择器（以破折号分隔）
    
    </summary>
    
      <category term="Front-End" scheme="http://www.poetries.top/categories/Front-End/"/>
    
    
      <category term="CSS" scheme="http://www.poetries.top/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>写给大家看的设计书总结</title>
    <link href="http://www.poetries.top/2016/08/29/%E5%86%99%E7%BB%99%E5%A4%A7%E5%AE%B6%E7%9C%8B%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B9%A6%E6%80%BB%E7%BB%93/"/>
    <id>http://www.poetries.top/2016/08/29/写给大家看的设计书总结/</id>
    <published>2016-08-29T08:20:43.000Z</published>
    <updated>2016-09-27T15:41:22.583Z</updated>
    
    <content type="html"><![CDATA[<p><strong>设计四大基本原则</strong></p>
<h4 id="亲密性"><a href="#亲密性" class="headerlink" title="亲密性"></a><strong>亲密性</strong></h4><ul>
<li>亲密性原则是指：将相关的项组织在一起，移动这些项，使它们的物理位置相互靠近，这样一来，相关的项将被看作凝聚为一体的一个组</li>
<li>在一个页面上，物理位置的接近就意味着存在关联</li>
<li>亲密性意味着存在关联</li>
<li>如果多个项之间存在很近的亲密性，他们将成为一个视觉单元，而不是很多孤立的元素</li>
<li><strong>亲密的根本目的</strong>：是实现组织性</li>
<li><strong>要避免的问题</strong>：避免一个页面上有太多孤立的元素</li>
</ul>
<h4 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a><strong>对齐</strong></h4><ul>
<li>对齐原则是指：任何元素都不能在页面上随意安放，每一项应当与页面上的每一个内容存在某种视觉联系</li>
<li>一定要坚持一个原则：页面上只使用一种文本对齐；所有文本都左对齐或右对齐或全部居中对齐</li>
<li><strong>对齐的根本目的</strong>：是使页面统一而且有条理</li>
<li><strong>要避免的问题</strong>：<ul>
<li>要避免在页面上混合使用多种文本对齐方式（也就是说，不要将某些文本居中，而另外一些文本右对齐）</li>
<li>要避免居中对齐，有时可以有意地选择这种对齐样式，但是不要把它作为默认选择</li>
</ul>
</li>
</ul>
<a id="more"></a>
<h4 id="重复"><a href="#重复" class="headerlink" title="重复"></a><strong>重复</strong></h4><ul>
<li>重复原则指出：设计的某些方面需要在整个作品中重复</li>
<li>重复有助于组织信息，这可以帮助读者浏览各个页面，它有助于将设计中单独的部分统一起来</li>
<li>设计中视觉元素的重复可以将作品中的各部分连在一起，从而统一并增强整个作品</li>
<li><strong>根本目的</strong>：重复的目的就是统一，并增强视觉效果</li>
<li><strong>要避免的问题</strong>：要避免太多地重复一个元素，重复太多会让人讨厌</li>
</ul>
<h4 id="对比"><a href="#对比" class="headerlink" title="对比"></a><strong>对比</strong></h4><ul>
<li>对比原则指出：如果两个项不完全相同，就应当使之不同，而且应当是截然不同</li>
<li>在页面上增加对比能吸引人的眼球</li>
<li><strong>根本目的</strong>：对比的根本目的有两方面，这两个方面相辅相成，无法分开。一个目的是增强页面的效果，另一个目的是有助于信息的组织</li>
<li><strong>要避免的问题</strong>：不要犹豫，如果你想形成对比，就加大力度。要避免使用两种或多种类似的字体</li>
</ul>
<p>（完）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;设计四大基本原则&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;亲密性&quot;&gt;&lt;a href=&quot;#亲密性&quot; class=&quot;headerlink&quot; title=&quot;亲密性&quot;&gt;&lt;/a&gt;&lt;strong&gt;亲密性&lt;/strong&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;亲密性原则是指：将相关的项组织在一起，移动这些项，使它们的物理位置相互靠近，这样一来，相关的项将被看作凝聚为一体的一个组&lt;/li&gt;
&lt;li&gt;在一个页面上，物理位置的接近就意味着存在关联&lt;/li&gt;
&lt;li&gt;亲密性意味着存在关联&lt;/li&gt;
&lt;li&gt;如果多个项之间存在很近的亲密性，他们将成为一个视觉单元，而不是很多孤立的元素&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;亲密的根本目的&lt;/strong&gt;：是实现组织性&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;要避免的问题&lt;/strong&gt;：避免一个页面上有太多孤立的元素&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;对齐&quot;&gt;&lt;a href=&quot;#对齐&quot; class=&quot;headerlink&quot; title=&quot;对齐&quot;&gt;&lt;/a&gt;&lt;strong&gt;对齐&lt;/strong&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;对齐原则是指：任何元素都不能在页面上随意安放，每一项应当与页面上的每一个内容存在某种视觉联系&lt;/li&gt;
&lt;li&gt;一定要坚持一个原则：页面上只使用一种文本对齐；所有文本都左对齐或右对齐或全部居中对齐&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对齐的根本目的&lt;/strong&gt;：是使页面统一而且有条理&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;要避免的问题&lt;/strong&gt;：&lt;ul&gt;
&lt;li&gt;要避免在页面上混合使用多种文本对齐方式（也就是说，不要将某些文本居中，而另外一些文本右对齐）&lt;/li&gt;
&lt;li&gt;要避免居中对齐，有时可以有意地选择这种对齐样式，但是不要把它作为默认选择&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Designed" scheme="http://www.poetries.top/categories/Designed/"/>
    
    
      <category term="设计" scheme="http://www.poetries.top/tags/%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>css之position</title>
    <link href="http://www.poetries.top/2016/08/20/css%E4%B9%8Bposition/"/>
    <id>http://www.poetries.top/2016/08/20/css之position/</id>
    <published>2016-08-20T17:20:08.000Z</published>
    <updated>2016-09-27T15:41:22.579Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><hr>
<p>在学习<code>position</code>之前，我们应该去思考一个问题：什么情况下我们需要定位？如果没有定位将无法满足我们怎样的需求<br><a id="more"></a><br>如果没有定位，我们做出来的网页将会是按部就班的自上而下、自左而右的平铺在浏览器上，外加通过<code>margin</code>和<code>padding</code>调整一下间距，还有就是通过<code>float</code>来浮动某些元素。做一些简单的网页这样就够了，例如<code>N</code>年之前的<code>yahoo</code>，虽然现在看来很<code>low</code></p>
<p><img src="http://images.cnitblog.com/blog2015/138012/201503/090756276438351.png" alt=""></p>
<p>但是有些情况下，这种按部就班的网页排版满足不了我们的要求，我们需要某些元素跑出来，悬浮在网页上面，而且需要给它指定一个位置。这时候我们就需要用到了<code>position</code>，而且是非用不可。</p>
<h3 id="relative"><a href="#relative" class="headerlink" title="relative"></a>relative</h3><hr>
<p><code>position</code>一共有四个可选属性：<code>static/relative/absolute/fixed</code>。其中<code>static</code>（静态定位）是默认值，即所有的元素如果不设置其他的<code>position</code>值，它的<code>position</code>值就是<code>static</code></p>
<p><code>relative</code>会导致自身位置的相对变化，而不会影响其他元素的位置、大小的变化。这是<code>relative</code>的要点之一。还有第二个要点，就是<code>relative</code>产生一个新的定位上下文</p>
<h3 id="absolute"><a href="#absolute" class="headerlink" title="absolute"></a>absolute</h3><hr>
<p><img src="http://images.cnitblog.com/blog2015/138012/201503/090759476741328.png" alt=""></p>
<ul>
<li><p><code>absolute</code>元素脱离了文档结构。和<code>relative</code>不同，其他三个元素的位置重新排列了。只要元素会脱离文档结构，它就会产生破坏性，导致父元素坍塌。（此时你应该能立刻想起来，<code>float</code>元素也会脱离文档结构）</p>
</li>
<li><p><code>absolute</code>元素具有“包裹性”。之前<code>&lt;p&gt;</code>的宽度是撑满整个屏幕的，而此时<code>&lt;p&gt;</code>的宽度刚好是内容的宽度</p>
</li>
<li><p><code>absolute</code>元素具有“跟随性”。虽然<code>absolute</code>元素脱离了文档结构，但是它的位置并没有发生变化，还是老老实实的呆在它原本的位置，因为我们此时没有设置<code>top</code>、<code>left</code>的值</p>
</li>
<li><p><code>absolute</code>元素会悬浮在页面上方，会遮挡住下方的页面内容</p>
</li>
</ul>
<p><strong>注意</strong>：</p>
<ul>
<li>设置<code>absolute</code>会使得<code>inline</code>元素被“块”化</li>
<li>设置<code>absolute</code>会使得元素已有的<code>float</code>失效。不过<code>float</code>和<code>absolute</code>同时使用的情况不多</li>
<li>上文提到了<code>absolute</code>会使元素悬浮在页面之上，如果有多个悬浮元素，层级如何确定？答案是“后来者居上”</li>
</ul>
<h3 id="fixed"><a href="#fixed" class="headerlink" title="fixed"></a>fixed</h3><hr>
<p>其实<code>fixed</code>和<code>absolute</code>是一样的，唯一的区别在于：<code>absolute</code>元素是根据最近的定位上下文确定位置，而<code>fixed</code>永远根据浏览器确定位置</p>
<h3 id="定位上下文"><a href="#定位上下文" class="headerlink" title="定位上下文"></a>定位上下文</h3><hr>
<h4 id="relative的定位"><a href="#relative的定位" class="headerlink" title="relative的定位"></a>relative的定位</h4><p><code>relative</code>元素的定位永远是相对于元素自身位置的，和其他元素没关系，也不会影响其他元素</p>
<p><img src="http://images.cnitblog.com/blog2015/138012/201503/090804243309447.png" alt=""></p>
<h4 id="fixed的定位"><a href="#fixed的定位" class="headerlink" title="fixed的定位"></a>fixed的定位</h4><hr>
<p><code>fixed</code>元素的定位永远是相对于浏览器边界的，和其他元素没有关系。但是它具有破坏性，会导致其他元素位置的变化</p>
<p><img src="http://images.cnitblog.com/blog2015/138012/201503/090804452689278.png" alt=""></p>
<h4 id="absolute的定位"><a href="#absolute的定位" class="headerlink" title="absolute的定位"></a>absolute的定位</h4><hr>
<p><code>absolute</code>的定位相对于前两者要复杂许多。如果为<code>absolute</code>设置了<code>top</code>、<code>left</code>，浏览器会根据什么去确定它的纵向和横向的偏移量呢？答案是浏览器会递归查找该元素的所有父元素，如果找到一个设置了<code>position:relative/absolute/fixed</code>的元素，就以该元素为基准定位，如果没找到，就以浏览器边界定位。如下两个图所示：</p>
<p><img src="http://images.cnitblog.com/blog2015/138012/201503/090805139874485.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;在学习&lt;code&gt;position&lt;/code&gt;之前，我们应该去思考一个问题：什么情况下我们需要定位？如果没有定位将无法满足我们怎样的需求&lt;br&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://www.poetries.top/categories/Front-End/"/>
    
    
      <category term="CSS" scheme="http://www.poetries.top/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>css之display</title>
    <link href="http://www.poetries.top/2016/08/20/css%E4%B9%8Bdisplay/"/>
    <id>http://www.poetries.top/2016/08/20/css之display/</id>
    <published>2016-08-20T17:10:08.000Z</published>
    <updated>2016-09-27T15:41:22.579Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><hr>
<p>网页的所有元素，除了“块”就是“流”，而且“流”都是包含在“块”里面的（最外层的body就是一个“块”）<br><a id="more"></a><br><img src="http://images.cnitblog.com/blog2015/138012/201503/060814201807518.png" alt=""></p>
<p>在网上查找出<code>display</code>所有的属性，你会发现它有很多，但是不是每个都常用，甚至大部分你都没有用过</p>
<p><img src="http://images.cnitblog.com/blog2015/138012/201503/060814397278889.png" alt=""></p>
<p>看上图。常用的属性有：<code>none</code>、<code>block</code>、<code>inline</code>、<code>inline-block</code>、<code>inherit</code>，其中<code>inherit</code>是继承父元素的样式</p>
<p>-<code>list-item</code>：通过它可以模拟li列表样式；</p>
<ul>
<li><code>table</code>：也是一个“块”，但和<code>block</code>相比，<code>table</code>具有包裹性；</li>
<li><code>table-cell</code>：最新的多列布局解决方案；</li>
</ul>
<h3 id="inline"><a href="#inline" class="headerlink" title="inline"></a>inline</h3><hr>
<p>常用的<code>inline</code>就是文字和图片，其实<code>inline</code>真没什么好说的，大家可以把它想象成一个杯子里的水，它是“流”，是没有大小和形状的，它的宽度取决于父容器的宽度。</p>
<p>因此，针对    <code>inline</code>的标签，你设置宽度和高度是无效的，通过监控可以知道，该元素实际的宽度和高度都是<code>auto</code>，并不是我们设定的值</p>
<p><img src="http://images.cnitblog.com/blog2015/138012/201503/060815408991678.png" alt=""></p>
<p>一个很基础的问题：如何把<code>inline</code>元素转换成“块”元素？相信绝大部分人的回答是<code>display:block</code>，但是你应该知道这不是一个唯一的答案。至少我设置<code>display:table</code>也是可以的吧？</p>
<p>还有两种情况你应该去了解</p>
<h4 id="第一，对inline元素设置float"><a href="#第一，对inline元素设置float" class="headerlink" title="第一，对inline元素设置float"></a>第一，对inline元素设置float</h4><hr>
<p>我们对<code>span</code>元素添加一个<code>float:left</code>，运行看看效果，你就会大吃一惊。从显示的效果和监控的结果上看来，<code>span</code>元素已经“块”化。不要忘记<code>float</code>的“破坏性”、“包裹性”，在这里同样适用。</p>
<p><img src="http://images.cnitblog.com/blog2015/138012/201503/060816212111595.png" alt=""></p>
<h4 id="第二，对inline元素设置position-absolute-fixed"><a href="#第二，对inline元素设置position-absolute-fixed" class="headerlink" title="第二，对inline元素设置position:absolute/fixed"></a>第二，对inline元素设置position:absolute/fixed</h4><hr>
<p> 还是有同一个例子做演示，这次在<code>span</code>元素上加上<code>absolute/fixed</code>，效果大家应该能猜到，和加上<code>float</code>的效果相同。</p>
<h3 id="inline-block"><a href="#inline-block" class="headerlink" title="inline-block"></a>inline-block</h3><p> 浏览器默认样式中规定了几个<code>html</code>元素为<code>display:inline-block</code>，回顾一下</p>
<p> <img src="http://images.cnitblog.com/blog2015/138012/201503/060817421642526.png" alt=""></p>
<p> 因此，<code>inline-block</code>的特点可以总结为：外部看来是“流”，但是自身确实一个“块”。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;网页的所有元素，除了“块”就是“流”，而且“流”都是包含在“块”里面的（最外层的body就是一个“块”）&lt;br&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://www.poetries.top/categories/Front-End/"/>
    
    
      <category term="CSS" scheme="http://www.poetries.top/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>css之float</title>
    <link href="http://www.poetries.top/2016/08/20/css%E4%B9%8Bfloat/"/>
    <id>http://www.poetries.top/2016/08/20/css之float/</id>
    <published>2016-08-20T16:59:08.000Z</published>
    <updated>2016-09-27T15:41:22.579Z</updated>
    
    <content type="html"><![CDATA[<h3 id="重新认识float"><a href="#重新认识float" class="headerlink" title="重新认识float"></a>重新认识float</h3><h4 id="误解和“误用”"><a href="#误解和“误用”" class="headerlink" title="误解和“误用”"></a>误解和“误用”</h4><hr>
<p>绝大多数用<code>float</code>都是为了——横向排版、或者多列布局。这样的使用是正确的，大部分人都这样使用，<code>bootstrap</code>的栅格系统也是使用了float来实现的，并且在<code>css3</code>被普及之前，多列布局的最佳解决方案也是使用float——要不然你就用<code>table</code><br><a id="more"></a><br>但是，这样使用确实是对<code>float</code>的一种误解和“误用”，因为<code>float</code>被设计出来的初衷是用于——文字环绕效果。即，一个图片一段文字，图片<code>float:left</code>之后，文字会环绕图片。</p>
<p>当时的多列布局和横向排版主要是依靠<code>table</code>实现，后来人们见见的发现，使用<code>table</code>将导致代码量大、混乱、不利于<code>SEO</code>，然后发现<code>float+div</code>是一个很不错的排版解决方案，于是乎——过去几年<code>“css+div”</code>页面排版一直是一个热门话题</p>
<p>初学<code>float</code>的同学，你如果没有从最基础的知识入手，而是从网络的零散之后或者同事同学的零散代码学起的话，你可能只知道<code>float</code>是用来排版的，但是你却不知道<code>float</code>的许多个特性，这就导致了你在使用<code>float</code>时的许多问题。不信请看下文</p>
<h4 id="破坏性"><a href="#破坏性" class="headerlink" title="破坏性"></a>破坏性</h4><hr>
<p>首先大家来看两个<code>demo</code>，如下图。第一个<code>demo</code>是一个简单不过的例子，显示效果也很正常。第二个<code>demo</code>，唯一的区别就在于<code>&lt;img&gt;</code>加了<code>float:left</code>，上层的<code>&lt;div&gt;</code>却出现了“坍塌”现象。</p>
<p><img src="http://images.cnitblog.com/blog2015/138012/201503/041935416022925.png" alt=""></p>
<p>不过，这就是<code>float</code>的“破坏性”——<code>float</code>破坏了父标签的原本结构，使得父标签出现了坍塌现象。导致这一现象的最根本原因在于：被设置了<code>float</code>的元素会脱离文档流。</p>
<p>初次接触“脱离文档流”的朋友可以这样理解：div是父亲，img是它的儿子，原本好好的父子关系，原本爷俩可以体面的展示一个包含关系的效果。直到有一天，img被设置了float。老天爷（浏览器）规定，任何float元素都不允许再呆在自己的家族中，于是img被逐出家门，断绝和div父子关系。于是乎，div没有了img儿子，也就不能再展示这种父子的包含关系，于是两者就各过各的，互不相干。——这样一说，容易理解了吧？</p>
<p>但是，永远都不要忘记<code>float</code><strong>被设计的初衷——实现文字环绕效果</strong>。当<code>div</code>中有文字时，文字还是会环绕在img周围的。如下图：</p>
<p><img src="http://images.cnitblog.com/blog2015/138012/201503/041936262749977.png" alt=""></p>
<p>大家现在已经知道了<code>float</code>具有破坏性，可能也有很多朋友之前就知道这一特性，但是你有没有思考一下：<code>float</code>为什么会被设计成具有破坏性，为什么会脱离文档流？这一点非常重要！其实原因非常简单——为了要实现文字的环绕效果？</p>
<p>如果<code>float</code>不让父元素坍塌，能实现文字环绕效果吗？</p>
<p><img src="http://images.cnitblog.com/blog2015/138012/201503/041937051339305.png" alt=""></p>
<h4 id="包裹性"><a href="#包裹性" class="headerlink" title="包裹性"></a>包裹性</h4><hr>
<p>“包裹性”也是<code>float</code>的一个非常重要的特性，大家用<code>float</code>时一定要熟知这一特性</p>
<p><img src="http://images.cnitblog.com/blog2015/138012/201503/041937216171937.png" alt=""></p>
<p>如上图，普通的<code>div</code>如果没有设置宽度，它会撑满整个屏幕，在之前的盒子模式那一节也讲到过。而如果给<code>div</code>增加<code>float:left</code>之后，它突然变得紧凑了，宽度发生了变化——这就是包裹性。<code>div</code>设置了<code>float</code>之后，其宽度会自动调整为包裹住内容宽度，而不是撑满整个父容器</p>
<p>注意，此时div虽然体现了包裹性，但是它的<code>display</code>样式是没有变化的，还是<code>block</code></p>
<p>知道了包裹性之后，我们还是继续思考：<code>float</code>为什么要具有包裹性？其实答案还得从<code>float</code>的设计初衷来寻找，<code>float</code>是被设计用于实现文字环绕效果的。文字环绕图片比较好理解，但是如果想要让文字环绕一个<code>div</code>呢？此时<code>div</code>不被“包裹”起来，那么如何去实现环绕效果？</p>
<h4 id="清空格"><a href="#清空格" class="headerlink" title="清空格"></a>清空格</h4><hr>
<p><code>float</code>还有一个大家可能不是很熟悉的特性——清空格</p>
<p><img src="http://images.cnitblog.com/blog2015/138012/201503/041938286334929.png" alt=""></p>
<p>第一个例子，正常的<code>img</code>中间是会有空格的，因为多个<code>&lt;img&gt;</code>标签会有换行，而浏览器识别换行为空格，这也是很正常的。第二个例子中，<code>img</code>增加了<code>float:left</code>的样式，这就使得<code>img</code>之间没有了空格，四个img紧紧挨着。</p>
<p>“清空格”这一特性的根本原因是由于<code>float</code>会导致节点脱离文档流结构。它都不属于文档流结构了，那么它身边的什么换行、空格就都和它没关系的，它就尽量的往一边去靠拢，能靠多近就靠多近，这就是清空格的本质。</p>
<h3 id="清除float"><a href="#清除float" class="headerlink" title="清除float"></a>清除float</h3><hr>
<p><code>floa</code>t具有“破坏性”，它会导致父元素“坍塌”，这将不是所要看到的。如何去避免<code>float</code>带来的这种影响呢（也就是我们常说的“清除浮动”） ？方法有很多种，我在这里介绍4中供大家参考，大家可根据实际情况来选择</p>
<p>先介绍两个比较简单，但是不常用的解决方法：</p>
<ul>
<li>为父元素添加<code>overflow:hidden</code></li>
<li>浮动父元素</li>
</ul>
<p>第三种方法也不是很常用，但是大家要知道<code>clear:both</code>这个东西。通过在所有浮动元素下方添加一个<code>clear:both</code>的元素，可以消除<code>float</code>的破坏性。</p>
<p><img src="http://images.cnitblog.com/blog2015/138012/201503/050820381338575.png" alt=""></p>
<p>接下来的第四种方法是大家最需要掌握的,也是<code>bootstrap</code>正在用的——<code>clearfix</code>——不知道的同学一定要去搜一下，要不然就太low了！</p>
<p><img src="http://images.cnitblog.com/blog2015/138012/201503/050820563529176.png" alt=""></p>
<p>上图中，我们定义一个<code>.clearfix</code>类，然后对<code>float</code>元素的父元素应用这一样式即可，非常简单吧</p>
<p>究其原理，其实就是通过伪元素选择器，在<code>div</code>后面增加了一个<code>clear:both</code>的元素，跟第三种方法是一个道理</p>
<h3 id="合理的使用float布局网页"><a href="#合理的使用float布局网页" class="headerlink" title="合理的使用float布局网页"></a>合理的使用float布局网页</h3><hr>
<p>我们使用<code>float</code>做网页布局，是一种误解和“误用”。估计大多数人误解了<code>float</code>的原本设计初衷，但是这里的“误用”是要加引号的，因为这是一种无心插柳的应用。即，用<code>float</code>做网页布局是很合情合理的</p>
<h4 id="第一，三列布局"><a href="#第一，三列布局" class="headerlink" title="第一，三列布局"></a>第一，三列布局</h4><hr>
<p>博客园的主页就是经典的三列布局，很明显的左、中、右</p>
<p><img src="http://images.cnitblog.com/blog2015/138012/201503/050821391026316.png" alt=""></p>
<p>对于这种布局，给出的布局方案是：</p>
<p><img src="http://images.cnitblog.com/blog2015/138012/201503/050821541173963.png" alt=""></p>
<h4 id="第二，两列布局"><a href="#第二，两列布局" class="headerlink" title="第二，两列布局"></a>第二，两列布局</h4><hr>
<p>以博客园一篇文章的链接为例，它分为左、右结构</p>
<p><img src="http://images.cnitblog.com/blog2015/138012/201503/050822099309264.png" alt=""></p>
<p>对于这种布局的格式，设计方案是：</p>
<p><img src="http://images.cnitblog.com/blog2015/138012/201503/050822193676116.png" alt=""></p>
<h3 id="BootStrap的栅格系统"><a href="#BootStrap的栅格系统" class="headerlink" title="BootStrap的栅格系统"></a>BootStrap的栅格系统</h3><hr>
<p>如果您熟悉并使用<code>bootstrap</code>，那么您将不必自己去操心网页布局，因为<code>bootstrap</code>已经把网页分成了<code>12</code>列，您可以随意设置多列布局，非常方便。这就是bootstrap的栅格系统。此处不会详解栅格系统，就是简单看看栅格系统的实现，它是用<code>float</code>实现的</p>
<p><img src="http://images.cnitblog.com/blog2015/138012/201503/050822365708659.png" alt=""></p>
<p>对于父元素的清除浮动，<code>bootstrap</code>使用的就是<code>clearfix</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;重新认识float&quot;&gt;&lt;a href=&quot;#重新认识float&quot; class=&quot;headerlink&quot; title=&quot;重新认识float&quot;&gt;&lt;/a&gt;重新认识float&lt;/h3&gt;&lt;h4 id=&quot;误解和“误用”&quot;&gt;&lt;a href=&quot;#误解和“误用”&quot; class=&quot;headerlink&quot; title=&quot;误解和“误用”&quot;&gt;&lt;/a&gt;误解和“误用”&lt;/h4&gt;&lt;hr&gt;
&lt;p&gt;绝大多数用&lt;code&gt;float&lt;/code&gt;都是为了——横向排版、或者多列布局。这样的使用是正确的，大部分人都这样使用，&lt;code&gt;bootstrap&lt;/code&gt;的栅格系统也是使用了float来实现的，并且在&lt;code&gt;css3&lt;/code&gt;被普及之前，多列布局的最佳解决方案也是使用float——要不然你就用&lt;code&gt;table&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://www.poetries.top/categories/Front-End/"/>
    
    
      <category term="CSS" scheme="http://www.poetries.top/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>css之盒子模型</title>
    <link href="http://www.poetries.top/2016/08/20/css%E4%B9%8B%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/"/>
    <id>http://www.poetries.top/2016/08/20/css之盒子模型/</id>
    <published>2016-08-20T16:18:08.000Z</published>
    <updated>2016-09-27T15:41:22.579Z</updated>
    
    <content type="html"><![CDATA[<h3 id="盒子的宽度"><a href="#盒子的宽度" class="headerlink" title="盒子的宽度"></a>盒子的宽度</h3><hr>
<p>在盒子模型中，我们设置的宽度都是内容宽度，不是整个盒子的宽度<br>盒子的宽度=<code>margin-right+margin-left+border-left+padding-left+width+padding-right+border-right</code><br><a id="more"></a></p>
<h4 id="设置了固定宽度的情况下"><a href="#设置了固定宽度的情况下" class="headerlink" title="设置了固定宽度的情况下"></a>设置了固定宽度的情况下</h4><hr>
<p><img src="http://images.cnitblog.com/blog/138012/201502/120828055113043.png" alt=""></p>
<p>因此，在盒子模型中，我们设置的宽度都是内容宽度，不是整个盒子的宽度。而整个盒子的宽度是：（<code>内容宽度 + border宽度 + padding宽度 + margin宽度</code>）之和。这样我们改四个中的其中一个，都会导致盒子宽度的改变。这对我们来说不友好</p>
<h4 id="充满父容器的情况下"><a href="#充满父容器的情况下" class="headerlink" title="充满父容器的情况下"></a>充满父容器的情况下</h4><hr>
<p>默认情况下，<code>div</code>的<code>display:block</code>，宽度会充满整个父容器。如下图：</p>
<p><img src="http://images.cnitblog.com/blog/138012/201502/120829117619136.png" alt=""></p>
<p>这个<code>div</code>是个盒子模型，它的整个宽度包括（<code>内容宽度 + border宽度 + padding宽度 + margin宽度</code>），整个的宽度充满父容器。</p>
<p>问题就在这里。如果父容器宽度不变，我们手动增大<code>margin</code>、<code>border</code>或<code>padding</code>其中一项的宽度值，都会导致内容宽度的减少。</p>
<p>极端情况下，如果内容的宽度压缩到不能再压缩了（例如一个字的宽度），那么浏览器会强迫增加父容器的宽度。这可不是我们想要看到的</p>
<h4 id="包裹内容的情况下"><a href="#包裹内容的情况下" class="headerlink" title="包裹内容的情况下"></a>包裹内容的情况下</h4><hr>
<p>这种情况下比较简单，内容的宽度按照内容计算，盒子的宽度将在内容宽度的基础上再增加（<code>padding宽度 + border宽度 + margin宽度</code>）之和</p>
<p><img src="http://images.cnitblog.com/blog/138012/201502/120829483089838.png" alt=""></p>
<h3 id="再看盒子的宽度"><a href="#再看盒子的宽度" class="headerlink" title="再看盒子的宽度"></a>再看盒子的宽度</h3><hr>
<p>前面提到，为盒子模型设置宽度，结果只是设置了内容的宽度，这个不合理。如何解决这一问题？<strong>答案就是</strong>：<code>box-sizing:border-box</code></p>
<p><img src="http://images.cnitblog.com/blog/138012/201502/120830294011050.png" alt=""></p>
<p>如上图，<code>div</code>设置了<code>box-sizing:border-box</code>之后，<code>300px</code>的宽度是内容 + <code>border</code>+ 边框的宽度（不包括<code>margin</code>），这样就比较符合我们的实际要求了。</p>
<p>建议大家在为系统写<code>css</code>时候，第一个样式是</p>
<p><img src="http://images.cnitblog.com/blog/138012/201502/120830507768619.png" alt=""></p>
<h3 id="纵向margin的重叠"><a href="#纵向margin的重叠" class="headerlink" title="纵向margin的重叠"></a>纵向margin的重叠</h3><hr>
<p>如下图，<code>&lt;p&gt;</code>的纵向<code>margin</code>是<code>16px</code>，那么两个<code>&lt;p&gt;</code>之间纵向的距离是多少？</p>
<p>按常理来说应该是 <code>16 + 16 = 32px</code>，但是答案仍然是<code>16px</code>。因为纵向的<code>margin</code>是会重叠的，大的会把小的“吃掉”</p>
<p><img src="http://images.cnitblog.com/blog/138012/201502/120831356517143.png" alt=""></p>
<h3 id="用div画“三角”"><a href="#用div画“三角”" class="headerlink" title="用div画“三角”"></a>用div画“三角”</h3><hr>
<p>　“三角”在日常的网页中是很常见的，例如百度首页：</p>
<p> <img src="http://images.cnitblog.com/blog/138012/201502/120832351362371.png" alt=""></p>
<p>你当然可以使用背景图片来实现这一效果，但是你也可以用<code>div</code>来实现这一效果，很简单，而且可以封装通用：</p>
<p><img src="http://images.cnitblog.com/blog/138012/201502/120832509339145.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;盒子的宽度&quot;&gt;&lt;a href=&quot;#盒子的宽度&quot; class=&quot;headerlink&quot; title=&quot;盒子的宽度&quot;&gt;&lt;/a&gt;盒子的宽度&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;在盒子模型中，我们设置的宽度都是内容宽度，不是整个盒子的宽度&lt;br&gt;盒子的宽度=&lt;code&gt;margin-right+margin-left+border-left+padding-left+width+padding-right+border-right&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://www.poetries.top/categories/Front-End/"/>
    
    
      <category term="CSS" scheme="http://www.poetries.top/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>css之解读浏览器默认样式</title>
    <link href="http://www.poetries.top/2016/08/20/css%E4%B9%8B%E8%A7%A3%E8%AF%BB%E6%B5%8F%E8%A7%88%E5%99%A8%E9%BB%98%E8%AE%A4%E6%A0%B7%E5%BC%8F/"/>
    <id>http://www.poetries.top/2016/08/20/css之解读浏览器默认样式/</id>
    <published>2016-08-20T15:10:08.000Z</published>
    <updated>2016-09-27T15:41:22.579Z</updated>
    
    <content type="html"><![CDATA[<h3 id="理念上的转变"><a href="#理念上的转变" class="headerlink" title="理念上的转变"></a>理念上的转变</h3><hr>
<p>浏览器加载了html之后只为一件东西——<code>dom</code>树，浏览器把<code>html</code>变为<code>dom</code>树结构，就完成了对<code>html</code>的结构化。至于后来对视图的渲染，p是<code>block</code>、<code>br</code>换行，那是整合了<code>css</code>之后的事情。而浏览器整合<code>css</code>又是另一个路线，和解析<code>html</code>是分开的。这里的<code>“css”</code>就包含了浏览器默认样式。<br><a id="more"></a><br><img src="http://images.cnitblog.com/blog/138012/201502/090820101205470.png" alt=""></p>
<p><strong>一句话，浏览器将载入的<code>html</code>变为<code>dom</code>树，但是此时没有任何显示样式。所以显示的样式，都是css定义的，浏览器只会通过css来渲染视图样式</strong></p>
<h3 id="block元素"><a href="#block元素" class="headerlink" title="block元素"></a>block元素</h3><hr>
<p><img src="http://images.cnitblog.com/blog/138012/201502/090820369016121.png" alt=""></p>
<p>为何默认情况下<code>p</code>、<code>h1</code>、<code>ul</code>、<code>div</code>都是<code>block</code>显示，就是这里定义的。所以，不要再说<code>div</code>天生就是<code>block</code>——这句话应该换成：<code>浏览器默认样式天生规定了div是block——所以才导致了div是block！是默认样式规定的，不是浏览器的内核规定的。</code></p>
<p>没有设置<code>block</code>的元素，默认为<code>inline</code>显示</p>
<h3 id="display-list-item"><a href="#display-list-item" class="headerlink" title="display: list-item"></a>display: list-item</h3><hr>
<p><img src="http://images.cnitblog.com/blog/138012/201502/090821140895694.png" alt=""></p>
<p>我们在使用<code>display</code>，常用的值一般是：<code>inline/block/inline-block</code>，用不到<code>list-item</code>。那这里的<code>list-item</code>到底有什么作用？</p>
<p><img src="http://images.cnitblog.com/blog/138012/201502/090821251516313.png" alt=""></p>
<p>出现了<code>ul-li</code>中的效果了吧，如果再加一个<code>margin-left</code>是不是就跟<code>ul-li</code>一样了？所以，<code>ul-li</code>为什么会默认显示成那种样子？——<code>list-item</code>才是“罪魁祸首”</p>
<h3 id="diplay-table"><a href="#diplay-table" class="headerlink" title="diplay:table"></a>diplay:table</h3><hr>
<p><img src="http://images.cnitblog.com/blog/138012/201502/090822126047851.png" alt=""></p>
<p> 先给出一个快速思考题：<code>&lt;table&gt;</code>和<code>&lt;div&gt;</code>在容器尺寸上最大区别是什么（只是容器尺寸，不考虑内容区别）？请在两秒钟内说出答案。</p>
<p>答案是——<code>div</code>宽度和父容器相同，<code>table</code>宽度根据内容而定——即<code>table</code>具有“包裹性”</p>
<p><img src="http://images.cnitblog.com/blog/138012/201502/090822225585144.png" alt=""></p>
<p>第一个<code>div</code>默认是<code>block</code>，宽度撑满整个页面。第二<code>div</code>设置了<code>display:table</code>，宽度根据内容而定。这就是“包裹性”</p>
<h3 id="display-table-cell"><a href="#display-table-cell" class="headerlink" title="display: table-cell"></a>display: table-cell</h3><hr>
<p><img src="http://images.cnitblog.com/blog/138012/201502/090823168238830.png" alt=""></p>
<p>这里的大部分都是我们一直都不会用到的，用不到的了解即可，没必要深究。但是这个<code>table-cel</code>我们却能用得到，而且是用它来干一件很重要的事情——多列布局</p>
<p>传统模式下大家都使用<code>float</code>来解决这一问题，但是<code>float</code>写出来的东西代码复杂，宽度调整不灵活，浏览器兼容性有问题。所以才有了新方案——<code>table-cell</code>，注意，<code>IE6、7</code>不行</p>
<p><img src="http://images.cnitblog.com/blog/138012/201502/090825054791337.png" alt=""></p>
<p>你可以用<code>table-cell</code>，像用<code>table</code>一样做多列布局，做出来的效果和<code>table</code>做出来的效果是一模一样的</p>
<h3 id="body样式"><a href="#body样式" class="headerlink" title="body样式"></a>body样式</h3><hr>
<p>在<code>body</code>中，定义了两个样式<br><img src="http://images.cnitblog.com/blog/138012/201502/090826064958362.png" alt=""></p>
<ul>
<li><p>不同浏览器为body设置的margin值可能不一样，因此大家都知道在<code>css</code>中用 <code>*{margin:0}</code>来解决这一兼容性问题</p>
</li>
<li><p>浏览器默认样式还为<code>body</code>设置了<code>line-height</code>，<code>line-height</code>这个值1.12是对英文比较友好，中文状态下就显得有点拥挤。<code>Line-height</code>是具有继承性的，在<code>body</code>中设置了，<code>body</code>下面所有的文字都会继承生效</p>
</li>
</ul>
<p>这里的<code>line-height: 1.12</code>是一个相对值，即是文字高度的<code>1.12</code>倍。看到这里，我们在写<code>line-height</code>的时候，也一定要注意使用相对值，不要使用绝对值。如下：</p>
<p><img src="http://images.cnitblog.com/blog/138012/201502/090827098705700.png" alt=""></p>
<p>上图是编写<code>line-height</code>的三种形式，大家觉得哪种形式最好？区别是什么？</p>
<ul>
<li>情况1：永远按照文字的<code>1.4</code>倍计算，不管文字的高度如何，可适应任何变化；</li>
<li>情况2：永远按照<code>1.4em</code>计算，随着<code>em</code>的值改变，不管文字高度如何（此时文字高度可能已经通过绝对的<code>px</code>值该表了大小，而不是随em改变的）；</li>
<li>情况3：就是<code>25px</code>，绝对的。</li>
</ul>
<p>相信看到这里大家会发现，通过一个<code>line-height</code>我能能窥探到的道道有很多。如果大家看懂了这三种情况，从软件设计和系统扩展的角度说，当然我们都会<code>选择第一种</code>。</p>
<h3 id="em和px"><a href="#em和px" class="headerlink" title="em和px"></a>em和px</h3><hr>
<p>因为<code>px</code>是固定大小，一目了然。——当然，它也不利于扩展<br>因此，我们推荐大家用<code>em</code>。而且浏览器的默认样式也建议我们这样书写：</p>
<p><img src="http://images.cnitblog.com/blog/138012/201502/090828404176105.png" alt=""></p>
<p><code>em</code>是什么？——<code>em</code>是一个浏览器识别的长度单位，但是它不是绝对的、固定的，而是相对的。大家都知道<code>px</code>是一个绝对的长度单位制，它永远不会改变。浏览器默认情况下令<code>1em === 16px</code>。现在你知道为何p默认是<code>16px</code>了吧。而且你还知道了<code>h1</code>是<code>p</code>高度的两倍，<code>h2</code>是p高度的<code>1.5</code>倍</p>
<h3 id="粗体和斜体"><a href="#粗体和斜体" class="headerlink" title="粗体和斜体"></a>粗体和斜体</h3><hr>
<p><img src="http://images.cnitblog.com/blog/138012/201502/090829319794453.png" alt=""></p>
<p>上图中，标注了在整个<code>html</code>中，哪些元素设置了粗体/斜体。重点还是一个思维转换的问题：<code>h1</code>不是天生的粗体，而是设置了<code>font-weight:bolder</code>的样式而已</p>
<h3 id="inline-block"><a href="#inline-block" class="headerlink" title="inline-block"></a>inline-block</h3><hr>
<p><img src="http://images.cnitblog.com/blog/138012/201502/090830027458186.png" alt=""></p>
<p>看看浏览器默认样式告诉你的捷径：<code>button</code>、<code>input</code>就是<code>inline-block</code>！这样以点播你就会一下子明白，最起码能给你一个很好的形象的概念。看看<code>button</code>和<code>input</code>的表现，你就知道<code>inline-block</code>是什么样子了</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;理念上的转变&quot;&gt;&lt;a href=&quot;#理念上的转变&quot; class=&quot;headerlink&quot; title=&quot;理念上的转变&quot;&gt;&lt;/a&gt;理念上的转变&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;浏览器加载了html之后只为一件东西——&lt;code&gt;dom&lt;/code&gt;树，浏览器把&lt;code&gt;html&lt;/code&gt;变为&lt;code&gt;dom&lt;/code&gt;树结构，就完成了对&lt;code&gt;html&lt;/code&gt;的结构化。至于后来对视图的渲染，p是&lt;code&gt;block&lt;/code&gt;、&lt;code&gt;br&lt;/code&gt;换行，那是整合了&lt;code&gt;css&lt;/code&gt;之后的事情。而浏览器整合&lt;code&gt;css&lt;/code&gt;又是另一个路线，和解析&lt;code&gt;html&lt;/code&gt;是分开的。这里的&lt;code&gt;“css”&lt;/code&gt;就包含了浏览器默认样式。&lt;br&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://www.poetries.top/categories/Front-End/"/>
    
    
      <category term="CSS" scheme="http://www.poetries.top/tags/CSS/"/>
    
  </entry>
  
</feed>
